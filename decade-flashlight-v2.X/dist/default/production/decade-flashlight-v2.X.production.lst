

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Jun 26 13:38:15 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	12LF1572
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12LF1572 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  008C                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0097                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  028C                     	;# 
   123  030C                     	;# 
   124  038C                     	;# 
   125  0391                     	;# 
   126  0392                     	;# 
   127  0393                     	;# 
   128  0691                     	;# 
   129  0692                     	;# 
   130  0693                     	;# 
   131  0694                     	;# 
   132  0695                     	;# 
   133  0D8E                     	;# 
   134  0D8F                     	;# 
   135  0D90                     	;# 
   136  0D91                     	;# 
   137  0D91                     	;# 
   138  0D92                     	;# 
   139  0D93                     	;# 
   140  0D93                     	;# 
   141  0D94                     	;# 
   142  0D95                     	;# 
   143  0D95                     	;# 
   144  0D96                     	;# 
   145  0D97                     	;# 
   146  0D97                     	;# 
   147  0D98                     	;# 
   148  0D99                     	;# 
   149  0D99                     	;# 
   150  0D9A                     	;# 
   151  0D9B                     	;# 
   152  0D9C                     	;# 
   153  0D9C                     	;# 
   154  0D9D                     	;# 
   155  0D9D                     	;# 
   156  0D9E                     	;# 
   157  0D9F                     	;# 
   158  0DA0                     	;# 
   159  0DA1                     	;# 
   160  0DA1                     	;# 
   161  0DA2                     	;# 
   162  0DA3                     	;# 
   163  0DA3                     	;# 
   164  0DA4                     	;# 
   165  0DA5                     	;# 
   166  0DA5                     	;# 
   167  0DA6                     	;# 
   168  0DA7                     	;# 
   169  0DA7                     	;# 
   170  0DA8                     	;# 
   171  0DA9                     	;# 
   172  0DA9                     	;# 
   173  0DAA                     	;# 
   174  0DAB                     	;# 
   175  0DAC                     	;# 
   176  0DAC                     	;# 
   177  0DAD                     	;# 
   178  0DAD                     	;# 
   179  0DAE                     	;# 
   180  0DAF                     	;# 
   181  0DB0                     	;# 
   182  0DB1                     	;# 
   183  0DB1                     	;# 
   184  0DB2                     	;# 
   185  0DB3                     	;# 
   186  0DB3                     	;# 
   187  0DB4                     	;# 
   188  0DB5                     	;# 
   189  0DB5                     	;# 
   190  0DB6                     	;# 
   191  0DB7                     	;# 
   192  0DB7                     	;# 
   193  0DB8                     	;# 
   194  0DB9                     	;# 
   195  0DB9                     	;# 
   196  0DBA                     	;# 
   197  0DBB                     	;# 
   198  0DBC                     	;# 
   199  0DBC                     	;# 
   200  0DBD                     	;# 
   201  0DBD                     	;# 
   202  0DBE                     	;# 
   203  0DBF                     	;# 
   204  0DC0                     	;# 
   205  0FE4                     	;# 
   206  0FE5                     	;# 
   207  0FE6                     	;# 
   208  0FE7                     	;# 
   209  0FE8                     	;# 
   210  0FE8                     	;# 
   211  0FE9                     	;# 
   212  0FEA                     	;# 
   213  0FEA                     	;# 
   214  0FEB                     	;# 
   215  0FED                     	;# 
   216  0FEE                     	;# 
   217  0FEE                     	;# 
   218  0FEF                     	;# 
   219  005F                     _GIE	set	95
   220  005E                     _PEIE	set	94
   221  0098                     _OSCTUNE	set	152
   222  009D                     _ADCON0bits	set	157
   223  009D                     _ADCON0	set	157
   224  009E                     _ADCON1	set	158
   225  0097                     _WDTCON	set	151
   226  008C                     _TRISA	set	140
   227  009B                     _ADRES	set	155
   228  04E9                     _nDONE	set	1257
   229  0464                     _TRISA4	set	1124
   230  049C                     _PWM1IE	set	1180
   231  04AF                     _nWPUEN	set	1199
   232  0117                     _FVRCONbits	set	279
   233  0117                     _FVRCON	set	279
   234  010C                     _LATA	set	268
   235  0862                     _LATA2	set	2146
   236  018C                     _ANSELA	set	396
   237  0C64                     _ANSA4	set	3172
   238  020C                     _WPUA	set	524
   239  030C                     _SLRCONA	set	780
   240  038C                     _INLVLA	set	908
   241  0D95                     _PWM1PR	set	3477
   242  0D93                     _PWM1DC	set	3475
   243  0D91                     _PWM1PH	set	3473
   244  0D9B                     _PWM1CON	set	3483
   245  0D8F                     _PWMLD	set	3471
   246  0D9E                     _PWM1CLKCON	set	3486
   247  0D9C                     _PWM1INTE	set	3484
   248                           
   249                           	psect	cinit
   250  07FB                     start_initialization:	
   251                           ; #config settings
   252                           
   253  07FB                     __initialization:
   254                           
   255                           ; Clear objects allocated to BANK0
   256  07FB  0020               	movlb	0	; select bank0
   257  07FC  01B6               	clrf	__pbssBANK0& (0+127)
   258  07FD  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   259  07FE                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262  07FE                     __end_of__initialization:
   263  07FE  0020               	movlb	0
   264  07FF  2F51               	ljmp	_main	;jump to C main() function
   265                           
   266                           	psect	bssBANK0
   267  0036                     __pbssBANK0:
   268  0036                     _reset_count:
   269  0036                     	ds	2
   270                           
   271                           	psect	cstackCOMMON
   272  0070                     __pcstackCOMMON:
   273  0070                     ?_main_loop:
   274  0070                     ??_main_loop:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_init:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ??_init:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_main:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_resistor_ratio:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?___wmul:	
   290                           ; 2 bytes @ 0x0
   291                           
   292  0070                     ?___lmul:	
   293                           ; 2 bytes @ 0x0
   294                           
   295  0070                     ?___aldiv:	
   296                           ; 4 bytes @ 0x0
   297                           
   298  0070                     ___wmul@multiplier:	
   299                           ; 4 bytes @ 0x0
   300                           
   301  0070                     ___lmul@multiplier:	
   302                           ; 2 bytes @ 0x0
   303                           
   304  0070                     ___aldiv@divisor:	
   305                           ; 4 bytes @ 0x0
   306                           
   307                           
   308                           ; 4 bytes @ 0x0
   309  0070                     	ds	2
   310  0072                     ??_resistor_ratio:
   311  0072                     ___wmul@multiplicand:	
   312                           ; 1 bytes @ 0x2
   313                           
   314                           
   315                           ; 2 bytes @ 0x2
   316  0072                     	ds	2
   317  0074                     ??___wmul:
   318  0074                     ___wmul@product:	
   319                           ; 1 bytes @ 0x4
   320                           
   321  0074                     ___lmul@multiplicand:	
   322                           ; 2 bytes @ 0x4
   323                           
   324  0074                     ___aldiv@dividend:	
   325                           ; 4 bytes @ 0x4
   326                           
   327                           
   328                           ; 4 bytes @ 0x4
   329  0074                     	ds	2
   330  0076                     ?___awdiv:
   331  0076                     ___awdiv@divisor:	
   332                           ; 2 bytes @ 0x6
   333                           
   334                           
   335                           ; 2 bytes @ 0x6
   336  0076                     	ds	2
   337  0078                     ??___lmul:
   338  0078                     ??___aldiv:	
   339                           ; 1 bytes @ 0x8
   340                           
   341  0078                     ___awdiv@dividend:	
   342                           ; 1 bytes @ 0x8
   343                           
   344  0078                     ___lmul@product:	
   345                           ; 2 bytes @ 0x8
   346                           
   347                           
   348                           ; 4 bytes @ 0x8
   349  0078                     	ds	1
   350  0079                     ??_battery_voltage:
   351                           
   352                           ; 1 bytes @ 0x9
   353  0079                     	ds	1
   354  007A                     ??___awdiv:
   355                           
   356                           ; 1 bytes @ 0xA
   357  007A                     	ds	2
   358                           
   359                           	psect	cstackBANK0
   360  0020                     __pcstackBANK0:
   361  0020                     ___aldiv@counter:
   362  0020                     ___awdiv@counter:	
   363                           ; 1 bytes @ 0x0
   364                           
   365                           
   366                           ; 1 bytes @ 0x0
   367  0020                     	ds	1
   368  0021                     ___aldiv@sign:
   369  0021                     ___awdiv@sign:	
   370                           ; 1 bytes @ 0x1
   371                           
   372                           
   373                           ; 1 bytes @ 0x1
   374  0021                     	ds	1
   375  0022                     ___awdiv@quotient:
   376  0022                     ___aldiv@quotient:	
   377                           ; 2 bytes @ 0x2
   378                           
   379                           
   380                           ; 4 bytes @ 0x2
   381  0022                     	ds	4
   382  0026                     ?_battery_voltage:
   383                           
   384                           ; 2 bytes @ 0x6
   385  0026                     	ds	2
   386  0028                     ??_main:
   387                           
   388                           ; 1 bytes @ 0x8
   389  0028                     	ds	8
   390  0030                     main@ratio:
   391                           
   392                           ; 4 bytes @ 0x10
   393  0030                     	ds	4
   394  0034                     main@vbatt:
   395                           
   396                           ; 2 bytes @ 0x14
   397  0034                     	ds	2
   398                           
   399                           	psect	maintext
   400  0751                     __pmaintext:	
   401 ;;
   402 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   403 ;;
   404 ;; *************** function _main *****************
   405 ;; Defined at:
   406 ;;		line 105 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;  ratio           4   16[BANK0 ] unsigned long 
   411 ;;  vbatt           2   20[BANK0 ] short 
   412 ;; Return value:  Size  Location     Type
   413 ;;                  1    wreg      void 
   414 ;; Registers used:
   415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   416 ;; Tracked objects:
   417 ;;		On entry : B1F/0
   418 ;;		On exit  : 0/0
   419 ;;		Unchanged: 0/0
   420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   421 ;;      Params:         0       0       0       0
   422 ;;      Locals:         0       6       0       0
   423 ;;      Temps:          0       8       0       0
   424 ;;      Totals:         0      14       0       0
   425 ;;Total ram usage:       14 bytes
   426 ;; Hardware stack levels required when called:    2
   427 ;; This function calls:
   428 ;;		___awdiv
   429 ;;		___lmul
   430 ;;		___wmul
   431 ;;		_battery_voltage
   432 ;;		_init
   433 ;;		_main_loop
   434 ;;		_resistor_ratio
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _main
   442  0751                     _main:
   443                           
   444                           ;main.c: 108:   int16_t vbatt = battery_voltage();
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _main: [allreg]
   448  0751  25FB               	fcall	_battery_voltage
   449  0752  0827               	movf	?_battery_voltage+1,w
   450  0753  00B5               	movwf	main@vbatt+1
   451  0754  0826               	movf	?_battery_voltage,w
   452  0755  00B4               	movwf	main@vbatt
   453                           
   454                           ;main.c: 109:   if (vbatt > 3600) vbatt = 3600;
   455  0756  0835               	movf	main@vbatt+1,w
   456  0757  3A80               	xorlw	128
   457  0758  00A8               	movwf	??_main
   458  0759  308E               	movlw	142
   459  075A  0228               	subwf	??_main,w
   460  075B  1D03               	skipz
   461  075C  2F5F               	goto	u675
   462  075D  3011               	movlw	17
   463  075E  0234               	subwf	main@vbatt,w
   464  075F                     u675:
   465  075F  1C03               	skipc
   466  0760  2F66               	goto	l87
   467  0761  3010               	movlw	16
   468  0762  0020               	movlb	0	; select bank0
   469  0763  00B4               	movwf	main@vbatt
   470  0764  300E               	movlw	14
   471  0765  00B5               	movwf	main@vbatt+1
   472  0766                     l87:
   473                           
   474                           ;main.c: 110:   if (vbatt < 2800) vbatt = 2800;
   475  0766  0020               	movlb	0	; select bank0
   476  0767  0835               	movf	main@vbatt+1,w
   477  0768  3A80               	xorlw	128
   478  0769  00A8               	movwf	??_main
   479  076A  308A               	movlw	138
   480  076B  0228               	subwf	??_main,w
   481  076C  1D03               	skipz
   482  076D  2F70               	goto	u685
   483  076E  30F0               	movlw	240
   484  076F  0234               	subwf	main@vbatt,w
   485  0770                     u685:
   486  0770  1803               	skipnc
   487  0771  2F77               	goto	l88
   488  0772  30F0               	movlw	240
   489  0773  0020               	movlb	0	; select bank0
   490  0774  00B4               	movwf	main@vbatt
   491  0775  300A               	movlw	10
   492  0776  00B5               	movwf	main@vbatt+1
   493  0777                     l88:
   494                           
   495                           ;main.c: 111:   vbatt -= 2800;
   496  0777  3010               	movlw	16
   497  0778  0020               	movlb	0	; select bank0
   498  0779  07B4               	addwf	main@vbatt,f
   499  077A  30F5               	movlw	245
   500  077B  3DB5               	addwfc	main@vbatt+1,f
   501                           
   502                           ;main.c: 112:   OSCTUNE = -32 + (63 * vbatt + 400) / 800;
   503  077C  3020               	movlw	32
   504  077D  00F6               	movwf	___awdiv@divisor
   505  077E  3003               	movlw	3
   506  077F  00F7               	movwf	___awdiv@divisor+1
   507  0780  0835               	movf	main@vbatt+1,w
   508  0781  00F1               	movwf	___wmul@multiplier+1
   509  0782  0834               	movf	main@vbatt,w
   510  0783  00F0               	movwf	___wmul@multiplier
   511  0784  303F               	movlw	63
   512  0785  00F2               	movwf	___wmul@multiplicand
   513  0786  3000               	movlw	0
   514  0787  00F3               	movwf	___wmul@multiplicand+1
   515  0788  25A8               	fcall	___wmul
   516  0789  0870               	movf	?___wmul,w
   517  078A  3E90               	addlw	144
   518  078B  00F8               	movwf	___awdiv@dividend
   519  078C  3001               	movlw	1
   520  078D  3D71               	addwfc	?___wmul+1,w
   521  078E  00F9               	movwf	___awdiv@dividend+1
   522  078F  267E               	fcall	___awdiv
   523  0790  0876               	movf	?___awdiv,w
   524  0791  3EE0               	addlw	224
   525  0792  0021               	movlb	1	; select bank1
   526  0793  0098               	movwf	24	;volatile
   527                           
   528                           ;main.c: 114:   init();
   529  0794  2623               	fcall	_init
   530                           
   531                           ;main.c: 117:   uint32_t ratio = resistor_ratio();
   532  0795  25C3               	fcall	_resistor_ratio
   533  0796  0870               	movf	?_resistor_ratio,w
   534  0797  0020               	movlb	0	; select bank0
   535  0798  00B0               	movwf	main@ratio
   536  0799  0871               	movf	?_resistor_ratio+1,w
   537  079A  00B1               	movwf	main@ratio+1
   538  079B  01B2               	clrf	main@ratio+2
   539  079C  01B3               	clrf	main@ratio+3
   540                           
   541                           ;main.c: 120:   PWM1PR = 520 - ratio*479 / 65536;
   542  079D  0833               	movf	main@ratio+3,w
   543  079E  00F3               	movwf	___lmul@multiplier+3
   544  079F  0832               	movf	main@ratio+2,w
   545  07A0  00F2               	movwf	___lmul@multiplier+2
   546  07A1  0831               	movf	main@ratio+1,w
   547  07A2  00F1               	movwf	___lmul@multiplier+1
   548  07A3  0830               	movf	main@ratio,w
   549  07A4  00F0               	movwf	___lmul@multiplier
   550  07A5  3000               	movlw	0
   551  07A6  00F7               	movwf	___lmul@multiplicand+3
   552  07A7  3000               	movlw	0
   553  07A8  00F6               	movwf	___lmul@multiplicand+2
   554  07A9  3001               	movlw	1
   555  07AA  00F5               	movwf	___lmul@multiplicand+1
   556  07AB  30DF               	movlw	223
   557  07AC  00F4               	movwf	___lmul@multiplicand
   558  07AD  264F               	fcall	___lmul
   559  07AE  0870               	movf	?___lmul,w
   560  07AF  00A8               	movwf	??_main
   561  07B0  0871               	movf	?___lmul+1,w
   562  07B1  00A9               	movwf	??_main+1
   563  07B2  0872               	movf	?___lmul+2,w
   564  07B3  00AA               	movwf	??_main+2
   565  07B4  0873               	movf	?___lmul+3,w
   566  07B5  00AB               	movwf	??_main+3
   567  07B6  3010               	movlw	16
   568  07B7                     u695:
   569  07B7  36AB               	lsrf	??_main+3,f
   570  07B8  0CAA               	rrf	??_main+2,f
   571  07B9  0CA9               	rrf	??_main+1,f
   572  07BA  0CA8               	rrf	??_main,f
   573  07BB  0B89               	decfsz	9,f
   574  07BC  2FB7               	goto	u695
   575  07BD  3008               	movlw	8
   576  07BE  00AC               	movwf	??_main+4
   577  07BF  3002               	movlw	2
   578  07C0  00AD               	movwf	??_main+5
   579  07C1  0828               	movf	??_main,w
   580  07C2  022C               	subwf	??_main+4,w
   581  07C3  00AE               	movwf	??_main+6
   582  07C4  0829               	movf	??_main+1,w
   583  07C5  3B2D               	subwfb	??_main+5,w
   584  07C6  00AF               	movwf	??_main+7
   585  07C7  082E               	movf	??_main+6,w
   586  07C8  003B               	movlb	27	; select bank27
   587  07C9  0095               	movwf	21	;volatile
   588  07CA  0020               	movlb	0	; select bank0
   589  07CB  082F               	movf	??_main+7,w
   590  07CC  003B               	movlb	27	; select bank27
   591  07CD  0096               	movwf	22	;volatile
   592                           
   593                           ;main.c: 121:   PWMLD = 0b00000001;
   594  07CE  3001               	movlw	1
   595  07CF  008F               	movwf	15	;volatile
   596                           
   597                           ;main.c: 124:   reset_count = 65535 - (7610 - ratio * 7016 / 65536);
   598  07D0  0020               	movlb	0	; select bank0
   599  07D1  0833               	movf	main@ratio+3,w
   600  07D2  00F3               	movwf	___lmul@multiplier+3
   601  07D3  0832               	movf	main@ratio+2,w
   602  07D4  00F2               	movwf	___lmul@multiplier+2
   603  07D5  0831               	movf	main@ratio+1,w
   604  07D6  00F1               	movwf	___lmul@multiplier+1
   605  07D7  0830               	movf	main@ratio,w
   606  07D8  00F0               	movwf	___lmul@multiplier
   607  07D9  3000               	movlw	0
   608  07DA  00F7               	movwf	___lmul@multiplicand+3
   609  07DB  3000               	movlw	0
   610  07DC  00F6               	movwf	___lmul@multiplicand+2
   611  07DD  301B               	movlw	27
   612  07DE  00F5               	movwf	___lmul@multiplicand+1
   613  07DF  3068               	movlw	104
   614  07E0  00F4               	movwf	___lmul@multiplicand
   615  07E1  264F               	fcall	___lmul
   616  07E2  0870               	movf	?___lmul,w
   617  07E3  00A8               	movwf	??_main
   618  07E4  0871               	movf	?___lmul+1,w
   619  07E5  00A9               	movwf	??_main+1
   620  07E6  0872               	movf	?___lmul+2,w
   621  07E7  00AA               	movwf	??_main+2
   622  07E8  0873               	movf	?___lmul+3,w
   623  07E9  00AB               	movwf	??_main+3
   624  07EA  3010               	movlw	16
   625  07EB                     u705:
   626  07EB  36AB               	lsrf	??_main+3,f
   627  07EC  0CAA               	rrf	??_main+2,f
   628  07ED  0CA9               	rrf	??_main+1,f
   629  07EE  0CA8               	rrf	??_main,f
   630  07EF  0B89               	decfsz	9,f
   631  07F0  2FEB               	goto	u705
   632  07F1  0828               	movf	??_main,w
   633  07F2  3E45               	addlw	69
   634  07F3  00B6               	movwf	_reset_count
   635  07F4  30E2               	movlw	226
   636  07F5  3D29               	addwfc	??_main+1,w
   637  07F6  00B7               	movwf	_reset_count+1
   638                           
   639                           ;main.c: 126:   main_loop();
   640  07F7  3185  25DE  3187   	fcall	_main_loop
   641  07FA  2801               	ljmp	start
   642  07FB                     __end_of_main:
   643                           
   644                           	psect	text1
   645  05C3                     __ptext1:	
   646 ;; *************** function _resistor_ratio *****************
   647 ;; Defined at:
   648 ;;		line 60 in file "main.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  2    0[COMMON] unsigned short 
   655 ;; Registers used:
   656 ;;		wreg, status,2
   657 ;; Tracked objects:
   658 ;;		On entry : 1F/1
   659 ;;		On exit  : 1F/1
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   662 ;;      Params:         2       0       0       0
   663 ;;      Locals:         0       0       0       0
   664 ;;      Temps:          0       0       0       0
   665 ;;      Totals:         2       0       0       0
   666 ;;Total ram usage:        2 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; This function calls:
   669 ;;		Nothing
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _resistor_ratio
   677  05C3                     _resistor_ratio:
   678                           
   679                           ;main.c: 63:   TRISA4 = 1;
   680                           
   681                           ;incstack = 0
   682                           ; Regs used in _resistor_ratio: [wreg+status,2]
   683  05C3  160C               	bsf	12,4	;volatile
   684                           
   685                           ;main.c: 64:   ANSA4 = 1;
   686  05C4  0023               	movlb	3	; select bank3
   687  05C5  160C               	bsf	12,4	;volatile
   688                           
   689                           ;main.c: 66:   LATA2 = 1;
   690  05C6  0022               	movlb	2	; select bank2
   691  05C7  150C               	bsf	12,2	;volatile
   692                           
   693                           ;main.c: 68:   ADCON1 = 0b00000000;
   694  05C8  0021               	movlb	1	; select bank1
   695  05C9  019E               	clrf	30	;volatile
   696                           
   697                           ;main.c: 70:   ADCON0 = 0b00001101;
   698  05CA  300D               	movlw	13
   699  05CB  009D               	movwf	29	;volatile
   700                           
   701                           ;main.c: 71:   __nop();
   702  05CC  0000               	nop
   703                           
   704                           ;main.c: 72:   nDONE = 1;
   705  05CD  0021               	movlb	1	; select bank1
   706  05CE  149D               	bsf	29,1	;volatile
   707  05CF                     l68:	
   708                           ;main.c: 73:   while(nDONE){ }
   709                           
   710  05CF  189D               	btfsc	29,1	;volatile
   711  05D0  2DCF               	goto	l68
   712                           
   713                           ;main.c: 74:   ADCON0 = 0;
   714  05D1  019D               	clrf	29	;volatile
   715                           
   716                           ;main.c: 75:   LATA2 = 0;
   717  05D2  0022               	movlb	2	; select bank2
   718  05D3  110C               	bcf	12,2	;volatile
   719                           
   720                           ;main.c: 76:   TRISA4 = 0;
   721  05D4  0021               	movlb	1	; select bank1
   722  05D5  120C               	bcf	12,4	;volatile
   723                           
   724                           ;main.c: 77:   ANSA4 = 0;
   725  05D6  0023               	movlb	3	; select bank3
   726  05D7  120C               	bcf	12,4	;volatile
   727                           
   728                           ;main.c: 78:   return ADRES;
   729  05D8  0021               	movlb	1	; select bank1
   730  05D9  081C               	movf	28,w	;volatile
   731  05DA  00F1               	movwf	?_resistor_ratio+1
   732  05DB  081B               	movf	27,w	;volatile
   733  05DC  00F0               	movwf	?_resistor_ratio
   734  05DD  0008               	return
   735  05DE                     __end_of_resistor_ratio:
   736                           
   737                           	psect	text2
   738  0623                     __ptext2:	
   739 ;; *************** function _init *****************
   740 ;; Defined at:
   741 ;;		line 30 in file "main.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;		None
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		wreg, status,2
   750 ;; Tracked objects:
   751 ;;		On entry : 1F/1
   752 ;;		On exit  : 1F/1
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   755 ;;      Params:         0       0       0       0
   756 ;;      Locals:         0       0       0       0
   757 ;;      Temps:          0       0       0       0
   758 ;;      Totals:         0       0       0       0
   759 ;;Total ram usage:        0 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           
   769                           ;psect for function _init
   770  0623                     _init:
   771                           
   772                           ;main.c: 33:   ANSELA = 0b00000000;
   773                           
   774                           ;incstack = 0
   775                           ; Regs used in _init: [wreg+status,2]
   776  0623  0023               	movlb	3	; select bank3
   777  0624  018C               	clrf	12	;volatile
   778                           
   779                           ;main.c: 34:   LATA = 0b00000000;
   780  0625  0022               	movlb	2	; select bank2
   781  0626  018C               	clrf	12	;volatile
   782                           
   783                           ;main.c: 35:   TRISA = 0b00000000;
   784  0627  0021               	movlb	1	; select bank1
   785  0628  018C               	clrf	12	;volatile
   786                           
   787                           ;main.c: 36:   INLVLA = 0;
   788  0629  0027               	movlb	7	; select bank7
   789  062A  018C               	clrf	12	;volatile
   790                           
   791                           ;main.c: 37:   SLRCONA = 0b11011111;
   792  062B  30DF               	movlw	223
   793  062C  0026               	movlb	6	; select bank6
   794  062D  008C               	movwf	12	;volatile
   795                           
   796                           ;main.c: 38:   nWPUEN = 0;
   797  062E  0021               	movlb	1	; select bank1
   798  062F  1395               	bcf	21,7	;volatile
   799                           
   800                           ;main.c: 39:   WPUA = 0b00001000;
   801  0630  3008               	movlw	8
   802  0631  0024               	movlb	4	; select bank4
   803  0632  008C               	movwf	12	;volatile
   804                           
   805                           ;main.c: 42:   PWM1INTE = 0b00000001;
   806  0633  3001               	movlw	1
   807  0634  003B               	movlb	27	; select bank27
   808  0635  009C               	movwf	28	;volatile
   809                           
   810                           ;main.c: 43:   PWM1CLKCON = 0b00000010;
   811  0636  3002               	movlw	2
   812  0637  009E               	movwf	30	;volatile
   813                           
   814                           ;main.c: 44:   PWM1PH = 1;
   815  0638  3000               	movlw	0
   816  0639  0092               	movwf	18	;volatile
   817  063A  3001               	movlw	1
   818  063B  0091               	movwf	17	;volatile
   819                           
   820                           ;main.c: 45:   PWM1DC = 2;
   821  063C  3000               	movlw	0
   822  063D  0094               	movwf	20	;volatile
   823  063E  3002               	movlw	2
   824  063F  0093               	movwf	19	;volatile
   825                           
   826                           ;main.c: 46:   PWM1PR = 517;
   827  0640  3002               	movlw	2
   828  0641  0096               	movwf	22	;volatile
   829  0642  3005               	movlw	5
   830  0643  0095               	movwf	21	;volatile
   831                           
   832                           ;main.c: 48:   PWMLD = 0b00000001;
   833  0644  3001               	movlw	1
   834  0645  008F               	movwf	15	;volatile
   835                           
   836                           ;main.c: 49:   PWM1CON = 0b10000000;
   837  0646  3080               	movlw	128
   838  0647  009B               	movwf	27	;volatile
   839                           
   840                           ;main.c: 52:   PEIE = 1;
   841  0648  170B               	bsf	11,6	;volatile
   842                           
   843                           ;main.c: 53:   PWM1IE = 1;
   844  0649  0021               	movlb	1	; select bank1
   845  064A  1613               	bsf	19,4	;volatile
   846                           
   847                           ;main.c: 54:   GIE = 0;
   848  064B  138B               	bcf	11,7	;volatile
   849                           
   850                           ;main.c: 57:   WDTCON = 0b0001111;
   851  064C  300F               	movlw	15
   852  064D  0097               	movwf	23	;volatile
   853  064E  0008               	return
   854  064F                     __end_of_init:
   855                           
   856                           	psect	text3
   857  05FB                     __ptext3:	
   858 ;; *************** function _battery_voltage *****************
   859 ;; Defined at:
   860 ;;		line 82 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  2    6[BANK0 ] unsigned short 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, pclath, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : B1F/0
   871 ;;		On exit  : 1F/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   874 ;;      Params:         0       2       0       0
   875 ;;      Locals:         0       0       0       0
   876 ;;      Temps:          0       0       0       0
   877 ;;      Totals:         0       2       0       0
   878 ;;Total ram usage:        2 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    1
   881 ;; This function calls:
   882 ;;		___aldiv
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _battery_voltage
   890  05FB                     _battery_voltage:
   891                           
   892                           ;main.c: 84:   FVRCON = 0b10000001;
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
   896  05FB  3081               	movlw	129
   897  05FC  0022               	movlb	2	; select bank2
   898  05FD  0097               	movwf	23	;volatile
   899                           
   900                           ;main.c: 85:   ADCON0 = 0b01111101;
   901  05FE  307D               	movlw	125
   902  05FF  0021               	movlb	1	; select bank1
   903  0600  009D               	movwf	29	;volatile
   904                           
   905                           ;main.c: 86:   ADCON1 = 0b10000000;
   906  0601  3080               	movlw	128
   907  0602  009E               	movwf	30	;volatile
   908  0603                     l74:	
   909                           ;main.c: 87:   while(!FVRCONbits.FVRRDY){ }
   910                           
   911  0603  0022               	movlb	2	; select bank2
   912  0604  1F17               	btfss	23,6	;volatile
   913  0605  2E03               	goto	l74
   914                           
   915                           ;main.c: 88:   __nop();
   916  0606  0000               	nop
   917                           
   918                           ;main.c: 89:   ADCON0bits.GO_nDONE = 1;
   919  0607  0021               	movlb	1	; select bank1
   920  0608  149D               	bsf	29,1	;volatile
   921  0609                     l77:	
   922                           ;main.c: 90:   while(ADCON0bits.GO_nDONE){ }
   923                           
   924  0609  189D               	btfsc	29,1	;volatile
   925  060A  2E09               	goto	l77
   926                           
   927                           ;main.c: 91:   FVRCON = 0;
   928  060B  0022               	movlb	2	; select bank2
   929  060C  0197               	clrf	23	;volatile
   930                           
   931                           ;main.c: 92:   ADCON0bits.ADON = 0;
   932  060D  0021               	movlb	1	; select bank1
   933  060E  101D               	bcf	29,0	;volatile
   934                           
   935                           ;main.c: 97:   return 1047552L / ADRES;
   936  060F  081B               	movf	27,w	;volatile
   937  0610  00F0               	movwf	___aldiv@divisor
   938  0611  081C               	movf	28,w	;volatile
   939  0612  00F1               	movwf	___aldiv@divisor+1
   940  0613  01F2               	clrf	___aldiv@divisor+2
   941  0614  01F3               	clrf	___aldiv@divisor+3
   942  0615  3000               	movlw	0
   943  0616  00F7               	movwf	___aldiv@dividend+3
   944  0617  300F               	movlw	15
   945  0618  00F6               	movwf	___aldiv@dividend+2
   946  0619  30FC               	movlw	252
   947  061A  00F5               	movwf	___aldiv@dividend+1
   948  061B  3000               	movlw	0
   949  061C  00F4               	movwf	___aldiv@dividend
   950  061D  26CF               	fcall	___aldiv
   951  061E  0871               	movf	?___aldiv+1,w
   952  061F  00A7               	movwf	?_battery_voltage+1
   953  0620  0870               	movf	?___aldiv,w
   954  0621  00A6               	movwf	?_battery_voltage
   955  0622  0008               	return
   956  0623                     __end_of_battery_voltage:
   957                           
   958                           	psect	text4
   959  06CF                     __ptext4:	
   960 ;; *************** function ___aldiv *****************
   961 ;; Defined at:
   962 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/aldiv.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  divisor         4    0[COMMON] long 
   965 ;;  dividend        4    4[COMMON] long 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  quotient        4    2[BANK0 ] long 
   968 ;;  sign            1    1[BANK0 ] unsigned char 
   969 ;;  counter         1    0[BANK0 ] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  4    0[COMMON] long 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 1F/1
   976 ;;		On exit  : 1F/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   979 ;;      Params:         8       0       0       0
   980 ;;      Locals:         0       6       0       0
   981 ;;      Temps:          1       0       0       0
   982 ;;      Totals:         9       6       0       0
   983 ;;Total ram usage:       15 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_battery_voltage
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function ___aldiv
   994  06CF                     ___aldiv:
   995                           
   996                           ;incstack = 0
   997                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   998  06CF  0020               	movlb	0	; select bank0
   999  06D0  01A1               	clrf	___aldiv@sign
  1000  06D1  1FF3               	btfss	___aldiv@divisor+3,7
  1001  06D2  2EE0               	goto	l222
  1002  06D3  09F0               	comf	___aldiv@divisor,f
  1003  06D4  09F1               	comf	___aldiv@divisor+1,f
  1004  06D5  09F2               	comf	___aldiv@divisor+2,f
  1005  06D6  09F3               	comf	___aldiv@divisor+3,f
  1006  06D7  0AF0               	incf	___aldiv@divisor,f
  1007  06D8  1903               	skipnz
  1008  06D9  0AF1               	incf	___aldiv@divisor+1,f
  1009  06DA  1903               	skipnz
  1010  06DB  0AF2               	incf	___aldiv@divisor+2,f
  1011  06DC  1903               	skipnz
  1012  06DD  0AF3               	incf	___aldiv@divisor+3,f
  1013  06DE  01A1               	clrf	___aldiv@sign
  1014  06DF  0AA1               	incf	___aldiv@sign,f
  1015  06E0                     l222:
  1016  06E0  1FF7               	btfss	___aldiv@dividend+3,7
  1017  06E1  2EF1               	goto	l823
  1018  06E2  09F4               	comf	___aldiv@dividend,f
  1019  06E3  09F5               	comf	___aldiv@dividend+1,f
  1020  06E4  09F6               	comf	___aldiv@dividend+2,f
  1021  06E5  09F7               	comf	___aldiv@dividend+3,f
  1022  06E6  0AF4               	incf	___aldiv@dividend,f
  1023  06E7  1903               	skipnz
  1024  06E8  0AF5               	incf	___aldiv@dividend+1,f
  1025  06E9  1903               	skipnz
  1026  06EA  0AF6               	incf	___aldiv@dividend+2,f
  1027  06EB  1903               	skipnz
  1028  06EC  0AF7               	incf	___aldiv@dividend+3,f
  1029  06ED  3001               	movlw	1
  1030  06EE  00F8               	movwf	??___aldiv
  1031  06EF  0878               	movf	??___aldiv,w
  1032  06F0  06A1               	xorwf	___aldiv@sign,f
  1033  06F1                     l823:
  1034  06F1  3000               	movlw	0
  1035  06F2  00A5               	movwf	___aldiv@quotient+3
  1036  06F3  3000               	movlw	0
  1037  06F4  00A4               	movwf	___aldiv@quotient+2
  1038  06F5  3000               	movlw	0
  1039  06F6  00A3               	movwf	___aldiv@quotient+1
  1040  06F7  3000               	movlw	0
  1041  06F8  00A2               	movwf	___aldiv@quotient
  1042  06F9  0873               	movf	___aldiv@divisor+3,w
  1043  06FA  0472               	iorwf	___aldiv@divisor+2,w
  1044  06FB  0471               	iorwf	___aldiv@divisor+1,w
  1045  06FC  0470               	iorwf	___aldiv@divisor,w
  1046  06FD  1903               	skipnz
  1047  06FE  2F3A               	goto	l845
  1048  06FF  01A0               	clrf	___aldiv@counter
  1049  0700  0AA0               	incf	___aldiv@counter,f
  1050  0701                     l831:
  1051  0701  1BF3               	btfsc	___aldiv@divisor+3,7
  1052  0702  2F0F               	goto	l833
  1053  0703  3001               	movlw	1
  1054  0704                     u395:
  1055  0704  35F0               	lslf	___aldiv@divisor,f
  1056  0705  0DF1               	rlf	___aldiv@divisor+1,f
  1057  0706  0DF2               	rlf	___aldiv@divisor+2,f
  1058  0707  0DF3               	rlf	___aldiv@divisor+3,f
  1059  0708  0B89               	decfsz	9,f
  1060  0709  2F04               	goto	u395
  1061  070A  3001               	movlw	1
  1062  070B  00F8               	movwf	??___aldiv
  1063  070C  0878               	movf	??___aldiv,w
  1064  070D  07A0               	addwf	___aldiv@counter,f
  1065  070E  2F01               	goto	l831
  1066  070F                     l833:
  1067  070F  3001               	movlw	1
  1068  0710                     u415:
  1069  0710  35A2               	lslf	___aldiv@quotient,f
  1070  0711  0DA3               	rlf	___aldiv@quotient+1,f
  1071  0712  0DA4               	rlf	___aldiv@quotient+2,f
  1072  0713  0DA5               	rlf	___aldiv@quotient+3,f
  1073  0714  0B89               	decfsz	9,f
  1074  0715  2F10               	goto	u415
  1075  0716  0873               	movf	___aldiv@divisor+3,w
  1076  0717  0277               	subwf	___aldiv@dividend+3,w
  1077  0718  1D03               	skipz
  1078  0719  2F24               	goto	u425
  1079  071A  0872               	movf	___aldiv@divisor+2,w
  1080  071B  0276               	subwf	___aldiv@dividend+2,w
  1081  071C  1D03               	skipz
  1082  071D  2F24               	goto	u425
  1083  071E  0871               	movf	___aldiv@divisor+1,w
  1084  071F  0275               	subwf	___aldiv@dividend+1,w
  1085  0720  1D03               	skipz
  1086  0721  2F24               	goto	u425
  1087  0722  0870               	movf	___aldiv@divisor,w
  1088  0723  0274               	subwf	___aldiv@dividend,w
  1089  0724                     u425:
  1090  0724  1C03               	skipc
  1091  0725  2F2F               	goto	l841
  1092  0726  0870               	movf	___aldiv@divisor,w
  1093  0727  02F4               	subwf	___aldiv@dividend,f
  1094  0728  0871               	movf	___aldiv@divisor+1,w
  1095  0729  3BF5               	subwfb	___aldiv@dividend+1,f
  1096  072A  0872               	movf	___aldiv@divisor+2,w
  1097  072B  3BF6               	subwfb	___aldiv@dividend+2,f
  1098  072C  0873               	movf	___aldiv@divisor+3,w
  1099  072D  3BF7               	subwfb	___aldiv@dividend+3,f
  1100  072E  1422               	bsf	___aldiv@quotient,0
  1101  072F                     l841:
  1102  072F  3001               	movlw	1
  1103  0730                     u435:
  1104  0730  36F3               	lsrf	___aldiv@divisor+3,f
  1105  0731  0CF2               	rrf	___aldiv@divisor+2,f
  1106  0732  0CF1               	rrf	___aldiv@divisor+1,f
  1107  0733  0CF0               	rrf	___aldiv@divisor,f
  1108  0734  0B89               	decfsz	9,f
  1109  0735  2F30               	goto	u435
  1110  0736  3001               	movlw	1
  1111  0737  02A0               	subwf	___aldiv@counter,f
  1112  0738  1D03               	btfss	3,2
  1113  0739  2F0F               	goto	l833
  1114  073A                     l845:
  1115  073A  0821               	movf	___aldiv@sign,w
  1116  073B  1903               	btfsc	3,2
  1117  073C  2F48               	goto	l849
  1118  073D  09A2               	comf	___aldiv@quotient,f
  1119  073E  09A3               	comf	___aldiv@quotient+1,f
  1120  073F  09A4               	comf	___aldiv@quotient+2,f
  1121  0740  09A5               	comf	___aldiv@quotient+3,f
  1122  0741  0AA2               	incf	___aldiv@quotient,f
  1123  0742  1903               	skipnz
  1124  0743  0AA3               	incf	___aldiv@quotient+1,f
  1125  0744  1903               	skipnz
  1126  0745  0AA4               	incf	___aldiv@quotient+2,f
  1127  0746  1903               	skipnz
  1128  0747  0AA5               	incf	___aldiv@quotient+3,f
  1129  0748                     l849:
  1130  0748  0825               	movf	___aldiv@quotient+3,w
  1131  0749  00F3               	movwf	?___aldiv+3
  1132  074A  0824               	movf	___aldiv@quotient+2,w
  1133  074B  00F2               	movwf	?___aldiv+2
  1134  074C  0823               	movf	___aldiv@quotient+1,w
  1135  074D  00F1               	movwf	?___aldiv+1
  1136  074E  0822               	movf	___aldiv@quotient,w
  1137  074F  00F0               	movwf	?___aldiv
  1138  0750  0008               	return
  1139  0751                     __end_of___aldiv:
  1140                           
  1141                           	psect	text5
  1142  05A8                     __ptext5:	
  1143 ;; *************** function ___wmul *****************
  1144 ;; Defined at:
  1145 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/Umul16.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  multiplier      2    0[COMMON] unsigned int 
  1148 ;;  multiplicand    2    2[COMMON] unsigned int 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  product         2    4[COMMON] unsigned int 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  2    0[COMMON] unsigned int 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 1F/0
  1157 ;;		On exit  : 1F/0
  1158 ;;		Unchanged: 1F/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1160 ;;      Params:         4       0       0       0
  1161 ;;      Locals:         2       0       0       0
  1162 ;;      Temps:          0       0       0       0
  1163 ;;      Totals:         6       0       0       0
  1164 ;;Total ram usage:        6 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function ___wmul
  1175  05A8                     ___wmul:
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1179  05A8  01F4               	clrf	___wmul@product
  1180  05A9  01F5               	clrf	___wmul@product+1
  1181  05AA                     l917:
  1182  05AA  1C70               	btfss	___wmul@multiplier,0
  1183  05AB  2DB0               	goto	l157
  1184  05AC  0872               	movf	___wmul@multiplicand,w
  1185  05AD  07F4               	addwf	___wmul@product,f
  1186  05AE  0873               	movf	___wmul@multiplicand+1,w
  1187  05AF  3DF5               	addwfc	___wmul@product+1,f
  1188  05B0                     l157:
  1189  05B0  3001               	movlw	1
  1190  05B1                     u505:
  1191  05B1  35F2               	lslf	___wmul@multiplicand,f
  1192  05B2  0DF3               	rlf	___wmul@multiplicand+1,f
  1193  05B3  0B89               	decfsz	9,f
  1194  05B4  2DB1               	goto	u505
  1195  05B5  3001               	movlw	1
  1196  05B6                     u515:
  1197  05B6  36F1               	lsrf	___wmul@multiplier+1,f
  1198  05B7  0CF0               	rrf	___wmul@multiplier,f
  1199  05B8  0B89               	decfsz	9,f
  1200  05B9  2DB6               	goto	u515
  1201  05BA  0870               	movf	___wmul@multiplier,w
  1202  05BB  0471               	iorwf	___wmul@multiplier+1,w
  1203  05BC  1D03               	btfss	3,2
  1204  05BD  2DAA               	goto	l917
  1205  05BE  0875               	movf	___wmul@product+1,w
  1206  05BF  00F1               	movwf	?___wmul+1
  1207  05C0  0874               	movf	___wmul@product,w
  1208  05C1  00F0               	movwf	?___wmul
  1209  05C2  0008               	return
  1210  05C3                     __end_of___wmul:
  1211                           
  1212                           	psect	text6
  1213  064F                     __ptext6:	
  1214 ;; *************** function ___lmul *****************
  1215 ;; Defined at:
  1216 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/Umul32.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  multiplier      4    0[COMMON] unsigned long 
  1219 ;;  multiplicand    4    4[COMMON] unsigned long 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  product         4    8[COMMON] unsigned long 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  4    0[COMMON] unsigned long 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0
  1226 ;; Tracked objects:
  1227 ;;		On entry : 1F/0
  1228 ;;		On exit  : 1F/0
  1229 ;;		Unchanged: 1F/0
  1230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1231 ;;      Params:         8       0       0       0
  1232 ;;      Locals:         4       0       0       0
  1233 ;;      Temps:          0       0       0       0
  1234 ;;      Totals:        12       0       0       0
  1235 ;;Total ram usage:       12 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function ___lmul
  1246  064F                     ___lmul:
  1247                           
  1248                           ;incstack = 0
  1249                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1250  064F  3000               	movlw	0
  1251  0650  00FB               	movwf	___lmul@product+3
  1252  0651  3000               	movlw	0
  1253  0652  00FA               	movwf	___lmul@product+2
  1254  0653  3000               	movlw	0
  1255  0654  00F9               	movwf	___lmul@product+1
  1256  0655  3000               	movlw	0
  1257  0656  00F8               	movwf	___lmul@product
  1258  0657                     l931:
  1259  0657  1C70               	btfss	___lmul@multiplier,0
  1260  0658  2E61               	goto	l935
  1261  0659  0874               	movf	___lmul@multiplicand,w
  1262  065A  07F8               	addwf	___lmul@product,f
  1263  065B  0875               	movf	___lmul@multiplicand+1,w
  1264  065C  3DF9               	addwfc	___lmul@product+1,f
  1265  065D  0876               	movf	___lmul@multiplicand+2,w
  1266  065E  3DFA               	addwfc	___lmul@product+2,f
  1267  065F  0877               	movf	___lmul@multiplicand+3,w
  1268  0660  3DFB               	addwfc	___lmul@product+3,f
  1269  0661                     l935:
  1270  0661  3001               	movlw	1
  1271  0662                     u545:
  1272  0662  35F4               	lslf	___lmul@multiplicand,f
  1273  0663  0DF5               	rlf	___lmul@multiplicand+1,f
  1274  0664  0DF6               	rlf	___lmul@multiplicand+2,f
  1275  0665  0DF7               	rlf	___lmul@multiplicand+3,f
  1276  0666  0B89               	decfsz	9,f
  1277  0667  2E62               	goto	u545
  1278  0668  3001               	movlw	1
  1279  0669                     u555:
  1280  0669  36F3               	lsrf	___lmul@multiplier+3,f
  1281  066A  0CF2               	rrf	___lmul@multiplier+2,f
  1282  066B  0CF1               	rrf	___lmul@multiplier+1,f
  1283  066C  0CF0               	rrf	___lmul@multiplier,f
  1284  066D  0B89               	decfsz	9,f
  1285  066E  2E69               	goto	u555
  1286  066F  0873               	movf	___lmul@multiplier+3,w
  1287  0670  0472               	iorwf	___lmul@multiplier+2,w
  1288  0671  0471               	iorwf	___lmul@multiplier+1,w
  1289  0672  0470               	iorwf	___lmul@multiplier,w
  1290  0673  1D03               	skipz
  1291  0674  2E57               	goto	l931
  1292  0675  087B               	movf	___lmul@product+3,w
  1293  0676  00F3               	movwf	?___lmul+3
  1294  0677  087A               	movf	___lmul@product+2,w
  1295  0678  00F2               	movwf	?___lmul+2
  1296  0679  0879               	movf	___lmul@product+1,w
  1297  067A  00F1               	movwf	?___lmul+1
  1298  067B  0878               	movf	___lmul@product,w
  1299  067C  00F0               	movwf	?___lmul
  1300  067D  0008               	return
  1301  067E                     __end_of___lmul:
  1302                           
  1303                           	psect	text7
  1304  067E                     __ptext7:	
  1305 ;; *************** function ___awdiv *****************
  1306 ;; Defined at:
  1307 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/awdiv.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  divisor         2    6[COMMON] int 
  1310 ;;  dividend        2    8[COMMON] int 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  quotient        2    2[BANK0 ] int 
  1313 ;;  sign            1    1[BANK0 ] unsigned char 
  1314 ;;  counter         1    0[BANK0 ] unsigned char 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  2    6[COMMON] int 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0
  1319 ;; Tracked objects:
  1320 ;;		On entry : 1F/0
  1321 ;;		On exit  : 1F/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1324 ;;      Params:         4       0       0       0
  1325 ;;      Locals:         0       4       0       0
  1326 ;;      Temps:          1       0       0       0
  1327 ;;      Totals:         5       4       0       0
  1328 ;;Total ram usage:        9 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           
  1338                           ;psect for function ___awdiv
  1339  067E                     ___awdiv:
  1340                           
  1341                           ;incstack = 0
  1342                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1343  067E  01A1               	clrf	___awdiv@sign
  1344  067F  1FF7               	btfss	___awdiv@divisor+1,7
  1345  0680  2E88               	goto	l951
  1346  0681  09F6               	comf	___awdiv@divisor,f
  1347  0682  09F7               	comf	___awdiv@divisor+1,f
  1348  0683  0AF6               	incf	___awdiv@divisor,f
  1349  0684  1903               	skipnz
  1350  0685  0AF7               	incf	___awdiv@divisor+1,f
  1351  0686  01A1               	clrf	___awdiv@sign
  1352  0687  0AA1               	incf	___awdiv@sign,f
  1353  0688                     l951:
  1354  0688  1FF9               	btfss	___awdiv@dividend+1,7
  1355  0689  2E93               	goto	l957
  1356  068A  09F8               	comf	___awdiv@dividend,f
  1357  068B  09F9               	comf	___awdiv@dividend+1,f
  1358  068C  0AF8               	incf	___awdiv@dividend,f
  1359  068D  1903               	skipnz
  1360  068E  0AF9               	incf	___awdiv@dividend+1,f
  1361  068F  3001               	movlw	1
  1362  0690  00FA               	movwf	??___awdiv
  1363  0691  087A               	movf	??___awdiv,w
  1364  0692  06A1               	xorwf	___awdiv@sign,f
  1365  0693                     l957:
  1366  0693  01A2               	clrf	___awdiv@quotient
  1367  0694  01A3               	clrf	___awdiv@quotient+1
  1368  0695  0876               	movf	___awdiv@divisor,w
  1369  0696  0477               	iorwf	___awdiv@divisor+1,w
  1370  0697  1903               	btfsc	3,2
  1371  0698  2EC2               	goto	l979
  1372  0699  01A0               	clrf	___awdiv@counter
  1373  069A  0AA0               	incf	___awdiv@counter,f
  1374  069B                     l967:
  1375  069B  1BF7               	btfsc	___awdiv@divisor+1,7
  1376  069C  2EA7               	goto	l969
  1377  069D  3001               	movlw	1
  1378  069E                     u605:
  1379  069E  35F6               	lslf	___awdiv@divisor,f
  1380  069F  0DF7               	rlf	___awdiv@divisor+1,f
  1381  06A0  0B89               	decfsz	9,f
  1382  06A1  2E9E               	goto	u605
  1383  06A2  3001               	movlw	1
  1384  06A3  00FA               	movwf	??___awdiv
  1385  06A4  087A               	movf	??___awdiv,w
  1386  06A5  07A0               	addwf	___awdiv@counter,f
  1387  06A6  2E9B               	goto	l967
  1388  06A7                     l969:
  1389  06A7  3001               	movlw	1
  1390  06A8                     u625:
  1391  06A8  35A2               	lslf	___awdiv@quotient,f
  1392  06A9  0DA3               	rlf	___awdiv@quotient+1,f
  1393  06AA  0B89               	decfsz	9,f
  1394  06AB  2EA8               	goto	u625
  1395  06AC  0877               	movf	___awdiv@divisor+1,w
  1396  06AD  0279               	subwf	___awdiv@dividend+1,w
  1397  06AE  1D03               	skipz
  1398  06AF  2EB2               	goto	u635
  1399  06B0  0876               	movf	___awdiv@divisor,w
  1400  06B1  0278               	subwf	___awdiv@dividend,w
  1401  06B2                     u635:
  1402  06B2  1C03               	skipc
  1403  06B3  2EB9               	goto	l975
  1404  06B4  0876               	movf	___awdiv@divisor,w
  1405  06B5  02F8               	subwf	___awdiv@dividend,f
  1406  06B6  0877               	movf	___awdiv@divisor+1,w
  1407  06B7  3BF9               	subwfb	___awdiv@dividend+1,f
  1408  06B8  1422               	bsf	___awdiv@quotient,0
  1409  06B9                     l975:
  1410  06B9  3001               	movlw	1
  1411  06BA                     u645:
  1412  06BA  36F7               	lsrf	___awdiv@divisor+1,f
  1413  06BB  0CF6               	rrf	___awdiv@divisor,f
  1414  06BC  0B89               	decfsz	9,f
  1415  06BD  2EBA               	goto	u645
  1416  06BE  3001               	movlw	1
  1417  06BF  02A0               	subwf	___awdiv@counter,f
  1418  06C0  1D03               	btfss	3,2
  1419  06C1  2EA7               	goto	l969
  1420  06C2                     l979:
  1421  06C2  0821               	movf	___awdiv@sign,w
  1422  06C3  1903               	btfsc	3,2
  1423  06C4  2ECA               	goto	l983
  1424  06C5  09A2               	comf	___awdiv@quotient,f
  1425  06C6  09A3               	comf	___awdiv@quotient+1,f
  1426  06C7  0AA2               	incf	___awdiv@quotient,f
  1427  06C8  1903               	skipnz
  1428  06C9  0AA3               	incf	___awdiv@quotient+1,f
  1429  06CA                     l983:
  1430  06CA  0823               	movf	___awdiv@quotient+1,w
  1431  06CB  00F7               	movwf	?___awdiv+1
  1432  06CC  0822               	movf	___awdiv@quotient,w
  1433  06CD  00F6               	movwf	?___awdiv
  1434  06CE  0008               	return
  1435  06CF                     __end_of___awdiv:
  1436  007E                     btemp	set	126	;btemp
  1437  007E                     wtemp0	set	126
  1438                           
  1439                           	psect	config
  1440                           
  1441                           ;Config register CONFIG1 @ 0x8007
  1442                           ;	
  1443                           ;	FOSC = INTOSC, INTOSC oscillator; I/O function on CLKIN pin
  1444                           ;	Watchdog Timer Enable
  1445                           ;	WDTE = ON, WDT enabled
  1446                           ;	Power-up Timer Enable
  1447                           ;	PWRTE = ON, PWRT enabled
  1448                           ;	MCLR Pin Function Select
  1449                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  1450                           ;	Flash Program Memory Code Protection
  1451                           ;	CP = ON, Program memory code protection is enabled
  1452                           ;	Brown-out Reset Enable
  1453                           ;	BOREN = OFF, Brown-out Reset disabled
  1454                           ;	Clock Out Enable
  1455                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1456  8007                     	org	32775
  1457  8007  391C               	dw	14620
  1458                           
  1459                           ;Config register CONFIG2 @ 0x8008
  1460                           ;	Flash Memory Self-Write Protection
  1461                           ;	WRT = ALL, 000h to 7FFh write protected, no addresses may be modified by EECON control
  1462                           ;	PLL Enable
  1463                           ;	PLLEN = OFF, 4x PLL disabled
  1464                           ;	Stack Overflow/Underflow Reset Enable
  1465                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  1466                           ;	Brown-out Reset Voltage Selection
  1467                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  1468                           ;	Low Power Brown-out Reset enable bit
  1469                           ;	LPBOREN = OFF, LPBOR is disabled
  1470                           ;	Low-Voltage Programming Enable
  1471                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1472  8008                     	org	32776
  1473  8008  18FC               	dw	6396

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     22      24
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lmul
    _battery_voltage->___aldiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_battery_voltage
    _battery_voltage->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    1659
                                              8 BANK0     14    14      0
                            ___awdiv
                             ___lmul
                             ___wmul
                    _battery_voltage
                               _init
                          _main_loop
                     _resistor_ratio
 ---------------------------------------------------------------------------------
 (1) _resistor_ratio                                       2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _main_loop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _battery_voltage                                      2     0      2     452
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     396
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     452
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___lmul
   ___wmul
   _battery_voltage
     ___aldiv
   _init
   _main_loop
   _resistor_ratio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      24       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     16      18       6       30.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      24      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Jun 26 13:38:15 2020

                      l74 0603                        l68 05CF                        l77 0609  
                      l87 0766                        l88 0777              ___awdiv@sign 0021  
     ___wmul@multiplicand 0072                       l222 06E0                       l157 05B0  
                     l831 0701                       l823 06F1                       l841 072F  
                     l833 070F                       l931 0657                       l917 05AA  
                     l845 073A                       l951 0688                       l935 0661  
                     l849 0748                       l957 0693                       l983 06CA  
                     l975 06B9                       l967 069B                       l969 06A7  
                     l979 06C2                       _GIE 005F                       u415 0710  
                     u505 05B1                       u425 0724                       u515 05B6  
                     u435 0730                       u605 069E                       u625 06A8  
                     u545 0662                       u705 07EB                       u635 06B2  
                     u555 0669                       u395 0704                       u645 06BA  
                     u675 075F                       u685 0770                       u695 07B7  
                     wreg 0009                      _LATA 010C                      _PEIE 005E  
                    _WPUA 020C                      _main 0751                      _init 0623  
                    btemp 007E                      start 0001           __end_of___aldiv 0751  
                   ?_main 0070                     ?_init 0070           __end_of___awdiv 06CF  
                   _ADRES 009B                     _ANSA4 0C64           ___awdiv@divisor 0076  
                   _LATA2 0862           ___awdiv@counter 0020                     _PWMLD 0D8F  
                   _TRISA 008C       ___lmul@multiplicand 0074                     _nDONE 04E9  
                   status 0003                     wtemp0 007E           __initialization 07FB  
            __end_of_main 07FB              __end_of_init 064F                    ??_main 0028  
__size_of_battery_voltage 0028                    ??_init 0070                    _ADCON0 009D  
                  _ADCON1 009E          ___awdiv@dividend 0078                    _ANSELA 018C  
                  _INLVLA 038C                    _FVRCON 0117                    _PWM1DC 0D93  
                  _PWM1IE 049C                    _PWM1PH 0D91                    _PWM1PR 0D95  
                  _WDTCON 0097                    _TRISA4 0464                    _nWPUEN 04AF  
                  ___lmul 064F                 ??___aldiv 0078                    ___wmul 05A8  
               ??___awdiv 007A          ___awdiv@quotient 0022   __end_of__initialization 07FE  
          __pcstackCOMMON 0070         ??_battery_voltage 0079                __pbssBANK0 0036  
              __pmaintext 0751                   ?___lmul 0070                   ?___wmul 0070  
          ___lmul@product 0078                   _OSCTUNE 0098                   _PWM1CON 0D9B  
                 _SLRCONA 030C                   ___aldiv 06CF                   ___awdiv 067E  
         __size_of___lmul 002F   __size_of_resistor_ratio 001B           __size_of___wmul 001B  
                 __ptext1 05C3                   __ptext2 0623                   __ptext3 05FB  
                 __ptext4 06CF                   __ptext5 05A8                   __ptext6 064F  
                 __ptext7 067E          ___aldiv@dividend 0074      end_of_initialization 07FE  
        ___aldiv@quotient 0022            __end_of___lmul 067E            __end_of___wmul 05C3  
         _battery_voltage 05FB       start_initialization 07FB                  ??___lmul 0078  
          _resistor_ratio 05C3                  ??___wmul 0074                 ___latbits 0000  
           __pcstackBANK0 0020    __end_of_resistor_ratio 05DE   __end_of_battery_voltage 0623  
                ?___aldiv 0070                  ?___awdiv 0076                 _main_loop 05DE  
         ___aldiv@divisor 0070           ___aldiv@counter 0020            ___wmul@product 0074  
         ?_resistor_ratio 0070                  _PWM1INTE 0D9C                _ADCON0bits 009D  
       ___wmul@multiplier 0070                ?_main_loop 0070                 main@ratio 0030  
               main@vbatt 0034         ___lmul@multiplier 0070          ?_battery_voltage 0026  
        __size_of___aldiv 0082          __size_of___awdiv 0051             __size_of_main 00AA  
           __size_of_init 002C               ??_main_loop 0070                _FVRCONbits 0117  
             _reset_count 0036                _PWM1CLKCON 0D9E              ___aldiv@sign 0021  
        ??_resistor_ratio 0072  
