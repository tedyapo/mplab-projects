

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Jun  1 10:56:48 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    26                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    30                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    31                           	psect	text15,local,class=CODE,merge=1,delta=2,group=3
    32                           	psect	text16,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=3
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.20
    41                           ; Generated 09/04/2020 GMT
    42                           ; 
    43                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16LF1708 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  0111                     	;# 
   123  0112                     	;# 
   124  0113                     	;# 
   125  0114                     	;# 
   126  0115                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  0118                     	;# 
   130  0119                     	;# 
   131  011C                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  018E                     	;# 
   135  0191                     	;# 
   136  0191                     	;# 
   137  0192                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  019F                     	;# 
   167  019F                     	;# 
   168  020C                     	;# 
   169  020D                     	;# 
   170  020E                     	;# 
   171  0211                     	;# 
   172  0211                     	;# 
   173  0212                     	;# 
   174  0212                     	;# 
   175  0213                     	;# 
   176  0213                     	;# 
   177  0214                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0215                     	;# 
   183  0216                     	;# 
   184  0216                     	;# 
   185  0217                     	;# 
   186  0217                     	;# 
   187  028C                     	;# 
   188  028D                     	;# 
   189  028E                     	;# 
   190  0291                     	;# 
   191  0291                     	;# 
   192  0292                     	;# 
   193  0293                     	;# 
   194  0293                     	;# 
   195  0298                     	;# 
   196  0298                     	;# 
   197  0299                     	;# 
   198  029A                     	;# 
   199  029A                     	;# 
   200  029E                     	;# 
   201  030C                     	;# 
   202  030D                     	;# 
   203  030E                     	;# 
   204  038C                     	;# 
   205  038D                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0394                     	;# 
   211  0395                     	;# 
   212  0396                     	;# 
   213  0397                     	;# 
   214  0398                     	;# 
   215  0399                     	;# 
   216  0415                     	;# 
   217  0416                     	;# 
   218  0417                     	;# 
   219  041C                     	;# 
   220  041D                     	;# 
   221  041E                     	;# 
   222  0511                     	;# 
   223  0515                     	;# 
   224  0617                     	;# 
   225  0618                     	;# 
   226  0619                     	;# 
   227  0619                     	;# 
   228  061A                     	;# 
   229  061B                     	;# 
   230  061C                     	;# 
   231  061C                     	;# 
   232  0691                     	;# 
   233  0692                     	;# 
   234  0693                     	;# 
   235  0694                     	;# 
   236  0695                     	;# 
   237  0696                     	;# 
   238  0697                     	;# 
   239  0698                     	;# 
   240  0699                     	;# 
   241  069A                     	;# 
   242  069B                     	;# 
   243  069C                     	;# 
   244  069D                     	;# 
   245  069E                     	;# 
   246  069F                     	;# 
   247  0E0F                     	;# 
   248  0E10                     	;# 
   249  0E11                     	;# 
   250  0E12                     	;# 
   251  0E13                     	;# 
   252  0E14                     	;# 
   253  0E15                     	;# 
   254  0E17                     	;# 
   255  0E20                     	;# 
   256  0E21                     	;# 
   257  0E22                     	;# 
   258  0E24                     	;# 
   259  0E25                     	;# 
   260  0E28                     	;# 
   261  0E29                     	;# 
   262  0E2A                     	;# 
   263  0E2B                     	;# 
   264  0E90                     	;# 
   265  0E91                     	;# 
   266  0E92                     	;# 
   267  0E94                     	;# 
   268  0E95                     	;# 
   269  0E9C                     	;# 
   270  0E9D                     	;# 
   271  0E9E                     	;# 
   272  0E9F                     	;# 
   273  0EA0                     	;# 
   274  0EA1                     	;# 
   275  0EA2                     	;# 
   276  0EA3                     	;# 
   277  0EA4                     	;# 
   278  0EA5                     	;# 
   279  0EA6                     	;# 
   280  0EA7                     	;# 
   281  0F0F                     	;# 
   282  0F10                     	;# 
   283  0F11                     	;# 
   284  0F12                     	;# 
   285  0F13                     	;# 
   286  0F14                     	;# 
   287  0F15                     	;# 
   288  0F16                     	;# 
   289  0F17                     	;# 
   290  0F18                     	;# 
   291  0F19                     	;# 
   292  0F1A                     	;# 
   293  0F1B                     	;# 
   294  0F1C                     	;# 
   295  0F1D                     	;# 
   296  0F1E                     	;# 
   297  0F1F                     	;# 
   298  0F20                     	;# 
   299  0F21                     	;# 
   300  0F22                     	;# 
   301  0F23                     	;# 
   302  0F24                     	;# 
   303  0F25                     	;# 
   304  0F26                     	;# 
   305  0F27                     	;# 
   306  0F28                     	;# 
   307  0F29                     	;# 
   308  0F2A                     	;# 
   309  0F2B                     	;# 
   310  0F2C                     	;# 
   311  0F2D                     	;# 
   312  0FE4                     	;# 
   313  0FE5                     	;# 
   314  0FE6                     	;# 
   315  0FE7                     	;# 
   316  0FE8                     	;# 
   317  0FE9                     	;# 
   318  0FEA                     	;# 
   319  0FEB                     	;# 
   320  0FED                     	;# 
   321  0FEE                     	;# 
   322  0FEF                     	;# 
   323  0011                     _PIR1bits	set	17
   324  000B                     _INTCONbits	set	11
   325  0015                     _TMR0	set	21
   326  0095                     _OPTION_REGbits	set	149
   327  008E                     _TRISC	set	142
   328  008D                     _TRISB	set	141
   329  008C                     _TRISA	set	140
   330  0099                     _OSCCONbits	set	153
   331  019B                     _SPBRG	set	411
   332  019F                     _BAUDCONbits	set	415
   333  019D                     _RCSTAbits	set	413
   334  019E                     _TXSTAbits	set	414
   335  018E                     _ANSELC	set	398
   336  018D                     _ANSELB	set	397
   337  018C                     _ANSELA	set	396
   338  019A                     _TXREG	set	410
   339  020E                     _WPUC	set	526
   340  020D                     _WPUB	set	525
   341  020C                     _WPUA	set	524
   342  028E                     _ODCONC	set	654
   343  028D                     _ODCONB	set	653
   344  028C                     _ODCONA	set	652
   345  030E                     _SLRCONC	set	782
   346  030D                     _SLRCONB	set	781
   347  030C                     _SLRCONA	set	780
   348  038E                     _INLVLC	set	910
   349  038D                     _INLVLB	set	909
   350  038C                     _INLVLA	set	908
   351  0E10                     _INTPPS	set	3600
   352  0E9F                     _RB7PPS	set	3743
   353                           
   354                           	psect	stringtext1
   355  076D                     __pstringtext1:
   356  076D                     STR_1:
   357  076D  3430               	retlw	48	;'0'
   358  076E  3478               	retlw	120	;'x'
   359  076F  3425               	retlw	37	;'%'
   360  0770  3430               	retlw	48	;'0'
   361  0771  3438               	retlw	56	;'8'
   362  0772  346C               	retlw	108	;'l'
   363  0773  3478               	retlw	120	;'x'
   364  0774  340A               	retlw	10
   365  0775  3400               	retlw	0
   366                           
   367                           	psect	stringtext2
   368  0784                     __pstringtext2:
   369  0784                     STR_6:
   370  0784  346C               	retlw	108	;'l'
   371  0785  3458               	retlw	88	;'X'
   372  0786  3400               	retlw	0
   373                           
   374                           	psect	stringtext3
   375  0787                     __pstringtext3:
   376  0787                     STR_2:
   377  0787  346C               	retlw	108	;'l'
   378  0788  3478               	retlw	120	;'x'
   379  0789  3400               	retlw	0
   380                           
   381                           	psect	stringtext4
   382  0000                     __pstringtext4:
   383  0784                     
   384                           	psect	cinit
   385  007D                     start_initialization:	
   386                           ; #config settings
   387                           
   388  007D                     __initialization:
   389                           
   390                           ; Clear objects allocated to COMMON
   391  007D  01F9               	clrf	__pbssCOMMON& (0+127)
   392  007E  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   393                           
   394                           ; Clear objects allocated to BANK1
   395  007F  30A0               	movlw	low __pbssBANK1
   396  0080  0084               	movwf	4
   397  0081  3000               	movlw	high __pbssBANK1
   398  0082  0085               	movwf	5
   399  0083  302C               	movlw	44
   400  0084  3187  277E  3180   	fcall	clear_ram0
   401                           
   402                           ; Clear objects allocated to BANK2
   403  0087  3020               	movlw	low __pbssBANK2
   404  0088  0084               	movwf	4
   405  0089  3001               	movlw	high __pbssBANK2
   406  008A  0085               	movwf	5
   407  008B  3021               	movlw	33
   408  008C  3187  277E         	fcall	clear_ram0
   409  008E                     end_of_initialization:	
   410                           ;End of C runtime variable initialization code
   411                           
   412  008E                     __end_of__initialization:
   413  008E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   414  008F  0020               	movlb	0
   415  0090  3184  2CE3         	ljmp	_main	;jump to C main() function
   416                           
   417                           	psect	bssCOMMON
   418  0079                     __pbssCOMMON:
   419  0079                     _flags:
   420  0079                     	ds	2
   421                           
   422                           	psect	bssBANK1
   423  00A0                     __pbssBANK1:
   424  00A0                     _nout:
   425  00A0                     	ds	2
   426  00A2                     _width:
   427  00A2                     	ds	2
   428  00A4                     _prec:
   429  00A4                     	ds	2
   430  00A6                     _dbuf:
   431  00A6                     	ds	32
   432  00C6                     _ir_code:
   433  00C6                     	ds	6
   434                           
   435                           	psect	bssBANK2
   436  0120                     __pbssBANK2:
   437  0120                     _stats:
   438  0120                     	ds	33
   439                           
   440                           	psect	clrtext
   441  077E                     clear_ram0:	
   442                           ;	Called with FSR0 containing the base address, and
   443                           ;	WREG with the size to clear
   444                           
   445  077E  0064               	clrwdt	;clear the watchdog before getting into this loop
   446  077F                     clrloop0:
   447  077F  0180               	clrf	0	;clear RAM location pointed to by FSR
   448  0780  3101               	addfsr 0,1
   449  0781  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   450  0782  2F7F               	goto	clrloop0	;have we reached the end yet?
   451  0783  3400               	retlw	0	;all done for this memory range, return
   452                           
   453                           	psect	cstackBANK1
   454  00CC                     __pcstackBANK1:
   455  00CC                     vfpfcnvrt@done:
   456                           
   457                           ; 2 bytes @ 0x0
   458  00CC                     	ds	2
   459  00CE                     _vfpfcnvrt$776:
   460                           
   461                           ; 2 bytes @ 0x2
   462  00CE                     	ds	2
   463  00D0                     vfpfcnvrt@llu:
   464                           
   465                           ; 8 bytes @ 0x4
   466  00D0                     	ds	8
   467  00D8                     vfpfcnvrt@c:
   468                           
   469                           ; 1 bytes @ 0xC
   470  00D8                     	ds	1
   471  00D9                     vfpfcnvrt@fp:
   472                           
   473                           ; 1 bytes @ 0xD
   474  00D9                     	ds	1
   475  00DA                     ?_printf:
   476  00DA                     printf@fmt:	
   477                           ; 2 bytes @ 0xE
   478                           
   479                           
   480                           ; 2 bytes @ 0xE
   481  00DA                     	ds	6
   482  00E0                     ??_printf:
   483                           
   484                           ; 1 bytes @ 0x14
   485  00E0                     	ds	3
   486  00E3                     printf@ap:
   487                           
   488                           ; 1 bytes @ 0x17
   489  00E3                     	ds	1
   490                           
   491                           	psect	cstackCOMMON
   492  0070                     __pcstackCOMMON:
   493  0070                     ?_ISR:
   494  0070                     ??_ISR:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_putch:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_process_remote_command:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_main:	
   504                           ; 1 bytes @ 0x0
   505                           
   506                           
   507                           ; 1 bytes @ 0x0
   508  0070                     	ds	2
   509  0072                     ISR@time:
   510                           
   511                           ; 1 bytes @ 0x2
   512  0072                     	ds	1
   513  0073                     ??_putch:
   514  0073                     ??_process_remote_command:	
   515                           ; 1 bytes @ 0x3
   516                           
   517  0073                     ?_strlen:	
   518                           ; 1 bytes @ 0x3
   519                           
   520  0073                     ?_isupper:	
   521                           ; 2 bytes @ 0x3
   522                           
   523  0073                     ?_isalpha:	
   524                           ; 2 bytes @ 0x3
   525                           
   526  0073                     ?_isdigit:	
   527                           ; 2 bytes @ 0x3
   528                           
   529  0073                     ?_strncmp:	
   530                           ; 2 bytes @ 0x3
   531                           
   532  0073                     ?_isspace:	
   533                           ; 2 bytes @ 0x3
   534                           
   535  0073                     ?_islower:	
   536                           ; 2 bytes @ 0x3
   537                           
   538  0073                     ?___wmul:	
   539                           ; 2 bytes @ 0x3
   540                           
   541  0073                     putch@value:	
   542                           ; 2 bytes @ 0x3
   543                           
   544  0073                     ___wmul@multiplier:	
   545                           ; 1 bytes @ 0x3
   546                           
   547  0073                     isalpha@c:	
   548                           ; 2 bytes @ 0x3
   549                           
   550  0073                     isdigit@c:	
   551                           ; 2 bytes @ 0x3
   552                           
   553  0073                     isspace@c:	
   554                           ; 2 bytes @ 0x3
   555                           
   556  0073                     isupper@c:	
   557                           ; 2 bytes @ 0x3
   558                           
   559  0073                     strncmp@_l:	
   560                           ; 2 bytes @ 0x3
   561                           
   562  0073                     islower@c:	
   563                           ; 2 bytes @ 0x3
   564                           
   565                           
   566                           ; 2 bytes @ 0x3
   567  0073                     	ds	1
   568  0074                     ?_fputc:
   569  0074                     fputc@c:	
   570                           ; 2 bytes @ 0x4
   571                           
   572                           
   573                           ; 2 bytes @ 0x4
   574  0074                     	ds	1
   575  0075                     ??_strlen:
   576  0075                     ??_isupper:	
   577                           ; 1 bytes @ 0x5
   578                           
   579  0075                     ??_isdigit:	
   580                           ; 1 bytes @ 0x5
   581                           
   582  0075                     ??_isspace:	
   583                           ; 1 bytes @ 0x5
   584                           
   585  0075                     ??_islower:	
   586                           ; 1 bytes @ 0x5
   587                           
   588  0075                     process_remote_command@code:	
   589                           ; 1 bytes @ 0x5
   590                           
   591  0075                     ___wmul@multiplicand:	
   592                           ; 1 bytes @ 0x5
   593                           
   594  0075                     strncmp@_r:	
   595                           ; 2 bytes @ 0x5
   596                           
   597                           
   598                           ; 2 bytes @ 0x5
   599  0075                     	ds	1
   600  0076                     fputc@fp:
   601  0076                     strlen@a:	
   602                           ; 1 bytes @ 0x6
   603                           
   604                           
   605                           ; 1 bytes @ 0x6
   606  0076                     	ds	1
   607  0077                     ??___wmul:
   608  0077                     ?_fputs:	
   609                           ; 1 bytes @ 0x7
   610                           
   611  0077                     _isspace$830:	
   612                           ; 2 bytes @ 0x7
   613                           
   614  0077                     fputs@fp:	
   615                           ; 1 bytes @ 0x7
   616                           
   617  0077                     strlen@s:	
   618                           ; 1 bytes @ 0x7
   619                           
   620  0077                     ___wmul@product:	
   621                           ; 1 bytes @ 0x7
   622                           
   623  0077                     strncmp@n:	
   624                           ; 2 bytes @ 0x7
   625                           
   626                           
   627                           ; 2 bytes @ 0x7
   628  0077                     	ds	1
   629  0078                     ??_pad:
   630                           
   631                           ; 1 bytes @ 0x8
   632  0078                     	ds	1
   633  0079                     ??_main:
   634                           
   635                           	psect	cstackBANK0
   636  0020                     __pcstackBANK0:	
   637                           ; 1 bytes @ 0x9
   638                           
   639  0020                     ??_fputc:
   640  0020                     ??_isalpha:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0020                     ??_strncmp:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0020                     ?_toupper:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0020                     ?_atoi:	
   650                           ; 2 bytes @ 0x0
   651                           
   652  0020                     atoi@s:	
   653                           ; 2 bytes @ 0x0
   654                           
   655  0020                     toupper@c:	
   656                           ; 2 bytes @ 0x0
   657                           
   658                           
   659                           ; 2 bytes @ 0x0
   660  0020                     	ds	1
   661  0021                     strncmp@l:
   662                           
   663                           ; 2 bytes @ 0x1
   664  0021                     	ds	1
   665  0022                     ??_toupper:
   666  0022                     ??_atoi:	
   667                           ; 1 bytes @ 0x2
   668                           
   669                           
   670                           ; 1 bytes @ 0x2
   671  0022                     	ds	1
   672  0023                     strncmp@r:
   673                           
   674                           ; 2 bytes @ 0x3
   675  0023                     	ds	2
   676  0025                     ??_fputs:
   677                           
   678                           ; 1 bytes @ 0x5
   679  0025                     	ds	1
   680  0026                     atoi@neg:
   681  0026                     _toupper$885:	
   682                           ; 2 bytes @ 0x6
   683                           
   684                           
   685                           ; 2 bytes @ 0x6
   686  0026                     	ds	2
   687  0028                     fputs@c:
   688  0028                     _atoi$803:	
   689                           ; 1 bytes @ 0x8
   690                           
   691                           
   692                           ; 2 bytes @ 0x8
   693  0028                     	ds	1
   694  0029                     fputs@i:
   695                           
   696                           ; 2 bytes @ 0x9
   697  0029                     	ds	1
   698  002A                     _atoi$805:
   699                           
   700                           ; 2 bytes @ 0xA
   701  002A                     	ds	1
   702  002B                     fputs@s:
   703                           
   704                           ; 1 bytes @ 0xB
   705  002B                     	ds	1
   706  002C                     ?_pad:
   707  002C                     pad@buf:	
   708                           ; 2 bytes @ 0xC
   709                           
   710  002C                     _atoi$804:	
   711                           ; 1 bytes @ 0xC
   712                           
   713                           
   714                           ; 1 bytes @ 0xC
   715  002C                     	ds	1
   716  002D                     pad@p:
   717  002D                     atoi@n:	
   718                           ; 2 bytes @ 0xD
   719                           
   720                           
   721                           ; 2 bytes @ 0xD
   722  002D                     	ds	2
   723  002F                     pad@i:
   724                           
   725                           ; 2 bytes @ 0xF
   726  002F                     	ds	2
   727  0031                     pad@w:
   728                           
   729                           ; 2 bytes @ 0x11
   730  0031                     	ds	2
   731  0033                     pad@fp:
   732                           
   733                           ; 1 bytes @ 0x13
   734  0033                     	ds	1
   735  0034                     ?_xtoa:
   736  0034                     xtoa@d:	
   737                           ; 2 bytes @ 0x14
   738                           
   739                           
   740                           ; 8 bytes @ 0x14
   741  0034                     	ds	8
   742  003C                     xtoa@x:
   743                           
   744                           ; 1 bytes @ 0x1C
   745  003C                     	ds	1
   746  003D                     ??_xtoa:
   747                           
   748                           ; 1 bytes @ 0x1D
   749  003D                     	ds	8
   750  0045                     _xtoa$760:
   751                           
   752                           ; 2 bytes @ 0x25
   753  0045                     	ds	2
   754  0047                     _xtoa$761:
   755                           
   756                           ; 2 bytes @ 0x27
   757  0047                     	ds	2
   758  0049                     xtoa@p:
   759                           
   760                           ; 2 bytes @ 0x29
   761  0049                     	ds	2
   762  004B                     xtoa@fp:
   763                           
   764                           ; 1 bytes @ 0x2B
   765  004B                     	ds	1
   766  004C                     xtoa@w:
   767                           
   768                           ; 2 bytes @ 0x2C
   769  004C                     	ds	2
   770  004E                     xtoa@n:
   771                           
   772                           ; 8 bytes @ 0x2E
   773  004E                     	ds	8
   774  0056                     xtoa@i:
   775                           
   776                           ; 2 bytes @ 0x36
   777  0056                     	ds	2
   778  0058                     xtoa@c:
   779                           
   780                           ; 2 bytes @ 0x38
   781  0058                     	ds	2
   782  005A                     ?_vfpfcnvrt:
   783  005A                     vfpfcnvrt@fmt:	
   784                           ; 2 bytes @ 0x3A
   785                           
   786                           
   787                           ; 1 bytes @ 0x3A
   788  005A                     	ds	1
   789  005B                     vfpfcnvrt@ap:
   790                           
   791                           ; 1 bytes @ 0x3B
   792  005B                     	ds	1
   793  005C                     ??_vfpfcnvrt:
   794                           
   795                           ; 1 bytes @ 0x3C
   796  005C                     	ds	12
   797  0068                     ?_vfprintf:
   798  0068                     vfprintf@fmt:	
   799                           ; 2 bytes @ 0x48
   800                           
   801                           
   802                           ; 2 bytes @ 0x48
   803  0068                     	ds	2
   804  006A                     vfprintf@ap:
   805                           
   806                           ; 1 bytes @ 0x4A
   807  006A                     	ds	1
   808  006B                     ??_vfprintf:
   809                           
   810                           ; 1 bytes @ 0x4B
   811  006B                     	ds	2
   812  006D                     vfprintf@fp:
   813                           
   814                           ; 1 bytes @ 0x4D
   815  006D                     	ds	1
   816  006E                     vfprintf@cfmt:
   817                           
   818                           ; 2 bytes @ 0x4E
   819  006E                     	ds	2
   820                           
   821                           	psect	maintext
   822  04E3                     __pmaintext:	
   823 ;;
   824 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   825 ;;
   826 ;; *************** function _main *****************
   827 ;; Defined at:
   828 ;;		line 163 in file "main.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;		None
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : B1F/0
   839 ;;		On exit  : 1F/1
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   842 ;;      Params:         0       0       0       0       0       0       0       0
   843 ;;      Locals:         0       0       0       0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0
   845 ;;      Totals:         0       0       0       0       0       0       0       0
   846 ;;Total ram usage:        0 bytes
   847 ;; Hardware stack levels required when called:    9
   848 ;; This function calls:
   849 ;;		_printf
   850 ;;		_process_remote_command
   851 ;; This function is called by:
   852 ;;		Startup code after reset
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           
   857                           ;psect for function _main
   858  04E3                     _main:
   859                           
   860                           ;main.c: 164:   OSCCONbits.SCS = 0b10;
   861                           
   862                           ;incstack = 0
   863                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   864  04E3  0021               	movlb	1	; select bank1
   865  04E4  0819               	movf	25,w	;volatile
   866  04E5  39FC               	andlw	-4
   867  04E6  3802               	iorlw	2
   868  04E7  0099               	movwf	25	;volatile
   869                           
   870                           ;main.c: 165:   OSCCONbits.IRCF = 0b1101;
   871  04E8  0819               	movf	25,w	;volatile
   872  04E9  3987               	andlw	-121
   873  04EA  3868               	iorlw	104
   874  04EB  0099               	movwf	25	;volatile
   875                           
   876                           ;main.c: 168:   ANSELA = 0;
   877  04EC  0023               	movlb	3	; select bank3
   878  04ED  018C               	clrf	12	;volatile
   879                           
   880                           ;main.c: 169:   TRISA = 0b00000100;
   881  04EE  3004               	movlw	4
   882  04EF  0021               	movlb	1	; select bank1
   883  04F0  008C               	movwf	12	;volatile
   884                           
   885                           ;main.c: 170:   ODCONA = 0;
   886  04F1  0025               	movlb	5	; select bank5
   887  04F2  018C               	clrf	12	;volatile
   888                           
   889                           ;main.c: 171:   SLRCONA = 0xff;
   890  04F3  30FF               	movlw	255
   891  04F4  0026               	movlb	6	; select bank6
   892  04F5  008C               	movwf	12	;volatile
   893                           
   894                           ;main.c: 172:   INLVLA = 0xff;
   895  04F6  30FF               	movlw	255
   896  04F7  0027               	movlb	7	; select bank7
   897  04F8  008C               	movwf	12	;volatile
   898                           
   899                           ;main.c: 173:   WPUA = 0;
   900  04F9  0024               	movlb	4	; select bank4
   901  04FA  018C               	clrf	12	;volatile
   902                           
   903                           ;main.c: 176:   ANSELB = 0;
   904  04FB  0023               	movlb	3	; select bank3
   905  04FC  018D               	clrf	13	;volatile
   906                           
   907                           ;main.c: 177:   TRISB = 0;
   908  04FD  0021               	movlb	1	; select bank1
   909  04FE  018D               	clrf	13	;volatile
   910                           
   911                           ;main.c: 178:   ODCONB = 0;
   912  04FF  0025               	movlb	5	; select bank5
   913  0500  018D               	clrf	13	;volatile
   914                           
   915                           ;main.c: 179:   SLRCONB = 0xff;
   916  0501  30FF               	movlw	255
   917  0502  0026               	movlb	6	; select bank6
   918  0503  008D               	movwf	13	;volatile
   919                           
   920                           ;main.c: 180:   INLVLB = 0xff;
   921  0504  30FF               	movlw	255
   922  0505  0027               	movlb	7	; select bank7
   923  0506  008D               	movwf	13	;volatile
   924                           
   925                           ;main.c: 181:   WPUB = 0;
   926  0507  0024               	movlb	4	; select bank4
   927  0508  018D               	clrf	13	;volatile
   928                           
   929                           ;main.c: 184:   ANSELC = 0;
   930  0509  0023               	movlb	3	; select bank3
   931  050A  018E               	clrf	14	;volatile
   932                           
   933                           ;main.c: 185:   TRISC = 0;
   934  050B  0021               	movlb	1	; select bank1
   935  050C  018E               	clrf	14	;volatile
   936                           
   937                           ;main.c: 186:   ODCONC = 0;
   938  050D  0025               	movlb	5	; select bank5
   939  050E  018E               	clrf	14	;volatile
   940                           
   941                           ;main.c: 187:   SLRCONC = 0xff;
   942  050F  30FF               	movlw	255
   943  0510  0026               	movlb	6	; select bank6
   944  0511  008E               	movwf	14	;volatile
   945                           
   946                           ;main.c: 188:   INLVLC = 0xff;
   947  0512  30FF               	movlw	255
   948  0513  0027               	movlb	7	; select bank7
   949  0514  008E               	movwf	14	;volatile
   950                           
   951                           ;main.c: 189:   WPUC = 0;
   952  0515  0024               	movlb	4	; select bank4
   953  0516  018E               	clrf	14	;volatile
   954                           
   955                           ;main.c: 194:   INTPPS = 0b00010;
   956  0517  3002               	movlw	2
   957  0518  003C               	movlb	28	; select bank28
   958  0519  0090               	movwf	16	;volatile
   959                           
   960                           ;main.c: 195:   RB7PPS = 0b10100;
   961  051A  3014               	movlw	20
   962  051B  003D               	movlb	29	; select bank29
   963  051C  009F               	movwf	31	;volatile
   964                           
   965                           ;main.c: 198:   OPTION_REGbits.PSA = 0;
   966  051D  0021               	movlb	1	; select bank1
   967  051E  1195               	bcf	21,3	;volatile
   968                           
   969                           ;main.c: 199:   OPTION_REGbits.PS = 0b101;
   970  051F  0815               	movf	21,w	;volatile
   971  0520  39F8               	andlw	-8
   972  0521  3805               	iorlw	5
   973  0522  0095               	movwf	21	;volatile
   974                           
   975                           ;main.c: 200:   OPTION_REGbits.T0CS = 0;
   976  0523  1295               	bcf	21,5	;volatile
   977                           
   978                           ;main.c: 203:   INTCONbits.GIE = 1;
   979  0524  178B               	bsf	11,7	;volatile
   980                           
   981                           ;main.c: 204:   OPTION_REGbits.INTEDG = 0;
   982  0525  1315               	bcf	21,6	;volatile
   983                           
   984                           ;main.c: 205:   INTCONbits.INTE = 1;
   985  0526  160B               	bsf	11,4	;volatile
   986                           
   987                           ;main.c: 208:   TXSTAbits.TXEN = 1;
   988  0527  0023               	movlb	3	; select bank3
   989  0528  169E               	bsf	30,5	;volatile
   990                           
   991                           ;main.c: 209:   TXSTAbits.SYNC = 0;
   992  0529  121E               	bcf	30,4	;volatile
   993                           
   994                           ;main.c: 210:   RCSTAbits.SPEN = 1;
   995  052A  179D               	bsf	29,7	;volatile
   996                           
   997                           ;main.c: 213:   TXSTAbits.BRGH = 1;
   998  052B  151E               	bsf	30,2	;volatile
   999                           
  1000                           ;main.c: 214:   BAUDCONbits.BRG16 = 0;
  1001  052C  119F               	bcf	31,3	;volatile
  1002                           
  1003                           ;main.c: 215:   SPBRG = 25;
  1004  052D  3019               	movlw	25
  1005  052E  009B               	movwf	27	;volatile
  1006  052F                     l2464:
  1007                           
  1008                           ;main.c: 219:     if (STATE_DONE == ir_code.state){
  1009  052F  3002               	movlw	2
  1010  0530  0021               	movlb	1	; select bank1
  1011  0531  0647               	xorwf	(_ir_code^(0+128)+1),w
  1012  0532  1D03               	btfss	3,2
  1013  0533  2D2F               	goto	l2464
  1014                           
  1015                           ;main.c: 222:       printf("0x%08lx\n", (unsigned long)ir_code.code);
  1016  0534  306D               	movlw	low (STR_1| (0+32768))
  1017  0535  00DA               	movwf	printf@fmt^(0+128)
  1018  0536  3087               	movlw	high (STR_1| (0+32768))
  1019  0537  00DB               	movwf	(printf@fmt^(0+128)+1)
  1020  0538  3002               	movlw	2
  1021  0539  3EC6               	addlw	(low (_ir_code| 0))& (0+255)
  1022  053A  0086               	movwf	6
  1023  053B  0187               	clrf	7
  1024  053C  3F40               	moviw [0]fsr1
  1025  053D  00DC               	movwf	(?_printf^(0+128)+2)
  1026  053E  3F41               	moviw [1]fsr1
  1027  053F  00DD               	movwf	((?_printf+1)^(0+128)+2)
  1028  0540  3F42               	moviw [2]fsr1
  1029  0541  00DE               	movwf	((?_printf+2)^(0+128)+2)
  1030  0542  3F43               	moviw [3]fsr1
  1031  0543  00DF               	movwf	((?_printf+3)^(0+128)+2)
  1032  0544  3187  2758  3184   	fcall	_printf
  1033                           
  1034                           ;main.c: 229:       process_remote_command(&ir_code);
  1035  0547  30C6               	movlw	(low (_ir_code| 0))& (0+255)
  1036  0548  3187  2742  3184   	fcall	_process_remote_command
  1037                           
  1038                           ;main.c: 232:       ir_code.state = STATE_RESET;
  1039  054B  0021               	movlb	1	; select bank1
  1040  054C  01C7               	clrf	(_ir_code^(0+128)+1)
  1041  054D  2D2F               	goto	l2464
  1042  054E                     __end_of_main:
  1043                           
  1044                           	psect	text1
  1045  0742                     __ptext1:	
  1046 ;; *************** function _process_remote_command *****************
  1047 ;; Defined at:
  1048 ;;		line 152 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  code            1    wreg     PTR struct .
  1051 ;;		 -> ir_code(6), 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  code            1    5[COMMON] PTR struct .
  1054 ;;		 -> ir_code(6), 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1059 ;; Tracked objects:
  1060 ;;		On entry : 1F/0
  1061 ;;		On exit  : 1F/0
  1062 ;;		Unchanged: 1F/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1064 ;;      Params:         0       0       0       0       0       0       0       0
  1065 ;;      Locals:         1       0       0       0       0       0       0       0
  1066 ;;      Temps:          2       0       0       0       0       0       0       0
  1067 ;;      Totals:         3       0       0       0       0       0       0       0
  1068 ;;Total ram usage:        3 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _process_remote_command
  1080  0742                     _process_remote_command:
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0]
  1084                           ;process_remote_command@code stored from wreg
  1085  0742  00F5               	movwf	process_remote_command@code
  1086                           
  1087                           ;main.c: 153:   switch(code->command){
  1088  0743  0875               	movf	process_remote_command@code,w
  1089  0744  3E03               	addlw	3
  1090  0745  0086               	movwf	6
  1091  0746  0187               	clrf	7
  1092  0747  0801               	movf	1,w
  1093  0748  00F3               	movwf	??_process_remote_command
  1094  0749  01F4               	clrf	??_process_remote_command+1
  1095                           
  1096                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1097                           ; Switch size 1, requested type "simple"
  1098                           ; Number of cases is 1, Range of values is 0 to 0
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte            4     3 (average)
  1102                           ; direct_byte            8     6 (fixed)
  1103                           ; jumptable            260     6 (fixed)
  1104                           ;	Chosen strategy is simple_byte
  1105  074A  0874               	movf	??_process_remote_command+1,w
  1106  074B  3A00               	xorlw	0	; case 0
  1107  074C  1903               	skipnz
  1108  074D  2F4F               	goto	l2570
  1109  074E  2F57               	goto	l100
  1110  074F                     l2570:
  1111                           
  1112                           ; Switch size 1, requested type "simple"
  1113                           ; Number of cases is 2, Range of values is 7 to 111
  1114                           ; switch strategies available:
  1115                           ; Name         Instructions Cycles
  1116                           ; simple_byte            7     4 (average)
  1117                           ; direct_byte          219     9 (fixed)
  1118                           ; jumptable            263     9 (fixed)
  1119                           ;	Chosen strategy is simple_byte
  1120  074F  0873               	movf	??_process_remote_command,w
  1121  0750  3A07               	xorlw	7	; case 7
  1122  0751  1903               	skipnz
  1123  0752  2F57               	goto	l100
  1124  0753  3A68               	xorlw	104	; case 111
  1125  0754  1903               	skipnz
  1126  0755  2F57               	goto	l100
  1127  0756  2F57               	goto	l100
  1128  0757                     l100:
  1129  0757  0008               	return
  1130  0758                     __end_of_process_remote_command:
  1131                           
  1132                           	psect	text2
  1133  0758                     __ptext2:	
  1134 ;; *************** function _printf *****************
  1135 ;; Defined at:
  1136 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/printf.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  fmt             2   14[BANK1 ] PTR const unsigned char 
  1139 ;;		 -> STR_1(9), 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  ret             2    0        int 
  1142 ;;  ap              1   23[BANK1 ] PTR void [1]
  1143 ;;		 -> ?_printf(2), 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  2   14[BANK1 ] int 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 1F/1
  1150 ;;		On exit  : 1F/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1153 ;;      Params:         0       0       6       0       0       0       0       0
  1154 ;;      Locals:         0       0       3       0       0       0       0       0
  1155 ;;      Temps:          0       0       1       0       0       0       0       0
  1156 ;;      Totals:         0       0      10       0       0       0       0       0
  1157 ;;Total ram usage:       10 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    8
  1160 ;; This function calls:
  1161 ;;		_vfprintf
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           
  1168                           ;psect for function _printf
  1169  0758                     _printf:
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1173  0758  30DC               	movlw	(low ((?_printf| 0+2)))& (0+255)
  1174  0759  00E0               	movwf	??_printf^(0+128)
  1175  075A  0860               	movf	??_printf^(0+128),w
  1176  075B  00E3               	movwf	printf@ap^(0+128)
  1177  075C  085B               	movf	(printf@fmt+1)^(0+128),w
  1178  075D  0020               	movlb	0	; select bank0
  1179  075E  00E9               	movwf	vfprintf@fmt+1
  1180  075F  0021               	movlb	1	; select bank1
  1181  0760  085A               	movf	printf@fmt^(0+128),w
  1182  0761  0020               	movlb	0	; select bank0
  1183  0762  00E8               	movwf	vfprintf@fmt
  1184  0763  30E3               	movlw	(low (printf@ap| 0))& (0+255)
  1185  0764  0021               	movlb	1	; select bank1
  1186  0765  00E0               	movwf	??_printf^(0+128)
  1187  0766  0860               	movf	??_printf^(0+128),w
  1188  0767  0020               	movlb	0	; select bank0
  1189  0768  00EA               	movwf	vfprintf@ap
  1190  0769  3000               	movlw	0
  1191  076A  3186  261F         	fcall	_vfprintf
  1192  076C  0008               	return
  1193  076D                     __end_of_printf:
  1194                           
  1195                           	psect	text3
  1196  061F                     __ptext3:	
  1197 ;; *************** function _vfprintf *****************
  1198 ;; Defined at:
  1199 ;;		line 1368 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  fp              1    wreg     PTR struct _IO_FILE
  1202 ;;		 -> NULL(0), 
  1203 ;;  fmt             2   72[BANK0 ] PTR const unsigned char 
  1204 ;;		 -> STR_1(9), 
  1205 ;;  ap              1   74[BANK0 ] PTR PTR void 
  1206 ;;		 -> printf@ap(1), 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  fp              1   77[BANK0 ] PTR struct _IO_FILE
  1209 ;;		 -> NULL(0), 
  1210 ;;  cfmt            2   78[BANK0 ] PTR unsigned char 
  1211 ;;		 -> STR_1(9), 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  2   72[BANK0 ] int 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 1F/0
  1218 ;;		On exit  : 1F/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1221 ;;      Params:         0       3       0       0       0       0       0       0
  1222 ;;      Locals:         0       3       0       0       0       0       0       0
  1223 ;;      Temps:          0       2       0       0       0       0       0       0
  1224 ;;      Totals:         0       8       0       0       0       0       0       0
  1225 ;;Total ram usage:        8 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    7
  1228 ;; This function calls:
  1229 ;;		_vfpfcnvrt
  1230 ;; This function is called by:
  1231 ;;		_printf
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _vfprintf
  1237  061F                     _vfprintf:
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1241                           ;vfprintf@fp stored from wreg
  1242  061F  00ED               	movwf	vfprintf@fp
  1243                           
  1244                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
  1245  0620  0869               	movf	vfprintf@fmt+1,w
  1246  0621  00EF               	movwf	vfprintf@cfmt+1
  1247  0622  0868               	movf	vfprintf@fmt,w
  1248  0623  00EE               	movwf	vfprintf@cfmt
  1249                           
  1250                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1251  0624  0021               	movlb	1	; select bank1
  1252  0625  01A0               	clrf	_nout^(0+128)
  1253  0626  01A1               	clrf	(_nout+1)^(0+128)
  1254  0627                     l2386:	
  1255                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  1256                           
  1257                           
  1258                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  1259  0627  0020               	movlb	0	; select bank0
  1260  0628  086E               	movf	vfprintf@cfmt,w
  1261  0629  0084               	movwf	4
  1262  062A  086F               	movf	vfprintf@cfmt+1,w
  1263  062B  0085               	movwf	5
  1264  062C  0012               	moviw fsr0++
  1265  062D  1903               	btfsc	3,2
  1266  062E  2E43               	goto	l2388
  1267                           
  1268                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  1269  062F  306E               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1270  0630  00EB               	movwf	??_vfprintf
  1271  0631  086B               	movf	??_vfprintf,w
  1272  0632  00DA               	movwf	vfpfcnvrt@fmt
  1273  0633  086A               	movf	vfprintf@ap,w
  1274  0634  00EC               	movwf	??_vfprintf+1
  1275  0635  086C               	movf	??_vfprintf+1,w
  1276  0636  00DB               	movwf	vfpfcnvrt@ap
  1277  0637  086D               	movf	vfprintf@fp,w
  1278  0638  3180  2092  3186   	fcall	_vfpfcnvrt
  1279  063B  085A               	movf	?_vfpfcnvrt,w
  1280  063C  0021               	movlb	1	; select bank1
  1281  063D  07A0               	addwf	_nout^(0+128),f
  1282  063E  0020               	movlb	0	; select bank0
  1283  063F  085B               	movf	?_vfpfcnvrt+1,w
  1284  0640  0021               	movlb	1	; select bank1
  1285  0641  3DA1               	addwfc	(_nout+1)^(0+128),f
  1286  0642  2E27               	goto	l2386
  1287  0643                     l2388:
  1288                           
  1289                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1378:     return nout;
  1290  0643  0021               	movlb	1	; select bank1
  1291  0644  0821               	movf	(_nout+1)^(0+128),w
  1292  0645  0020               	movlb	0	; select bank0
  1293  0646  00E9               	movwf	?_vfprintf+1
  1294  0647  0021               	movlb	1	; select bank1
  1295  0648  0820               	movf	_nout^(0+128),w
  1296  0649  0020               	movlb	0	; select bank0
  1297  064A  00E8               	movwf	?_vfprintf
  1298  064B  0008               	return
  1299  064C                     __end_of_vfprintf:
  1300                           
  1301                           	psect	text4
  1302  0092                     __ptext4:	
  1303 ;; *************** function _vfpfcnvrt *****************
  1304 ;; Defined at:
  1305 ;;		line 670 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  fp              1    wreg     PTR struct _IO_FILE
  1308 ;;		 -> NULL(0), 
  1309 ;;  fmt             1   58[BANK0 ] PTR PTR unsigned char 
  1310 ;;		 -> vfprintf@cfmt(2), 
  1311 ;;  ap              1   59[BANK0 ] PTR PTR void 
  1312 ;;		 -> printf@ap(1), 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  fp              1   13[BANK1 ] PTR struct _IO_FILE
  1315 ;;		 -> NULL(0), 
  1316 ;;  llu             8    4[BANK1 ] unsigned long long 
  1317 ;;  ll              8    0        long long 
  1318 ;;  f               4    0        long long 
  1319 ;;  ct              3    0        unsigned char [3]
  1320 ;;  done            2    0[BANK1 ] int 
  1321 ;;  vp              2    0        PTR void 
  1322 ;;  i               2    0        int 
  1323 ;;  cp              2    0        PTR unsigned char 
  1324 ;;  c               1   12[BANK1 ] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  2   58[BANK0 ] int 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 1F/0
  1331 ;;		On exit  : 1F/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1334 ;;      Params:         0       2       0       0       0       0       0       0
  1335 ;;      Locals:         0       0      14       0       0       0       0       0
  1336 ;;      Temps:          0      12       0       0       0       0       0       0
  1337 ;;      Totals:         0      14      14       0       0       0       0       0
  1338 ;;Total ram usage:       28 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    6
  1341 ;; This function calls:
  1342 ;;		_atoi
  1343 ;;		_fputc
  1344 ;;		_isdigit
  1345 ;;		_strncmp
  1346 ;;		_xtoa
  1347 ;; This function is called by:
  1348 ;;		_vfprintf
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _vfpfcnvrt
  1354  0092                     _vfpfcnvrt:
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1358                           ;vfpfcnvrt@fp stored from wreg
  1359  0092  0021               	movlb	1	; select bank1
  1360  0093  00D9               	movwf	vfpfcnvrt@fp^(0+128)
  1361                           
  1362                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
  1363  0094  0020               	movlb	0	; select bank0
  1364  0095  085A               	movf	vfpfcnvrt@fmt,w
  1365  0096  0086               	movwf	6
  1366  0097  0187               	clrf	7
  1367  0098  3F40               	moviw [0]fsr1
  1368  0099  00DC               	movwf	??_vfpfcnvrt
  1369  009A  3F41               	moviw [1]fsr1
  1370  009B  00DD               	movwf	??_vfpfcnvrt+1
  1371  009C  085C               	movf	??_vfpfcnvrt,w
  1372  009D  0084               	movwf	4
  1373  009E  085D               	movf	??_vfpfcnvrt+1,w
  1374  009F  0085               	movwf	5
  1375  00A0  0012               	moviw fsr0++
  1376  00A1  3A25               	xorlw	37
  1377  00A2  1D03               	btfss	3,2
  1378  00A3  2AD1               	goto	l2366
  1379                           
  1380                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  1381  00A4  085A               	movf	vfpfcnvrt@fmt,w
  1382  00A5  0086               	movwf	6
  1383  00A6  0187               	clrf	7
  1384  00A7  3001               	movlw	1
  1385  00A8  0781               	addwf	1,f
  1386  00A9  3141               	addfsr 1,1
  1387  00AA  1803               	skipnc
  1388  00AB  0A81               	incf	1,f
  1389                           
  1390                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
  1391  00AC  0021               	movlb	1	; select bank1
  1392  00AD  01A2               	clrf	_width^(0+128)
  1393  00AE  01A3               	clrf	(_width+1)^(0+128)
  1394  00AF  01F9               	clrf	_flags
  1395  00B0  01FA               	clrf	_flags+1
  1396                           
  1397                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
  1398  00B1  30FF               	movlw	255
  1399  00B2  00A4               	movwf	_prec^(0+128)
  1400  00B3  30FF               	movlw	255
  1401  00B4  00A5               	movwf	(_prec^(0+128)+1)
  1402                           
  1403                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 688:         done = 0;
  1404  00B5  01CC               	clrf	vfpfcnvrt@done^(0+128)
  1405  00B6  01CD               	clrf	(vfpfcnvrt@done+1)^(0+128)
  1406                           
  1407                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
  1408  00B7  28CF               	goto	l2296
  1409  00B8                     l719:	
  1410                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 691:                 case '-'
      +                           :
  1411                           
  1412                           
  1413                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 692:                     flag
      +                          s |= (1 << 0);
  1414  00B8  1479               	bsf	_flags,0
  1415  00B9                     l2280:
  1416                           
  1417                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 693:                     ++*f
      +                          mt;
  1418  00B9  085A               	movf	vfpfcnvrt@fmt,w
  1419  00BA  0086               	movwf	6
  1420  00BB  0187               	clrf	7
  1421  00BC  3001               	movlw	1
  1422  00BD  0781               	addwf	1,f
  1423  00BE  3141               	addfsr 1,1
  1424  00BF  1803               	skipnc
  1425  00C0  0A81               	incf	1,f
  1426                           
  1427                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 694:                     brea
      +                          k;
  1428  00C1  28CF               	goto	l2296
  1429  00C2                     l721:	
  1430                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 695:                 case '0'
      +                           :
  1431                           
  1432                           
  1433                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 696:                     flag
      +                          s |= (1 << 1);
  1434  00C2  14F9               	bsf	_flags,1
  1435  00C3  28B9               	goto	l2280
  1436  00C4                     l722:	
  1437                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 699:                 case '+'
      +                           :
  1438                           
  1439                           
  1440                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 700:                     flag
      +                          s |= (1 << 2);
  1441  00C4  1579               	bsf	_flags,2
  1442  00C5  28B9               	goto	l2280
  1443  00C6                     l723:	
  1444                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 703:                 case ' '
      +                           :
  1445                           
  1446                           
  1447                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 704:                     flag
      +                          s |= (1 << 3);
  1448  00C6  15F9               	bsf	_flags,3
  1449  00C7  28B9               	goto	l2280
  1450  00C8                     l724:	
  1451                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 707:                 case '#'
      +                           :
  1452                           
  1453                           
  1454                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 708:                     flag
      +                          s |= (1 << 4);
  1455  00C8  1679               	bsf	_flags,4
  1456  00C9  28B9               	goto	l2280
  1457  00CA                     l2290:
  1458                           
  1459                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 712:                     done
      +                           = 1;
  1460  00CA  3001               	movlw	1
  1461  00CB  0021               	movlb	1	; select bank1
  1462  00CC  00CC               	movwf	vfpfcnvrt@done^(0+128)
  1463  00CD  3000               	movlw	0
  1464  00CE  00CD               	movwf	(vfpfcnvrt@done^(0+128)+1)
  1465  00CF                     l2296:	
  1466                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 713:                     brea
      +                          k;
  1467                           
  1468                           
  1469                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
  1470  00CF  0021               	movlb	1	; select bank1
  1471  00D0  084C               	movf	vfpfcnvrt@done^(0+128),w
  1472  00D1  044D               	iorwf	(vfpfcnvrt@done+1)^(0+128),w
  1473  00D2  1D03               	btfss	3,2
  1474  00D3  28FA               	goto	l726
  1475  00D4  0020               	movlb	0	; select bank0
  1476  00D5  085A               	movf	vfpfcnvrt@fmt,w
  1477  00D6  0086               	movwf	6
  1478  00D7  0187               	clrf	7
  1479  00D8  3F40               	moviw [0]fsr1
  1480  00D9  00DC               	movwf	??_vfpfcnvrt
  1481  00DA  3F41               	moviw [1]fsr1
  1482  00DB  00DD               	movwf	??_vfpfcnvrt+1
  1483  00DC  085C               	movf	??_vfpfcnvrt,w
  1484  00DD  0084               	movwf	4
  1485  00DE  085D               	movf	??_vfpfcnvrt+1,w
  1486  00DF  0085               	movwf	5
  1487  00E0  0800               	movf	0,w	;code access
  1488  00E1  00DE               	movwf	??_vfpfcnvrt+2
  1489  00E2  01DF               	clrf	??_vfpfcnvrt+3
  1490                           
  1491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1492                           ; Switch size 1, requested type "simple"
  1493                           ; Number of cases is 1, Range of values is 0 to 0
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte            4     3 (average)
  1497                           ; direct_byte            8     6 (fixed)
  1498                           ; jumptable            260     6 (fixed)
  1499                           ;	Chosen strategy is simple_byte
  1500  00E3  085F               	movf	??_vfpfcnvrt+3,w
  1501  00E4  3A00               	xorlw	0	; case 0
  1502  00E5  1903               	skipnz
  1503  00E6  28E8               	goto	l2572
  1504  00E7  28CA               	goto	l2290
  1505  00E8                     l2572:
  1506                           
  1507                           ; Switch size 1, requested type "simple"
  1508                           ; Number of cases is 5, Range of values is 32 to 48
  1509                           ; switch strategies available:
  1510                           ; Name         Instructions Cycles
  1511                           ; simple_byte           16     9 (average)
  1512                           ; direct_byte           43     9 (fixed)
  1513                           ; jumptable            263     9 (fixed)
  1514                           ;	Chosen strategy is simple_byte
  1515  00E8  085E               	movf	??_vfpfcnvrt+2,w
  1516  00E9  3A20               	xorlw	32	; case 32
  1517  00EA  1903               	skipnz
  1518  00EB  28C6               	goto	l723
  1519  00EC  3A03               	xorlw	3	; case 35
  1520  00ED  1903               	skipnz
  1521  00EE  28C8               	goto	l724
  1522  00EF  3A08               	xorlw	8	; case 43
  1523  00F0  1903               	skipnz
  1524  00F1  28C4               	goto	l722
  1525  00F2  3A06               	xorlw	6	; case 45
  1526  00F3  1903               	skipnz
  1527  00F4  28B8               	goto	l719
  1528  00F5  3A1D               	xorlw	29	; case 48
  1529  00F6  1903               	skipnz
  1530  00F7  28C2               	goto	l721
  1531  00F8  28CA               	goto	l2290
  1532  00F9  28CF               	goto	l2296
  1533  00FA                     l726:
  1534                           
  1535                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 716:         if (flags & (1 <
      +                          < 0)) {
  1536  00FA  1C79               	btfss	_flags,0
  1537  00FB  2900               	goto	l2300
  1538                           
  1539                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 717:             flags &= ~(1
      +                           << 1);
  1540  00FC  30FD               	movlw	253
  1541  00FD  05F9               	andwf	_flags,f
  1542  00FE  30FF               	movlw	255
  1543  00FF  05FA               	andwf	_flags+1,f
  1544  0100                     l2300:
  1545                           
  1546                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 723:         if ((*fmt)[0] ==
      +                           '*') {
  1547  0100  0020               	movlb	0	; select bank0
  1548  0101  085A               	movf	vfpfcnvrt@fmt,w
  1549  0102  0086               	movwf	6
  1550  0103  0187               	clrf	7
  1551  0104  3F40               	moviw [0]fsr1
  1552  0105  00DC               	movwf	??_vfpfcnvrt
  1553  0106  3F41               	moviw [1]fsr1
  1554  0107  00DD               	movwf	??_vfpfcnvrt+1
  1555  0108  085C               	movf	??_vfpfcnvrt,w
  1556  0109  0084               	movwf	4
  1557  010A  085D               	movf	??_vfpfcnvrt+1,w
  1558  010B  0085               	movwf	5
  1559  010C  0012               	moviw fsr0++
  1560  010D  3A2A               	xorlw	42
  1561  010E  1D03               	btfss	3,2
  1562  010F  292E               	goto	l2312
  1563                           
  1564                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 724:             ++*fmt;
  1565  0110  085A               	movf	vfpfcnvrt@fmt,w
  1566  0111  0086               	movwf	6
  1567  0112  0187               	clrf	7
  1568  0113  3001               	movlw	1
  1569  0114  0781               	addwf	1,f
  1570  0115  3141               	addfsr 1,1
  1571  0116  1803               	skipnc
  1572  0117  0A81               	incf	1,f
  1573                           
  1574                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 725:             width = (*(i
      +                          nt *)__va_arg(*(int **)ap, (int)0));
  1575  0118  085B               	movf	vfpfcnvrt@ap,w
  1576  0119  0086               	movwf	6
  1577  011A  0187               	clrf	7
  1578  011B  0801               	movf	1,w
  1579  011C  0084               	movwf	4
  1580  011D  0185               	clrf	5
  1581  011E  3002               	movlw	2
  1582  011F  0781               	addwf	1,f
  1583  0120  3F00               	moviw [0]fsr0
  1584  0121  0021               	movlb	1	; select bank1
  1585  0122  00A2               	movwf	_width^(0+128)
  1586  0123  3F01               	moviw [1]fsr0
  1587  0124  00A3               	movwf	(_width+1)^(0+128)
  1588                           
  1589                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 726:             if (width < 
      +                          0) {
  1590  0125  1FA3               	btfss	(_width+1)^(0+128),7
  1591  0126  2973               	goto	l2322
  1592                           
  1593                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 727:                 flags |=
      +                           (1 << 0);
  1594  0127  1479               	bsf	_flags,0
  1595                           
  1596                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 728:                 width = 
      +                          -width;
  1597  0128  09A2               	comf	_width^(0+128),f
  1598  0129  09A3               	comf	(_width+1)^(0+128),f
  1599  012A  0AA2               	incf	_width^(0+128),f
  1600  012B  1903               	skipnz
  1601  012C  0AA3               	incf	(_width+1)^(0+128),f
  1602  012D  2973               	goto	l2322
  1603  012E                     l2312:
  1604                           
  1605                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 731:             width = atoi
      +                          (*fmt);
  1606  012E  085A               	movf	vfpfcnvrt@fmt,w
  1607  012F  0086               	movwf	6
  1608  0130  0187               	clrf	7
  1609  0131  3F40               	moviw [0]fsr1
  1610  0132  00A0               	movwf	atoi@s
  1611  0133  3F41               	moviw [1]fsr1
  1612  0134  00A1               	movwf	atoi@s+1
  1613  0135  3184  2444  3180   	fcall	_atoi
  1614  0138  0821               	movf	?_atoi+1,w
  1615  0139  0021               	movlb	1	; select bank1
  1616  013A  00A3               	movwf	(_width+1)^(0+128)
  1617  013B  0020               	movlb	0	; select bank0
  1618  013C  0820               	movf	?_atoi,w
  1619  013D  0021               	movlb	1	; select bank1
  1620  013E  00A2               	movwf	_width^(0+128)
  1621                           
  1622                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 732:             while ((0 ? 
      +                          isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1623  013F  2949               	goto	l2316
  1624  0140                     l2314:
  1625                           
  1626                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 733:                 ++*fmt;
  1627  0140  0020               	movlb	0	; select bank0
  1628  0141  085A               	movf	vfpfcnvrt@fmt,w
  1629  0142  0086               	movwf	6
  1630  0143  0187               	clrf	7
  1631  0144  3001               	movlw	1
  1632  0145  0781               	addwf	1,f
  1633  0146  3141               	addfsr 1,1
  1634  0147  1803               	skipnc
  1635  0148  0A81               	incf	1,f
  1636  0149                     l2316:
  1637  0149  0020               	movlb	0	; select bank0
  1638  014A  085A               	movf	vfpfcnvrt@fmt,w
  1639  014B  0086               	movwf	6
  1640  014C  0187               	clrf	7
  1641  014D  3F40               	moviw [0]fsr1
  1642  014E  00DC               	movwf	??_vfpfcnvrt
  1643  014F  3F41               	moviw [1]fsr1
  1644  0150  00DD               	movwf	??_vfpfcnvrt+1
  1645  0151  085C               	movf	??_vfpfcnvrt,w
  1646  0152  0084               	movwf	4
  1647  0153  085D               	movf	??_vfpfcnvrt+1,w
  1648  0154  0085               	movwf	5
  1649  0155  0800               	movf	0,w	;code access
  1650  0156  3ED0               	addlw	208
  1651  0157  00DE               	movwf	??_vfpfcnvrt+2
  1652  0158  30FF               	movlw	255
  1653  0159  1803               	skipnc
  1654  015A  3000               	movlw	0
  1655  015B  00DF               	movwf	??_vfpfcnvrt+3
  1656  015C  3000               	movlw	0
  1657  015D  025F               	subwf	??_vfpfcnvrt+3,w
  1658  015E  300A               	movlw	10
  1659  015F  1903               	skipnz
  1660  0160  025E               	subwf	??_vfpfcnvrt+2,w
  1661  0161  1803               	btfsc	3,0
  1662  0162  2965               	goto	u2110
  1663  0163  3001               	movlw	1
  1664  0164  2966               	goto	u2120
  1665  0165                     u2110:
  1666  0165  3000               	movlw	0
  1667  0166                     u2120:
  1668  0166  00E0               	movwf	??_vfpfcnvrt+4
  1669  0167  01E1               	clrf	??_vfpfcnvrt+5
  1670  0168  0860               	movf	??_vfpfcnvrt+4,w
  1671  0169  0021               	movlb	1	; select bank1
  1672  016A  00CE               	movwf	_vfpfcnvrt$776^(0+128)
  1673  016B  0020               	movlb	0	; select bank0
  1674  016C  0861               	movf	??_vfpfcnvrt+5,w
  1675  016D  0021               	movlb	1	; select bank1
  1676  016E  00CF               	movwf	(_vfpfcnvrt$776+1)^(0+128)
  1677  016F  084E               	movf	_vfpfcnvrt$776^(0+128),w
  1678  0170  044F               	iorwf	(_vfpfcnvrt$776+1)^(0+128),w
  1679  0171  1D03               	btfss	3,2
  1680  0172  2940               	goto	l2314
  1681  0173                     l2322:
  1682                           
  1683                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1274:         if ((*fmt[0] ==
      +                           'x') || (*fmt[0] == 'X')) {
  1684  0173  0020               	movlb	0	; select bank0
  1685  0174  085A               	movf	vfpfcnvrt@fmt,w
  1686  0175  0086               	movwf	6
  1687  0176  0187               	clrf	7
  1688  0177  3F40               	moviw [0]fsr1
  1689  0178  00DC               	movwf	??_vfpfcnvrt
  1690  0179  3F41               	moviw [1]fsr1
  1691  017A  00DD               	movwf	??_vfpfcnvrt+1
  1692  017B  085C               	movf	??_vfpfcnvrt,w
  1693  017C  0084               	movwf	4
  1694  017D  085D               	movf	??_vfpfcnvrt+1,w
  1695  017E  0085               	movwf	5
  1696  017F  0012               	moviw fsr0++
  1697  0180  3A78               	xorlw	120
  1698  0181  1903               	btfsc	3,2
  1699  0182  2992               	goto	l2326
  1700  0183  085A               	movf	vfpfcnvrt@fmt,w
  1701  0184  0086               	movwf	6
  1702  0185  0187               	clrf	7
  1703  0186  3F40               	moviw [0]fsr1
  1704  0187  00DC               	movwf	??_vfpfcnvrt
  1705  0188  3F41               	moviw [1]fsr1
  1706  0189  00DD               	movwf	??_vfpfcnvrt+1
  1707  018A  085C               	movf	??_vfpfcnvrt,w
  1708  018B  0084               	movwf	4
  1709  018C  085D               	movf	??_vfpfcnvrt+1,w
  1710  018D  0085               	movwf	5
  1711  018E  0012               	moviw fsr0++
  1712  018F  3A58               	xorlw	88
  1713  0190  1D03               	btfss	3,2
  1714  0191  29EC               	goto	l2336
  1715  0192                     l2326:
  1716                           
  1717                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1276:             c = (*fmt)[
      +                          0];
  1718  0192  085A               	movf	vfpfcnvrt@fmt,w
  1719  0193  0086               	movwf	6
  1720  0194  0187               	clrf	7
  1721  0195  3F40               	moviw [0]fsr1
  1722  0196  00DC               	movwf	??_vfpfcnvrt
  1723  0197  3F41               	moviw [1]fsr1
  1724  0198  00DD               	movwf	??_vfpfcnvrt+1
  1725  0199  085C               	movf	??_vfpfcnvrt,w
  1726  019A  0084               	movwf	4
  1727  019B  085D               	movf	??_vfpfcnvrt+1,w
  1728  019C  0085               	movwf	5
  1729  019D  0800               	movf	0,w	;code access
  1730  019E  00DE               	movwf	??_vfpfcnvrt+2
  1731  019F  085E               	movf	??_vfpfcnvrt+2,w
  1732  01A0  0021               	movlb	1	; select bank1
  1733  01A1  00D8               	movwf	vfpfcnvrt@c^(0+128)
  1734                           
  1735                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1277:             ++*fmt;
  1736  01A2  0020               	movlb	0	; select bank0
  1737  01A3  085A               	movf	vfpfcnvrt@fmt,w
  1738  01A4  0086               	movwf	6
  1739  01A5  0187               	clrf	7
  1740  01A6  3001               	movlw	1
  1741  01A7  0781               	addwf	1,f
  1742  01A8  3141               	addfsr 1,1
  1743  01A9  1803               	skipnc
  1744  01AA  0A81               	incf	1,f
  1745                           
  1746                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1278:             llu = (unsi
      +                          gned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
  1747  01AB  085B               	movf	vfpfcnvrt@ap,w
  1748  01AC  0086               	movwf	6
  1749  01AD  0187               	clrf	7
  1750  01AE  0801               	movf	1,w
  1751  01AF  0084               	movwf	4
  1752  01B0  0185               	clrf	5
  1753  01B1  3002               	movlw	2
  1754  01B2  0781               	addwf	1,f
  1755  01B3  3F00               	moviw [0]fsr0
  1756  01B4  0021               	movlb	1	; select bank1
  1757  01B5  00D0               	movwf	vfpfcnvrt@llu^(0+128)
  1758  01B6  3F01               	moviw [1]fsr0
  1759  01B7  00D1               	movwf	(vfpfcnvrt@llu+1)^(0+128)
  1760  01B8  01D2               	clrf	(vfpfcnvrt@llu+2)^(0+128)
  1761  01B9  01D3               	clrf	(vfpfcnvrt@llu+3)^(0+128)
  1762  01BA  01D4               	clrf	(vfpfcnvrt@llu+4)^(0+128)
  1763  01BB  01D5               	clrf	(vfpfcnvrt@llu+5)^(0+128)
  1764  01BC  01D6               	clrf	(vfpfcnvrt@llu+6)^(0+128)
  1765  01BD  01D7               	clrf	(vfpfcnvrt@llu+7)^(0+128)
  1766                           
  1767                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1280:             return xtoa
      +                          (fp, llu, c);
  1768  01BE  0850               	movf	vfpfcnvrt@llu^(0+128),w
  1769  01BF  0020               	movlb	0	; select bank0
  1770  01C0  00B4               	movwf	xtoa@d
  1771  01C1  0021               	movlb	1	; select bank1
  1772  01C2  0851               	movf	(vfpfcnvrt@llu+1)^(0+128),w
  1773  01C3  0020               	movlb	0	; select bank0
  1774  01C4  00B5               	movwf	xtoa@d+1
  1775  01C5  0021               	movlb	1	; select bank1
  1776  01C6  0852               	movf	(vfpfcnvrt@llu+2)^(0+128),w
  1777  01C7  0020               	movlb	0	; select bank0
  1778  01C8  00B6               	movwf	xtoa@d+2
  1779  01C9  0021               	movlb	1	; select bank1
  1780  01CA  0853               	movf	(vfpfcnvrt@llu+3)^(0+128),w
  1781  01CB  0020               	movlb	0	; select bank0
  1782  01CC  00B7               	movwf	xtoa@d+3
  1783  01CD  0021               	movlb	1	; select bank1
  1784  01CE  0854               	movf	(vfpfcnvrt@llu+4)^(0+128),w
  1785  01CF  0020               	movlb	0	; select bank0
  1786  01D0  00B8               	movwf	xtoa@d+4
  1787  01D1  0021               	movlb	1	; select bank1
  1788  01D2  0855               	movf	(vfpfcnvrt@llu+5)^(0+128),w
  1789  01D3  0020               	movlb	0	; select bank0
  1790  01D4  00B9               	movwf	xtoa@d+5
  1791  01D5  0021               	movlb	1	; select bank1
  1792  01D6  0856               	movf	(vfpfcnvrt@llu+6)^(0+128),w
  1793  01D7  0020               	movlb	0	; select bank0
  1794  01D8  00BA               	movwf	xtoa@d+6
  1795  01D9  0021               	movlb	1	; select bank1
  1796  01DA  0857               	movf	(vfpfcnvrt@llu+7)^(0+128),w
  1797  01DB  0020               	movlb	0	; select bank0
  1798  01DC  00BB               	movwf	xtoa@d+7
  1799  01DD  0021               	movlb	1	; select bank1
  1800  01DE  0858               	movf	vfpfcnvrt@c^(0+128),w
  1801  01DF  0020               	movlb	0	; select bank0
  1802  01E0  00DC               	movwf	??_vfpfcnvrt
  1803  01E1  085C               	movf	??_vfpfcnvrt,w
  1804  01E2  00BC               	movwf	xtoa@x
  1805  01E3  0021               	movlb	1	; select bank1
  1806  01E4  0859               	movf	vfpfcnvrt@fp^(0+128),w
  1807  01E5  3182  22F6         	fcall	_xtoa
  1808  01E7  0835               	movf	?_xtoa+1,w
  1809  01E8  00DB               	movwf	?_vfpfcnvrt+1
  1810  01E9  0834               	movf	?_xtoa,w
  1811  01EA  00DA               	movwf	?_vfpfcnvrt
  1812  01EB  0008               	return
  1813  01EC                     l2336:
  1814                           
  1815                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1285:         if (!strncmp(*f
      +                          mt, "lx", ((sizeof("lx")/sizeof("lx"[0]))-1)) || !strncmp(*fmt, "lX", ((sizeof("lX")/siz
      +                          eof("lX"[0]))-1))) {
  1816  01EC  085A               	movf	vfpfcnvrt@fmt,w
  1817  01ED  0086               	movwf	6
  1818  01EE  0187               	clrf	7
  1819  01EF  3F40               	moviw [0]fsr1
  1820  01F0  00F3               	movwf	strncmp@_l
  1821  01F1  3F41               	moviw [1]fsr1
  1822  01F2  00F4               	movwf	strncmp@_l+1
  1823  01F3  3087               	movlw	low (STR_2| (0+32768))
  1824  01F4  00F5               	movwf	strncmp@_r
  1825  01F5  3087               	movlw	high (STR_2| (0+32768))
  1826  01F6  00F6               	movwf	strncmp@_r+1
  1827  01F7  3002               	movlw	2
  1828  01F8  00F7               	movwf	strncmp@n
  1829  01F9  3000               	movlw	0
  1830  01FA  00F8               	movwf	strncmp@n+1
  1831  01FB  3185  254E  3180   	fcall	_strncmp
  1832  01FE  0873               	movf	?_strncmp,w
  1833  01FF  0474               	iorwf	?_strncmp+1,w
  1834  0200  1903               	btfsc	3,2
  1835  0201  2A18               	goto	l2340
  1836  0202  085A               	movf	vfpfcnvrt@fmt,w
  1837  0203  0086               	movwf	6
  1838  0204  0187               	clrf	7
  1839  0205  3F40               	moviw [0]fsr1
  1840  0206  00F3               	movwf	strncmp@_l
  1841  0207  3F41               	moviw [1]fsr1
  1842  0208  00F4               	movwf	strncmp@_l+1
  1843  0209  3084               	movlw	low (STR_6| (0+32768))
  1844  020A  00F5               	movwf	strncmp@_r
  1845  020B  3087               	movlw	high (STR_6| (0+32768))
  1846  020C  00F6               	movwf	strncmp@_r+1
  1847  020D  3002               	movlw	2
  1848  020E  00F7               	movwf	strncmp@n
  1849  020F  3000               	movlw	0
  1850  0210  00F8               	movwf	strncmp@n+1
  1851  0211  3185  254E  3180   	fcall	_strncmp
  1852  0214  0873               	movf	?_strncmp,w
  1853  0215  0474               	iorwf	?_strncmp+1,w
  1854  0216  1D03               	btfss	3,2
  1855  0217  2A9D               	goto	l2350
  1856  0218                     l2340:
  1857                           
  1858                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1286: ;/opt/microchip/xc8/v2.
      +                          20/pic/sources/c99/common/doprnt.c: 1288:             c = (*fmt)[1];
  1859  0218  085A               	movf	vfpfcnvrt@fmt,w
  1860  0219  0086               	movwf	6
  1861  021A  0187               	clrf	7
  1862  021B  3F40               	moviw [0]fsr1
  1863  021C  00DC               	movwf	??_vfpfcnvrt
  1864  021D  3F41               	moviw [1]fsr1
  1865  021E  00DD               	movwf	??_vfpfcnvrt+1
  1866  021F  3001               	movlw	1
  1867  0220  075C               	addwf	??_vfpfcnvrt,w
  1868  0221  0084               	movwf	4
  1869  0222  085D               	movf	??_vfpfcnvrt+1,w
  1870  0223  1803               	skipnc
  1871  0224  0A5D               	incf	??_vfpfcnvrt+1,w
  1872  0225  0085               	movwf	5
  1873  0226  0800               	movf	0,w	;code access
  1874  0227  00DE               	movwf	??_vfpfcnvrt+2
  1875  0228  085E               	movf	??_vfpfcnvrt+2,w
  1876  0229  0021               	movlb	1	; select bank1
  1877  022A  00D8               	movwf	vfpfcnvrt@c^(0+128)
  1878                           
  1879                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1289:             *fmt += ((s
      +                          izeof("lx")/sizeof("lx"[0]))-1);
  1880  022B  0020               	movlb	0	; select bank0
  1881  022C  085A               	movf	vfpfcnvrt@fmt,w
  1882  022D  0086               	movwf	6
  1883  022E  0187               	clrf	7
  1884  022F  3002               	movlw	2
  1885  0230  0781               	addwf	1,f
  1886  0231  3141               	addfsr 1,1
  1887  0232  1803               	skipnc
  1888  0233  0A81               	incf	1,f
  1889                           
  1890                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1290:             llu = (unsi
      +                          gned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned long)0));
  1891  0234  085B               	movf	vfpfcnvrt@ap,w
  1892  0235  0086               	movwf	6
  1893  0236  0187               	clrf	7
  1894  0237  0801               	movf	1,w
  1895  0238  0084               	movwf	4
  1896  0239  0185               	clrf	5
  1897  023A  3004               	movlw	4
  1898  023B  0781               	addwf	1,f
  1899  023C  3F00               	moviw [0]fsr0
  1900  023D  00DC               	movwf	??_vfpfcnvrt
  1901  023E  3F01               	moviw [1]fsr0
  1902  023F  00DD               	movwf	??_vfpfcnvrt+1
  1903  0240  3F02               	moviw [2]fsr0
  1904  0241  00DE               	movwf	??_vfpfcnvrt+2
  1905  0242  3F03               	moviw [3]fsr0
  1906  0243  00DF               	movwf	??_vfpfcnvrt+3
  1907  0244  085C               	movf	??_vfpfcnvrt,w
  1908  0245  00E0               	movwf	??_vfpfcnvrt+4
  1909  0246  085D               	movf	??_vfpfcnvrt+1,w
  1910  0247  00E1               	movwf	??_vfpfcnvrt+5
  1911  0248  085E               	movf	??_vfpfcnvrt+2,w
  1912  0249  00E2               	movwf	??_vfpfcnvrt+6
  1913  024A  085F               	movf	??_vfpfcnvrt+3,w
  1914  024B  00E3               	movwf	??_vfpfcnvrt+7
  1915  024C  01E4               	clrf	??_vfpfcnvrt+8
  1916  024D  01E5               	clrf	??_vfpfcnvrt+9
  1917  024E  01E6               	clrf	??_vfpfcnvrt+10
  1918  024F  01E7               	clrf	??_vfpfcnvrt+11
  1919  0250  0867               	movf	??_vfpfcnvrt+11,w
  1920  0251  0021               	movlb	1	; select bank1
  1921  0252  00D7               	movwf	(vfpfcnvrt@llu+7)^(0+128)
  1922  0253  0020               	movlb	0	; select bank0
  1923  0254  0866               	movf	??_vfpfcnvrt+10,w
  1924  0255  0021               	movlb	1	; select bank1
  1925  0256  00D6               	movwf	(vfpfcnvrt@llu+6)^(0+128)
  1926  0257  0020               	movlb	0	; select bank0
  1927  0258  0865               	movf	??_vfpfcnvrt+9,w
  1928  0259  0021               	movlb	1	; select bank1
  1929  025A  00D5               	movwf	(vfpfcnvrt@llu+5)^(0+128)
  1930  025B  0020               	movlb	0	; select bank0
  1931  025C  0864               	movf	??_vfpfcnvrt+8,w
  1932  025D  0021               	movlb	1	; select bank1
  1933  025E  00D4               	movwf	(vfpfcnvrt@llu+4)^(0+128)
  1934  025F  0020               	movlb	0	; select bank0
  1935  0260  0863               	movf	??_vfpfcnvrt+7,w
  1936  0261  0021               	movlb	1	; select bank1
  1937  0262  00D3               	movwf	(vfpfcnvrt@llu+3)^(0+128)
  1938  0263  0020               	movlb	0	; select bank0
  1939  0264  0862               	movf	??_vfpfcnvrt+6,w
  1940  0265  0021               	movlb	1	; select bank1
  1941  0266  00D2               	movwf	(vfpfcnvrt@llu+2)^(0+128)
  1942  0267  0020               	movlb	0	; select bank0
  1943  0268  0861               	movf	??_vfpfcnvrt+5,w
  1944  0269  0021               	movlb	1	; select bank1
  1945  026A  00D1               	movwf	(vfpfcnvrt@llu+1)^(0+128)
  1946  026B  0020               	movlb	0	; select bank0
  1947  026C  0860               	movf	??_vfpfcnvrt+4,w
  1948  026D  0021               	movlb	1	; select bank1
  1949  026E  00D0               	movwf	vfpfcnvrt@llu^(0+128)
  1950                           
  1951                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1292:             return xtoa
      +                          (fp, llu, c);
  1952  026F  0850               	movf	vfpfcnvrt@llu^(0+128),w
  1953  0270  0020               	movlb	0	; select bank0
  1954  0271  00B4               	movwf	xtoa@d
  1955  0272  0021               	movlb	1	; select bank1
  1956  0273  0851               	movf	(vfpfcnvrt@llu+1)^(0+128),w
  1957  0274  0020               	movlb	0	; select bank0
  1958  0275  00B5               	movwf	xtoa@d+1
  1959  0276  0021               	movlb	1	; select bank1
  1960  0277  0852               	movf	(vfpfcnvrt@llu+2)^(0+128),w
  1961  0278  0020               	movlb	0	; select bank0
  1962  0279  00B6               	movwf	xtoa@d+2
  1963  027A  0021               	movlb	1	; select bank1
  1964  027B  0853               	movf	(vfpfcnvrt@llu+3)^(0+128),w
  1965  027C  0020               	movlb	0	; select bank0
  1966  027D  00B7               	movwf	xtoa@d+3
  1967  027E  0021               	movlb	1	; select bank1
  1968  027F  0854               	movf	(vfpfcnvrt@llu+4)^(0+128),w
  1969  0280  0020               	movlb	0	; select bank0
  1970  0281  00B8               	movwf	xtoa@d+4
  1971  0282  0021               	movlb	1	; select bank1
  1972  0283  0855               	movf	(vfpfcnvrt@llu+5)^(0+128),w
  1973  0284  0020               	movlb	0	; select bank0
  1974  0285  00B9               	movwf	xtoa@d+5
  1975  0286  0021               	movlb	1	; select bank1
  1976  0287  0856               	movf	(vfpfcnvrt@llu+6)^(0+128),w
  1977  0288  0020               	movlb	0	; select bank0
  1978  0289  00BA               	movwf	xtoa@d+6
  1979  028A  0021               	movlb	1	; select bank1
  1980  028B  0857               	movf	(vfpfcnvrt@llu+7)^(0+128),w
  1981  028C  0020               	movlb	0	; select bank0
  1982  028D  00BB               	movwf	xtoa@d+7
  1983  028E  0021               	movlb	1	; select bank1
  1984  028F  0858               	movf	vfpfcnvrt@c^(0+128),w
  1985  0290  0020               	movlb	0	; select bank0
  1986  0291  00DC               	movwf	??_vfpfcnvrt
  1987  0292  085C               	movf	??_vfpfcnvrt,w
  1988  0293  00BC               	movwf	xtoa@x
  1989  0294  0021               	movlb	1	; select bank1
  1990  0295  0859               	movf	vfpfcnvrt@fp^(0+128),w
  1991  0296  3182  22F6         	fcall	_xtoa
  1992  0298  0835               	movf	?_xtoa+1,w
  1993  0299  00DB               	movwf	?_vfpfcnvrt+1
  1994  029A  0834               	movf	?_xtoa,w
  1995  029B  00DA               	movwf	?_vfpfcnvrt
  1996  029C  0008               	return
  1997  029D                     l2350:
  1998                           
  1999                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
  2000  029D  085A               	movf	vfpfcnvrt@fmt,w
  2001  029E  0086               	movwf	6
  2002  029F  0187               	clrf	7
  2003  02A0  3F40               	moviw [0]fsr1
  2004  02A1  00DC               	movwf	??_vfpfcnvrt
  2005  02A2  3F41               	moviw [1]fsr1
  2006  02A3  00DD               	movwf	??_vfpfcnvrt+1
  2007  02A4  085C               	movf	??_vfpfcnvrt,w
  2008  02A5  0084               	movwf	4
  2009  02A6  085D               	movf	??_vfpfcnvrt+1,w
  2010  02A7  0085               	movwf	5
  2011  02A8  0012               	moviw fsr0++
  2012  02A9  3A25               	xorlw	37
  2013  02AA  1D03               	btfss	3,2
  2014  02AB  2AC6               	goto	l2360
  2015                           
  2016                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
  2017  02AC  085A               	movf	vfpfcnvrt@fmt,w
  2018  02AD  0086               	movwf	6
  2019  02AE  0187               	clrf	7
  2020  02AF  3001               	movlw	1
  2021  02B0  0781               	addwf	1,f
  2022  02B1  3141               	addfsr 1,1
  2023  02B2  1803               	skipnc
  2024  02B3  0A81               	incf	1,f
  2025                           
  2026                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
  2027  02B4  3025               	movlw	37
  2028  02B5  00F4               	movwf	fputc@c
  2029  02B6  3000               	movlw	0
  2030  02B7  00F5               	movwf	fputc@c+1
  2031  02B8  0021               	movlb	1	; select bank1
  2032  02B9  0859               	movf	vfpfcnvrt@fp^(0+128),w
  2033  02BA  0020               	movlb	0	; select bank0
  2034  02BB  00DC               	movwf	??_vfpfcnvrt
  2035  02BC  085C               	movf	??_vfpfcnvrt,w
  2036  02BD  00F6               	movwf	fputc@fp
  2037  02BE  3185  25EA         	fcall	_fputc
  2038  02C0                     l2356:
  2039                           
  2040                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1353:             return 1;
  2041  02C0  3001               	movlw	1
  2042  02C1  0020               	movlb	0	; select bank0
  2043  02C2  00DA               	movwf	?_vfpfcnvrt
  2044  02C3  3000               	movlw	0
  2045  02C4  00DB               	movwf	?_vfpfcnvrt+1
  2046  02C5  0008               	return
  2047  02C6                     l2360:
  2048                           
  2049                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
  2050  02C6  085A               	movf	vfpfcnvrt@fmt,w
  2051  02C7  0086               	movwf	6
  2052  02C8  0187               	clrf	7
  2053  02C9  3001               	movlw	1
  2054  02CA  0781               	addwf	1,f
  2055  02CB  3141               	addfsr 1,1
  2056  02CC  1803               	skipnc
  2057  02CD  0A81               	incf	1,f
  2058                           
  2059                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1358:         return 0;
  2060  02CE  01DA               	clrf	?_vfpfcnvrt
  2061  02CF  01DB               	clrf	?_vfpfcnvrt+1
  2062  02D0  0008               	return
  2063  02D1                     l2366:
  2064                           
  2065                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
  2066  02D1  085A               	movf	vfpfcnvrt@fmt,w
  2067  02D2  0086               	movwf	6
  2068  02D3  0187               	clrf	7
  2069  02D4  3F40               	moviw [0]fsr1
  2070  02D5  00DC               	movwf	??_vfpfcnvrt
  2071  02D6  3F41               	moviw [1]fsr1
  2072  02D7  00DD               	movwf	??_vfpfcnvrt+1
  2073  02D8  085C               	movf	??_vfpfcnvrt,w
  2074  02D9  0084               	movwf	4
  2075  02DA  085D               	movf	??_vfpfcnvrt+1,w
  2076  02DB  0085               	movwf	5
  2077  02DC  0800               	movf	0,w	;code access
  2078  02DD  00DE               	movwf	??_vfpfcnvrt+2
  2079  02DE  01DF               	clrf	??_vfpfcnvrt+3
  2080  02DF  085E               	movf	??_vfpfcnvrt+2,w
  2081  02E0  00F4               	movwf	fputc@c
  2082  02E1  085F               	movf	??_vfpfcnvrt+3,w
  2083  02E2  00F5               	movwf	fputc@c+1
  2084  02E3  0021               	movlb	1	; select bank1
  2085  02E4  0859               	movf	vfpfcnvrt@fp^(0+128),w
  2086  02E5  0020               	movlb	0	; select bank0
  2087  02E6  00E0               	movwf	??_vfpfcnvrt+4
  2088  02E7  0860               	movf	??_vfpfcnvrt+4,w
  2089  02E8  00F6               	movwf	fputc@fp
  2090  02E9  3185  25EA  3180   	fcall	_fputc
  2091                           
  2092                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2093  02EC  0020               	movlb	0	; select bank0
  2094  02ED  085A               	movf	vfpfcnvrt@fmt,w
  2095  02EE  0086               	movwf	6
  2096  02EF  0187               	clrf	7
  2097  02F0  3001               	movlw	1
  2098  02F1  0781               	addwf	1,f
  2099  02F2  3141               	addfsr 1,1
  2100  02F3  1803               	skipnc
  2101  02F4  0A81               	incf	1,f
  2102  02F5  2AC0               	goto	l2356
  2103  02F6                     __end_of_vfpfcnvrt:
  2104                           
  2105                           	psect	text5
  2106  02F6                     __ptext5:	
  2107 ;; *************** function _xtoa *****************
  2108 ;; Defined at:
  2109 ;;		line 623 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  fp              1    wreg     PTR struct _IO_FILE
  2112 ;;		 -> NULL(0), 
  2113 ;;  d               8   20[BANK0 ] unsigned long long 
  2114 ;;  x               1   28[BANK0 ] unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  fp              1   43[BANK0 ] PTR struct _IO_FILE
  2117 ;;		 -> NULL(0), 
  2118 ;;  n               8   46[BANK0 ] unsigned long long 
  2119 ;;  c               2   56[BANK0 ] int 
  2120 ;;  i               2   54[BANK0 ] int 
  2121 ;;  w               2   44[BANK0 ] int 
  2122 ;;  p               2   41[BANK0 ] int 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  2   20[BANK0 ] int 
  2125 ;; Registers used:
  2126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 1F/1
  2129 ;;		On exit  : 1F/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2132 ;;      Params:         0       9       0       0       0       0       0       0
  2133 ;;      Locals:         0      21       0       0       0       0       0       0
  2134 ;;      Temps:          0       8       0       0       0       0       0       0
  2135 ;;      Totals:         0      38       0       0       0       0       0       0
  2136 ;;Total ram usage:       38 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    5
  2139 ;; This function calls:
  2140 ;;		_isalpha
  2141 ;;		_isupper
  2142 ;;		_pad
  2143 ;;		_toupper
  2144 ;; This function is called by:
  2145 ;;		_vfpfcnvrt
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           
  2150                           ;psect for function _xtoa
  2151  02F6                     _xtoa:
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _xtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2155                           ;xtoa@fp stored from wreg
  2156  02F6  0020               	movlb	0	; select bank0
  2157  02F7  00CB               	movwf	xtoa@fp
  2158                           
  2159                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 623: static int xtoa(FILE *fp
      +                          , unsigned long long d, char x);/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c
      +                          : 624: {;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 625:     int c, i, p,
      +                           w;;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 626:     unsigned long lon
      +                          g n;;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 629:     if (!(prec < 0))
      +                           {
  2160  02F8  0021               	movlb	1	; select bank1
  2161  02F9  1BA5               	btfsc	(_prec+1)^(0+128),7
  2162  02FA  2AFF               	goto	l685
  2163                           
  2164                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 630:         flags &= ~(1 << 
      +                          1);
  2165  02FB  30FD               	movlw	253
  2166  02FC  05F9               	andwf	_flags,f
  2167  02FD  30FF               	movlw	255
  2168  02FE  05FA               	andwf	_flags+1,f
  2169  02FF                     l685:	
  2170                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 631:     }
  2171                           
  2172                           
  2173                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 632:     p = (0 < prec) ? pre
      +                          c : 1;
  2174  02FF  0825               	movf	(_prec+1)^(0+128),w
  2175  0300  3A80               	xorlw	128
  2176  0301  0020               	movlb	0	; select bank0
  2177  0302  00BD               	movwf	??_xtoa
  2178  0303  3080               	movlw	128
  2179  0304  023D               	subwf	??_xtoa,w
  2180  0305  1D03               	skipz
  2181  0306  2B0A               	goto	u1785
  2182  0307  3001               	movlw	1
  2183  0308  0021               	movlb	1	; select bank1
  2184  0309  0224               	subwf	_prec^(0+128),w
  2185  030A                     u1785:
  2186  030A  1803               	skipnc
  2187  030B  2B12               	goto	l2146
  2188  030C  3001               	movlw	1
  2189  030D  0020               	movlb	0	; select bank0
  2190  030E  00C9               	movwf	xtoa@p
  2191  030F  3000               	movlw	0
  2192  0310  00CA               	movwf	xtoa@p+1
  2193  0311  2B1A               	goto	l689
  2194  0312                     l2146:
  2195  0312  0021               	movlb	1	; select bank1
  2196  0313  0825               	movf	(_prec+1)^(0+128),w
  2197  0314  0020               	movlb	0	; select bank0
  2198  0315  00CA               	movwf	xtoa@p+1
  2199  0316  0021               	movlb	1	; select bank1
  2200  0317  0824               	movf	_prec^(0+128),w
  2201  0318  0020               	movlb	0	; select bank0
  2202  0319  00C9               	movwf	xtoa@p
  2203  031A                     l689:
  2204                           
  2205                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 633:     w = width;
  2206  031A  0021               	movlb	1	; select bank1
  2207  031B  0823               	movf	(_width+1)^(0+128),w
  2208  031C  0020               	movlb	0	; select bank0
  2209  031D  00CD               	movwf	xtoa@w+1
  2210  031E  0021               	movlb	1	; select bank1
  2211  031F  0822               	movf	_width^(0+128),w
  2212  0320  0020               	movlb	0	; select bank0
  2213  0321  00CC               	movwf	xtoa@w
  2214                           
  2215                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 634:     if (flags & (1 << 4)
      +                          ) {
  2216  0322  1E79               	btfss	_flags,4
  2217  0323  2B28               	goto	l2152
  2218                           
  2219                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 635:         w -= 2;
  2220  0324  30FE               	movlw	254
  2221  0325  07CC               	addwf	xtoa@w,f
  2222  0326  30FF               	movlw	255
  2223  0327  3DCD               	addwfc	xtoa@w+1,f
  2224  0328                     l2152:
  2225                           
  2226                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 639:     n = d;
  2227  0328  0834               	movf	xtoa@d,w
  2228  0329  00CE               	movwf	xtoa@n
  2229  032A  0835               	movf	xtoa@d+1,w
  2230  032B  00CF               	movwf	xtoa@n+1
  2231  032C  0836               	movf	xtoa@d+2,w
  2232  032D  00D0               	movwf	xtoa@n+2
  2233  032E  0837               	movf	xtoa@d+3,w
  2234  032F  00D1               	movwf	xtoa@n+3
  2235  0330  0838               	movf	xtoa@d+4,w
  2236  0331  00D2               	movwf	xtoa@n+4
  2237  0332  0839               	movf	xtoa@d+5,w
  2238  0333  00D3               	movwf	xtoa@n+5
  2239  0334  083A               	movf	xtoa@d+6,w
  2240  0335  00D4               	movwf	xtoa@n+6
  2241  0336  083B               	movf	xtoa@d+7,w
  2242  0337  00D5               	movwf	xtoa@n+7
  2243                           
  2244                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 640:     i = sizeof(dbuf) - 1
      +                          ;
  2245  0338  301F               	movlw	31
  2246  0339  00D6               	movwf	xtoa@i
  2247  033A  3000               	movlw	0
  2248  033B  00D7               	movwf	xtoa@i+1
  2249                           
  2250                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 641:     dbuf[i] = '\0';
  2251  033C  0021               	movlb	1	; select bank1
  2252  033D  01C5               	clrf	(_dbuf^(0+128)+31)
  2253                           
  2254                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2255  033E  2BE7               	goto	l2184
  2256  033F                     l2156:
  2257                           
  2258                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 643:         --i;
  2259  033F  30FF               	movlw	255
  2260  0340  0020               	movlb	0	; select bank0
  2261  0341  07D6               	addwf	xtoa@i,f
  2262  0342  30FF               	movlw	255
  2263  0343  3DD7               	addwfc	xtoa@i+1,f
  2264                           
  2265                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 644:         c = n & 0x0f;
  2266  0344  300F               	movlw	15
  2267  0345  054E               	andwf	xtoa@n,w
  2268  0346  00D8               	movwf	xtoa@c
  2269  0347  3000               	movlw	0
  2270  0348  054F               	andwf	xtoa@n+1,w
  2271  0349  00D9               	movwf	xtoa@c+1
  2272                           
  2273                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 645:         c = (c < 10) ? '
      +                          0' + c : 'a' + (c - 10);
  2274  034A  0859               	movf	xtoa@c+1,w
  2275  034B  3A80               	xorlw	128
  2276  034C  00BD               	movwf	??_xtoa
  2277  034D  3080               	movlw	128
  2278  034E  023D               	subwf	??_xtoa,w
  2279  034F  1D03               	skipz
  2280  0350  2B53               	goto	u1805
  2281  0351  300A               	movlw	10
  2282  0352  0258               	subwf	xtoa@c,w
  2283  0353                     u1805:
  2284  0353  1C03               	skipc
  2285  0354  2B59               	goto	l2160
  2286  0355  0020               	movlb	0	; select bank0
  2287  0356  0858               	movf	xtoa@c,w
  2288  0357  3E57               	addlw	87
  2289  0358  2B5C               	goto	L1
  2290  0359                     l2160:
  2291  0359  0020               	movlb	0	; select bank0
  2292  035A  0858               	movf	xtoa@c,w
  2293  035B  3E30               	addlw	48
  2294  035C                     L1:
  2295  035C  00D8               	movwf	xtoa@c
  2296  035D  3000               	movlw	0
  2297  035E  3D59               	addwfc	xtoa@c+1,w
  2298  035F  00D9               	movwf	xtoa@c+1
  2299  0360  083C               	movf	xtoa@x,w
  2300  0361  3EBF               	addlw	191
  2301  0362  00BD               	movwf	??_xtoa
  2302  0363  30FF               	movlw	255
  2303  0364  1803               	skipnc
  2304  0365  3000               	movlw	0
  2305  0366  00BE               	movwf	??_xtoa+1
  2306  0367  3000               	movlw	0
  2307  0368  023E               	subwf	??_xtoa+1,w
  2308  0369  301A               	movlw	26
  2309  036A  1903               	skipnz
  2310  036B  023D               	subwf	??_xtoa,w
  2311  036C  1803               	btfsc	3,0
  2312  036D  2B70               	goto	u1810
  2313  036E  3001               	movlw	1
  2314  036F  2B71               	goto	u1820
  2315  0370                     u1810:
  2316  0370  3000               	movlw	0
  2317  0371                     u1820:
  2318  0371  00BF               	movwf	??_xtoa+2
  2319  0372  01C0               	clrf	??_xtoa+3
  2320  0373  083F               	movf	??_xtoa+2,w
  2321  0374  00C5               	movwf	_xtoa$760
  2322  0375  0840               	movf	??_xtoa+3,w
  2323  0376  00C6               	movwf	_xtoa$760+1
  2324  0377  0845               	movf	_xtoa$760,w
  2325  0378  0446               	iorwf	_xtoa$760+1,w
  2326  0379  1903               	btfsc	3,2
  2327  037A  2BA6               	goto	l2176
  2328  037B  3020               	movlw	32
  2329  037C  0458               	iorwf	xtoa@c,w
  2330  037D  00BD               	movwf	??_xtoa
  2331  037E  3000               	movlw	0
  2332  037F  0459               	iorwf	xtoa@c+1,w
  2333  0380  00BE               	movwf	??_xtoa+1
  2334  0381  083D               	movf	??_xtoa,w
  2335  0382  3E9F               	addlw	159
  2336  0383  00BF               	movwf	??_xtoa+2
  2337  0384  30FF               	movlw	255
  2338  0385  3D3E               	addwfc	??_xtoa+1,w
  2339  0386  00C0               	movwf	??_xtoa+3
  2340  0387  3000               	movlw	0
  2341  0388  0240               	subwf	??_xtoa+3,w
  2342  0389  301A               	movlw	26
  2343  038A  1903               	skipnz
  2344  038B  023F               	subwf	??_xtoa+2,w
  2345  038C  1803               	btfsc	3,0
  2346  038D  2B90               	goto	u1840
  2347  038E  3001               	movlw	1
  2348  038F  2B91               	goto	u1850
  2349  0390                     u1840:
  2350  0390  3000               	movlw	0
  2351  0391                     u1850:
  2352  0391  00C1               	movwf	??_xtoa+4
  2353  0392  01C2               	clrf	??_xtoa+5
  2354  0393  0841               	movf	??_xtoa+4,w
  2355  0394  00C7               	movwf	_xtoa$761
  2356  0395  0842               	movf	??_xtoa+5,w
  2357  0396  00C8               	movwf	_xtoa$761+1
  2358  0397  0847               	movf	_xtoa$761,w
  2359  0398  0448               	iorwf	_xtoa$761+1,w
  2360  0399  1903               	btfsc	3,2
  2361  039A  2BA6               	goto	l2176
  2362                           
  2363                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 647:             c = toupper(
      +                          c);
  2364  039B  0859               	movf	xtoa@c+1,w
  2365  039C  00A1               	movwf	toupper@c+1
  2366  039D  0858               	movf	xtoa@c,w
  2367  039E  00A0               	movwf	toupper@c
  2368  039F  3186  2670  3182   	fcall	_toupper
  2369  03A2  0821               	movf	?_toupper+1,w
  2370  03A3  00D9               	movwf	xtoa@c+1
  2371  03A4  0820               	movf	?_toupper,w
  2372  03A5  00D8               	movwf	xtoa@c
  2373  03A6                     l2176:
  2374                           
  2375                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 649:         dbuf[i] = (char)
      +                          c;
  2376  03A6  0858               	movf	xtoa@c,w
  2377  03A7  00BD               	movwf	??_xtoa
  2378  03A8  0856               	movf	xtoa@i,w
  2379  03A9  3EA6               	addlw	(low (_dbuf| 0))& (0+255)
  2380  03AA  0086               	movwf	6
  2381  03AB  0187               	clrf	7
  2382  03AC  083D               	movf	??_xtoa,w
  2383  03AD  0081               	movwf	1
  2384                           
  2385                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 650:         --p;
  2386  03AE  30FF               	movlw	255
  2387  03AF  07C9               	addwf	xtoa@p,f
  2388  03B0  30FF               	movlw	255
  2389  03B1  3DCA               	addwfc	xtoa@p+1,f
  2390                           
  2391                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 651:         --w;
  2392  03B2  30FF               	movlw	255
  2393  03B3  07CC               	addwf	xtoa@w,f
  2394  03B4  30FF               	movlw	255
  2395  03B5  3DCD               	addwfc	xtoa@w+1,f
  2396                           
  2397                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 652:         n = n >> 4;
  2398  03B6  304E               	movlw	low xtoa@n
  2399  03B7  0086               	movwf	6
  2400  03B8  3000               	movlw	high xtoa@n
  2401  03B9  0087               	movwf	7
  2402  03BA  3F40               	moviw [0]fsr1
  2403  03BB  00BD               	movwf	??_xtoa
  2404  03BC  3F41               	moviw [1]fsr1
  2405  03BD  00BE               	movwf	??_xtoa+1
  2406  03BE  3F42               	moviw [2]fsr1
  2407  03BF  00BF               	movwf	??_xtoa+2
  2408  03C0  3F43               	moviw [3]fsr1
  2409  03C1  00C0               	movwf	??_xtoa+3
  2410  03C2  3F44               	moviw [4]fsr1
  2411  03C3  00C1               	movwf	??_xtoa+4
  2412  03C4  3F45               	moviw [5]fsr1
  2413  03C5  00C2               	movwf	??_xtoa+5
  2414  03C6  3F46               	moviw [6]fsr1
  2415  03C7  00C3               	movwf	??_xtoa+6
  2416  03C8  3F47               	moviw [7]fsr1
  2417  03C9  00C4               	movwf	??_xtoa+7
  2418  03CA  3004               	movlw	4
  2419  03CB                     u1875:
  2420  03CB  0020               	movlb	0	; select bank0
  2421  03CC  36C4               	lsrf	??_xtoa+7,f
  2422  03CD  0CC3               	rrf	??_xtoa+6,f
  2423  03CE  0CC2               	rrf	??_xtoa+5,f
  2424  03CF  0CC1               	rrf	??_xtoa+4,f
  2425  03D0  0CC0               	rrf	??_xtoa+3,f
  2426  03D1  0CBF               	rrf	??_xtoa+2,f
  2427  03D2  0CBE               	rrf	??_xtoa+1,f
  2428  03D3  0CBD               	rrf	??_xtoa,f
  2429  03D4  0B89               	decfsz	9,f
  2430  03D5  2BCB               	goto	u1875
  2431  03D6  0020               	movlb	0	; select bank0
  2432  03D7  0844               	movf	??_xtoa+7,w
  2433  03D8  00D5               	movwf	xtoa@n+7
  2434  03D9  0843               	movf	??_xtoa+6,w
  2435  03DA  00D4               	movwf	xtoa@n+6
  2436  03DB  0842               	movf	??_xtoa+5,w
  2437  03DC  00D3               	movwf	xtoa@n+5
  2438  03DD  0841               	movf	??_xtoa+4,w
  2439  03DE  00D2               	movwf	xtoa@n+4
  2440  03DF  0840               	movf	??_xtoa+3,w
  2441  03E0  00D1               	movwf	xtoa@n+3
  2442  03E1  083F               	movf	??_xtoa+2,w
  2443  03E2  00D0               	movwf	xtoa@n+2
  2444  03E3  083E               	movf	??_xtoa+1,w
  2445  03E4  00CF               	movwf	xtoa@n+1
  2446  03E5  083D               	movf	??_xtoa,w
  2447  03E6  00CE               	movwf	xtoa@n
  2448  03E7                     l2184:
  2449                           
  2450                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2451  03E7  0020               	movlb	0	; select bank0
  2452  03E8  0857               	movf	xtoa@i+1,w
  2453  03E9  3A80               	xorlw	128
  2454  03EA  00BD               	movwf	??_xtoa
  2455  03EB  3080               	movlw	128
  2456  03EC  023D               	subwf	??_xtoa,w
  2457  03ED  1D03               	skipz
  2458  03EE  2BF1               	goto	u1885
  2459  03EF  3002               	movlw	2
  2460  03F0  0256               	subwf	xtoa@i,w
  2461  03F1                     u1885:
  2462  03F1  1C03               	skipc
  2463  03F2  2C17               	goto	l710
  2464  03F3  0020               	movlb	0	; select bank0
  2465  03F4  084E               	movf	xtoa@n,w
  2466  03F5  044F               	iorwf	xtoa@n+1,w
  2467  03F6  0450               	iorwf	xtoa@n+2,w
  2468  03F7  0451               	iorwf	xtoa@n+3,w
  2469  03F8  0452               	iorwf	xtoa@n+4,w
  2470  03F9  0453               	iorwf	xtoa@n+5,w
  2471  03FA  0454               	iorwf	xtoa@n+6,w
  2472  03FB  0455               	iorwf	xtoa@n+7,w
  2473  03FC  1D03               	skipz
  2474  03FD  2B3F               	goto	l2156
  2475  03FE  084A               	movf	xtoa@p+1,w
  2476  03FF  3A80               	xorlw	128
  2477  0400  00BD               	movwf	??_xtoa
  2478  0401  3080               	movlw	128
  2479  0402  023D               	subwf	??_xtoa,w
  2480  0403  1D03               	skipz
  2481  0404  2C07               	goto	u1905
  2482  0405  3001               	movlw	1
  2483  0406  0249               	subwf	xtoa@p,w
  2484  0407                     u1905:
  2485  0407  1803               	skipnc
  2486  0408  2B3F               	goto	l2156
  2487  0409  0020               	movlb	0	; select bank0
  2488  040A  084D               	movf	xtoa@w+1,w
  2489  040B  3A80               	xorlw	128
  2490  040C  00BD               	movwf	??_xtoa
  2491  040D  3080               	movlw	128
  2492  040E  023D               	subwf	??_xtoa,w
  2493  040F  1D03               	skipz
  2494  0410  2C13               	goto	u1915
  2495  0411  3001               	movlw	1
  2496  0412  024C               	subwf	xtoa@w,w
  2497  0413                     u1915:
  2498  0413  1C03               	skipc
  2499  0414  2C17               	goto	l710
  2500  0415  18F9               	btfsc	_flags,1
  2501  0416  2B3F               	goto	l2156
  2502  0417                     l710:
  2503                           
  2504                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 656:     if (flags & (1 << 4)
      +                          ) {
  2505  0417  1E79               	btfss	_flags,4
  2506  0418  2C32               	goto	l2200
  2507                           
  2508                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 657:         --i;
  2509  0419  30FF               	movlw	255
  2510  041A  0020               	movlb	0	; select bank0
  2511  041B  07D6               	addwf	xtoa@i,f
  2512  041C  30FF               	movlw	255
  2513  041D  3DD7               	addwfc	xtoa@i+1,f
  2514                           
  2515                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 658:         dbuf[i] = x;
  2516  041E  083C               	movf	xtoa@x,w
  2517  041F  00BD               	movwf	??_xtoa
  2518  0420  0856               	movf	xtoa@i,w
  2519  0421  3EA6               	addlw	(low (_dbuf| 0))& (0+255)
  2520  0422  0086               	movwf	6
  2521  0423  0187               	clrf	7
  2522  0424  083D               	movf	??_xtoa,w
  2523  0425  0081               	movwf	1
  2524                           
  2525                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 659:         --i;
  2526  0426  30FF               	movlw	255
  2527  0427  07D6               	addwf	xtoa@i,f
  2528  0428  30FF               	movlw	255
  2529  0429  3DD7               	addwfc	xtoa@i+1,f
  2530                           
  2531                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 660:         dbuf[i] = '0';
  2532  042A  3030               	movlw	48
  2533  042B  00BD               	movwf	??_xtoa
  2534  042C  0856               	movf	xtoa@i,w
  2535  042D  3EA6               	addlw	(low (_dbuf| 0))& (0+255)
  2536  042E  0086               	movwf	6
  2537  042F  0187               	clrf	7
  2538  0430  083D               	movf	??_xtoa,w
  2539  0431  0081               	movwf	1
  2540  0432                     l2200:
  2541                           
  2542                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 664:     return pad(fp, &dbuf
      +                          [i], w);
  2543  0432  0020               	movlb	0	; select bank0
  2544  0433  0856               	movf	xtoa@i,w
  2545  0434  3EA6               	addlw	(low (_dbuf| 0))& (0+255)
  2546  0435  00BD               	movwf	??_xtoa
  2547  0436  083D               	movf	??_xtoa,w
  2548  0437  00AC               	movwf	pad@buf
  2549  0438  084D               	movf	xtoa@w+1,w
  2550  0439  00AE               	movwf	pad@p+1
  2551  043A  084C               	movf	xtoa@w,w
  2552  043B  00AD               	movwf	pad@p
  2553  043C  084B               	movf	xtoa@fp,w
  2554  043D  3185  25A0         	fcall	_pad
  2555  043F  082D               	movf	?_pad+1,w
  2556  0440  00B5               	movwf	?_xtoa+1
  2557  0441  082C               	movf	?_pad,w
  2558  0442  00B4               	movwf	?_xtoa
  2559  0443  0008               	return
  2560  0444                     __end_of_xtoa:
  2561                           
  2562                           	psect	text6
  2563  0670                     __ptext6:	
  2564 ;; *************** function _toupper *****************
  2565 ;; Defined at:
  2566 ;;		line 4 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/toupper.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  c               2    0[BANK0 ] int 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2    0[BANK0 ] int 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0
  2575 ;; Tracked objects:
  2576 ;;		On entry : 1F/0
  2577 ;;		On exit  : 1F/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2580 ;;      Params:         0       2       0       0       0       0       0       0
  2581 ;;      Locals:         0       2       0       0       0       0       0       0
  2582 ;;      Temps:          0       4       0       0       0       0       0       0
  2583 ;;      Totals:         0       8       0       0       0       0       0       0
  2584 ;;Total ram usage:        8 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    2
  2587 ;; This function calls:
  2588 ;;		_islower
  2589 ;; This function is called by:
  2590 ;;		_xtoa
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           
  2595                           ;psect for function _toupper
  2596  0670                     _toupper:
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _toupper: [wreg+status,2+status,0]
  2600  0670  0820               	movf	toupper@c,w
  2601  0671  3E9F               	addlw	159
  2602  0672  00A2               	movwf	??_toupper
  2603  0673  30FF               	movlw	255
  2604  0674  3D21               	addwfc	toupper@c+1,w
  2605  0675  00A3               	movwf	??_toupper+1
  2606  0676  3000               	movlw	0
  2607  0677  0223               	subwf	??_toupper+1,w
  2608  0678  301A               	movlw	26
  2609  0679  1903               	skipnz
  2610  067A  0222               	subwf	??_toupper,w
  2611  067B  1803               	btfsc	3,0
  2612  067C  2E7F               	goto	u1740
  2613  067D  3001               	movlw	1
  2614  067E  2E80               	goto	u1750
  2615  067F                     u1740:
  2616  067F  3000               	movlw	0
  2617  0680                     u1750:
  2618  0680  00A4               	movwf	??_toupper+2
  2619  0681  01A5               	clrf	??_toupper+3
  2620  0682  0824               	movf	??_toupper+2,w
  2621  0683  00A6               	movwf	_toupper$885
  2622  0684  0825               	movf	??_toupper+3,w
  2623  0685  00A7               	movwf	_toupper$885+1
  2624  0686  0826               	movf	_toupper$885,w
  2625  0687  0427               	iorwf	_toupper$885+1,w
  2626  0688  1903               	btfsc	3,2
  2627  0689  0008               	return
  2628  068A  305F               	movlw	95
  2629  068B  0520               	andwf	toupper@c,w
  2630  068C  00A0               	movwf	?_toupper
  2631  068D  3000               	movlw	0
  2632  068E  0521               	andwf	toupper@c+1,w
  2633  068F  00A1               	movwf	?_toupper+1
  2634  0690  0008               	return
  2635  0691                     __end_of_toupper:
  2636                           
  2637                           	psect	text7
  2638  06E6                     __ptext7:	
  2639 ;; *************** function _islower *****************
  2640 ;; Defined at:
  2641 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/islower.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  c               2    3[COMMON] int 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  2    3[COMMON] int 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2655 ;;      Params:         2       0       0       0       0       0       0       0
  2656 ;;      Locals:         0       0       0       0       0       0       0       0
  2657 ;;      Temps:          4       0       0       0       0       0       0       0
  2658 ;;      Totals:         6       0       0       0       0       0       0       0
  2659 ;;Total ram usage:        6 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    1
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_toupper
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _islower
  2671  06E6                     _islower:
  2672                           
  2673                           ;incstack = 0
  2674                           ; Regs used in _islower: [wreg+status,2+status,0]
  2675  06E6  0873               	movf	islower@c,w
  2676  06E7  3E9F               	addlw	159
  2677  06E8  00F5               	movwf	??_islower
  2678  06E9  30FF               	movlw	255
  2679  06EA  3D74               	addwfc	islower@c+1,w
  2680  06EB  00F6               	movwf	??_islower+1
  2681  06EC  3000               	movlw	0
  2682  06ED  0276               	subwf	??_islower+1,w
  2683  06EE  301A               	movlw	26
  2684  06EF  1903               	skipnz
  2685  06F0  0275               	subwf	??_islower,w
  2686  06F1  1803               	btfsc	3,0
  2687  06F2  2EF5               	goto	u910
  2688  06F3  3001               	movlw	1
  2689  06F4  2EF6               	goto	u920
  2690  06F5                     u910:
  2691  06F5  3000               	movlw	0
  2692  06F6                     u920:
  2693  06F6  00F7               	movwf	??_islower+2
  2694  06F7  01F8               	clrf	??_islower+3
  2695  06F8  0877               	movf	??_islower+2,w
  2696  06F9  00F3               	movwf	?_islower
  2697  06FA  0878               	movf	??_islower+3,w
  2698  06FB  00F4               	movwf	?_islower+1
  2699  06FC  0008               	return
  2700  06FD                     __end_of_islower:
  2701                           
  2702                           	psect	text8
  2703  05A0                     __ptext8:	
  2704 ;; *************** function _pad *****************
  2705 ;; Defined at:
  2706 ;;		line 72 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;  fp              1    wreg     PTR struct _IO_FILE
  2709 ;;		 -> NULL(0), 
  2710 ;;  buf             1   12[BANK0 ] PTR unsigned char 
  2711 ;;		 -> dbuf(32), 
  2712 ;;  p               2   13[BANK0 ] int 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  fp              1   19[BANK0 ] PTR struct _IO_FILE
  2715 ;;		 -> NULL(0), 
  2716 ;;  w               2   17[BANK0 ] int 
  2717 ;;  i               2   15[BANK0 ] int 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  2   12[BANK0 ] int 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 1F/0
  2724 ;;		On exit  : 1F/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2727 ;;      Params:         0       3       0       0       0       0       0       0
  2728 ;;      Locals:         0       5       0       0       0       0       0       0
  2729 ;;      Temps:          1       0       0       0       0       0       0       0
  2730 ;;      Totals:         1       8       0       0       0       0       0       0
  2731 ;;Total ram usage:        9 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    4
  2734 ;; This function calls:
  2735 ;;		_fputc
  2736 ;;		_fputs
  2737 ;;		_strlen
  2738 ;; This function is called by:
  2739 ;;		_xtoa
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           
  2744                           ;psect for function _pad
  2745  05A0                     _pad:
  2746                           
  2747                           ;incstack = 0
  2748                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2749                           ;pad@fp stored from wreg
  2750  05A0  00B3               	movwf	pad@fp
  2751                           
  2752                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.20/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  2753  05A1  1C79               	btfss	_flags,0
  2754  05A2  2DAB               	goto	l2110
  2755                           
  2756                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  2757  05A3  0833               	movf	pad@fp,w
  2758  05A4  00F8               	movwf	??_pad
  2759  05A5  0878               	movf	??_pad,w
  2760  05A6  00F7               	movwf	fputs@fp
  2761  05A7  082C               	movf	pad@buf,w
  2762  05A8  3186  264C  3185   	fcall	_fputs
  2763  05AB                     l2110:
  2764                           
  2765                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  2766  05AB  1BAE               	btfsc	pad@p+1,7
  2767  05AC  2DB2               	goto	l2114
  2768  05AD  082E               	movf	pad@p+1,w
  2769  05AE  00B2               	movwf	pad@w+1
  2770  05AF  082D               	movf	pad@p,w
  2771  05B0  00B1               	movwf	pad@w
  2772  05B1  2DB4               	goto	l677
  2773  05B2                     l2114:
  2774  05B2  01B1               	clrf	pad@w
  2775  05B3  01B2               	clrf	pad@w+1
  2776  05B4                     l677:
  2777                           
  2778                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  2779  05B4  01AF               	clrf	pad@i
  2780  05B5  01B0               	clrf	pad@i+1
  2781  05B6                     l2120:	
  2782                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  2783                           
  2784                           
  2785                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  2786  05B6  0830               	movf	pad@i+1,w
  2787  05B7  3A80               	xorlw	128
  2788  05B8  00F8               	movwf	??_pad
  2789  05B9  0832               	movf	pad@w+1,w
  2790  05BA  3A80               	xorlw	128
  2791  05BB  0278               	subwf	??_pad,w
  2792  05BC  1D03               	skipz
  2793  05BD  2DC0               	goto	u1705
  2794  05BE  0831               	movf	pad@w,w
  2795  05BF  022F               	subwf	pad@i,w
  2796  05C0                     u1705:
  2797  05C0  1803               	btfsc	3,0
  2798  05C1  2DD4               	goto	l680
  2799                           
  2800                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  2801  05C2  3020               	movlw	32
  2802  05C3  00F4               	movwf	fputc@c
  2803  05C4  3000               	movlw	0
  2804  05C5  00F5               	movwf	fputc@c+1
  2805  05C6  0020               	movlb	0	; select bank0
  2806  05C7  0833               	movf	pad@fp,w
  2807  05C8  00F8               	movwf	??_pad
  2808  05C9  0878               	movf	??_pad,w
  2809  05CA  00F6               	movwf	fputc@fp
  2810  05CB  3185  25EA  3185   	fcall	_fputc
  2811                           
  2812                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 86:         ++i;
  2813  05CE  3001               	movlw	1
  2814  05CF  0020               	movlb	0	; select bank0
  2815  05D0  07AF               	addwf	pad@i,f
  2816  05D1  3000               	movlw	0
  2817  05D2  3DB0               	addwfc	pad@i+1,f
  2818  05D3  2DB6               	goto	l2120
  2819  05D4                     l680:
  2820                           
  2821                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  2822  05D4  1879               	btfsc	_flags,0
  2823  05D5  2DDF               	goto	l681
  2824                           
  2825                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  2826  05D6  0020               	movlb	0	; select bank0
  2827  05D7  0833               	movf	pad@fp,w
  2828  05D8  00F8               	movwf	??_pad
  2829  05D9  0878               	movf	??_pad,w
  2830  05DA  00F7               	movwf	fputs@fp
  2831  05DB  082C               	movf	pad@buf,w
  2832  05DC  3186  264C  3185   	fcall	_fputs
  2833  05DF                     l681:	
  2834                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 92:     }
  2835                           
  2836                           
  2837                           ;/opt/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
  2838  05DF  0020               	movlb	0	; select bank0
  2839  05E0  082C               	movf	pad@buf,w
  2840  05E1  3186  26FD         	fcall	_strlen
  2841  05E3  0831               	movf	pad@w,w
  2842  05E4  0773               	addwf	?_strlen,w
  2843  05E5  00AC               	movwf	?_pad
  2844  05E6  0832               	movf	pad@w+1,w
  2845  05E7  3D74               	addwfc	?_strlen+1,w
  2846  05E8  00AD               	movwf	?_pad+1
  2847  05E9  0008               	return
  2848  05EA                     __end_of_pad:
  2849                           
  2850                           	psect	text9
  2851  06FD                     __ptext9:	
  2852 ;; *************** function _strlen *****************
  2853 ;; Defined at:
  2854 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/strlen.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  s               1    wreg     PTR const unsigned char 
  2857 ;;		 -> dbuf(32), 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  s               1    7[COMMON] PTR const unsigned char 
  2860 ;;		 -> dbuf(32), 
  2861 ;;  a               1    6[COMMON] PTR const unsigned char 
  2862 ;;		 -> dbuf(32), 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  2    3[COMMON] unsigned int 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 1F/0
  2869 ;;		On exit  : 1F/0
  2870 ;;		Unchanged: 1F/0
  2871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2872 ;;      Params:         2       0       0       0       0       0       0       0
  2873 ;;      Locals:         2       0       0       0       0       0       0       0
  2874 ;;      Temps:          1       0       0       0       0       0       0       0
  2875 ;;      Totals:         5       0       0       0       0       0       0       0
  2876 ;;Total ram usage:        5 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    1
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_pad
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           
  2887                           ;psect for function _strlen
  2888  06FD                     _strlen:
  2889                           
  2890                           ;incstack = 0
  2891                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  2892                           ;strlen@s stored from wreg
  2893  06FD  00F7               	movwf	strlen@s
  2894  06FE  0877               	movf	strlen@s,w
  2895  06FF  00F5               	movwf	??_strlen
  2896  0700  0875               	movf	??_strlen,w
  2897  0701  00F6               	movwf	strlen@a
  2898  0702                     l1518:
  2899  0702  0877               	movf	strlen@s,w
  2900  0703  0086               	movwf	6
  2901  0704  0187               	clrf	7
  2902  0705  0801               	movf	1,w
  2903  0706  1903               	btfsc	3,2
  2904  0707  2F0D               	goto	l1520
  2905  0708  3001               	movlw	1
  2906  0709  00F5               	movwf	??_strlen
  2907  070A  0875               	movf	??_strlen,w
  2908  070B  07F7               	addwf	strlen@s,f
  2909  070C  2F02               	goto	l1518
  2910  070D                     l1520:
  2911  070D  0876               	movf	strlen@a,w
  2912  070E  0277               	subwf	strlen@s,w
  2913  070F  00F3               	movwf	?_strlen
  2914  0710  01F4               	clrf	?_strlen+1
  2915  0711  1BF3               	btfsc	?_strlen,7
  2916  0712  03F4               	decf	?_strlen+1,f
  2917  0713  0008               	return
  2918  0714                     __end_of_strlen:
  2919                           
  2920                           	psect	text10
  2921  064C                     __ptext10:	
  2922 ;; *************** function _fputs *****************
  2923 ;; Defined at:
  2924 ;;		line 8 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/nf_fputs.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  s               1    wreg     PTR const unsigned char 
  2927 ;;		 -> dbuf(32), 
  2928 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  2929 ;;		 -> NULL(0), 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  s               1   11[BANK0 ] PTR const unsigned char 
  2932 ;;		 -> dbuf(32), 
  2933 ;;  i               2    9[BANK0 ] int 
  2934 ;;  c               1    8[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  2    7[COMMON] int 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 1F/0
  2941 ;;		On exit  : 1F/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2944 ;;      Params:         1       0       0       0       0       0       0       0
  2945 ;;      Locals:         0       4       0       0       0       0       0       0
  2946 ;;      Temps:          0       3       0       0       0       0       0       0
  2947 ;;      Totals:         1       7       0       0       0       0       0       0
  2948 ;;Total ram usage:        8 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    3
  2951 ;; This function calls:
  2952 ;;		_fputc
  2953 ;; This function is called by:
  2954 ;;		_pad
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           
  2959                           ;psect for function _fputs
  2960  064C                     _fputs:
  2961                           
  2962                           ;incstack = 0
  2963                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2964                           ;fputs@s stored from wreg
  2965  064C  00AB               	movwf	fputs@s
  2966  064D  01A9               	clrf	fputs@i
  2967  064E  01AA               	clrf	fputs@i+1
  2968  064F                     l2104:
  2969  064F  0829               	movf	fputs@i,w
  2970  0650  072B               	addwf	fputs@s,w
  2971  0651  00A5               	movwf	??_fputs
  2972  0652  0825               	movf	??_fputs,w
  2973  0653  0086               	movwf	6
  2974  0654  0187               	clrf	7
  2975  0655  0801               	movf	1,w
  2976  0656  00A6               	movwf	??_fputs+1
  2977  0657  0826               	movf	??_fputs+1,w
  2978  0658  00A8               	movwf	fputs@c
  2979  0659  0828               	movf	fputs@c,w
  2980  065A  1903               	btfsc	3,2
  2981  065B  0008               	return
  2982  065C  0828               	movf	fputs@c,w
  2983  065D  00A5               	movwf	??_fputs
  2984  065E  01A6               	clrf	??_fputs+1
  2985  065F  0825               	movf	??_fputs,w
  2986  0660  00F4               	movwf	fputc@c
  2987  0661  0826               	movf	??_fputs+1,w
  2988  0662  00F5               	movwf	fputc@c+1
  2989  0663  0877               	movf	fputs@fp,w
  2990  0664  00A7               	movwf	??_fputs+2
  2991  0665  0827               	movf	??_fputs+2,w
  2992  0666  00F6               	movwf	fputc@fp
  2993  0667  3185  25EA  3186   	fcall	_fputc
  2994  066A  3001               	movlw	1
  2995  066B  0020               	movlb	0	; select bank0
  2996  066C  07A9               	addwf	fputs@i,f
  2997  066D  3000               	movlw	0
  2998  066E  3DAA               	addwfc	fputs@i+1,f
  2999  066F  2E4F               	goto	l2104
  3000  0670                     __end_of_fputs:
  3001                           
  3002                           	psect	text11
  3003  05EA                     __ptext11:	
  3004 ;; *************** function _fputc *****************
  3005 ;; Defined at:
  3006 ;;		line 8 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/nf_fputc.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  c               2    4[COMMON] int 
  3009 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  3010 ;;		 -> NULL(0), 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  2    4[COMMON] int 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 1F/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3022 ;;      Params:         3       0       0       0       0       0       0       0
  3023 ;;      Locals:         0       0       0       0       0       0       0       0
  3024 ;;      Temps:          0       5       0       0       0       0       0       0
  3025 ;;      Totals:         3       5       0       0       0       0       0       0
  3026 ;;Total ram usage:        8 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    2
  3029 ;; This function calls:
  3030 ;;		_putch
  3031 ;; This function is called by:
  3032 ;;		_pad
  3033 ;;		_vfpfcnvrt
  3034 ;;		_fputs
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _fputc
  3040  05EA                     _fputc:
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3044  05EA  0876               	movf	fputc@fp,w
  3045  05EB  1D03               	btfss	3,2
  3046  05EC  0876               	movf	fputc@fp,w
  3047  05ED  1D03               	btfss	3,2
  3048  05EE  2DF3               	goto	l1498
  3049  05EF  0874               	movf	fputc@c,w
  3050  05F0  3187  2776         	fcall	_putch
  3051  05F2  0008               	return
  3052  05F3                     l1498:
  3053  05F3  0876               	movf	fputc@fp,w
  3054  05F4  3E03               	addlw	3
  3055  05F5  0086               	movwf	6
  3056  05F6  0187               	clrf	7
  3057  05F7  0016               	moviw fsr1++
  3058  05F8  0401               	iorwf	1,w
  3059  05F9  1903               	btfsc	3,2
  3060  05FA  2E16               	goto	l1502
  3061  05FB  0876               	movf	fputc@fp,w
  3062  05FC  3E03               	addlw	3
  3063  05FD  0086               	movwf	6
  3064  05FE  0187               	clrf	7
  3065  05FF  3F40               	moviw [0]fsr1
  3066  0600  00A0               	movwf	??_fputc
  3067  0601  3F41               	moviw [1]fsr1
  3068  0602  00A1               	movwf	??_fputc+1
  3069  0603  0A76               	incf	fputc@fp,w
  3070  0604  0086               	movwf	6
  3071  0605  0187               	clrf	7
  3072  0606  3F40               	moviw [0]fsr1
  3073  0607  00A2               	movwf	??_fputc+2
  3074  0608  3F41               	moviw [1]fsr1
  3075  0609  00A3               	movwf	??_fputc+3
  3076  060A  0823               	movf	??_fputc+3,w
  3077  060B  3A80               	xorlw	128
  3078  060C  00A4               	movwf	??_fputc+4
  3079  060D  0821               	movf	??_fputc+1,w
  3080  060E  3A80               	xorlw	128
  3081  060F  0224               	subwf	??_fputc+4,w
  3082  0610  1D03               	skipz
  3083  0611  2E14               	goto	u885
  3084  0612  0820               	movf	??_fputc,w
  3085  0613  0222               	subwf	??_fputc+2,w
  3086  0614                     u885:
  3087  0614  1803               	skipnc
  3088  0615  0008               	return
  3089  0616                     l1502:
  3090  0616  0A76               	incf	fputc@fp,w
  3091  0617  0086               	movwf	6
  3092  0618  0187               	clrf	7
  3093  0619  3001               	movlw	1
  3094  061A  0781               	addwf	1,f
  3095  061B  3141               	addfsr 1,1
  3096  061C  1803               	skipnc
  3097  061D  0A81               	incf	1,f
  3098  061E  0008               	return
  3099  061F                     __end_of_fputc:
  3100                           
  3101                           	psect	text12
  3102  0776                     __ptext12:	
  3103 ;; *************** function _putch *****************
  3104 ;; Defined at:
  3105 ;;		line 143 in file "main.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  value           1    wreg     unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  value           1    3[COMMON] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg
  3114 ;; Tracked objects:
  3115 ;;		On entry : 1F/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3119 ;;      Params:         0       0       0       0       0       0       0       0
  3120 ;;      Locals:         1       0       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0
  3122 ;;      Totals:         1       0       0       0       0       0       0       0
  3123 ;;Total ram usage:        1 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_fputc
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _putch
  3135  0776                     _putch:
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in _putch: [wreg]
  3139                           ;putch@value stored from wreg
  3140  0776  00F3               	movwf	putch@value
  3141  0777                     l89:	
  3142                           ;main.c: 143: void putch(char value);main.c: 144: {;main.c: 146:   while(!PIR1bits.TXIF)
      +                          { }
  3143                           
  3144  0777  1E11               	btfss	17,4	;volatile
  3145  0778  2F77               	goto	l89
  3146                           
  3147                           ;main.c: 147:   TXREG = value;
  3148  0779  0873               	movf	putch@value,w
  3149  077A  0023               	movlb	3	; select bank3
  3150  077B  009A               	movwf	26	;volatile
  3151  077C  0000               	nop	;# 
  3152  077D  0008               	return
  3153  077E                     __end_of_putch:
  3154                           
  3155                           	psect	text13
  3156  0714                     __ptext13:	
  3157 ;; *************** function _isupper *****************
  3158 ;; Defined at:
  3159 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/isupper.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  c               2    3[COMMON] int 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;		None
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  2    3[COMMON] int 
  3166 ;; Registers used:
  3167 ;;		wreg, status,2, status,0
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3173 ;;      Params:         2       0       0       0       0       0       0       0
  3174 ;;      Locals:         0       0       0       0       0       0       0       0
  3175 ;;      Temps:          4       0       0       0       0       0       0       0
  3176 ;;      Totals:         6       0       0       0       0       0       0       0
  3177 ;;Total ram usage:        6 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_xtoa
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _isupper
  3189  0714                     _isupper:
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _isupper: [wreg+status,2+status,0]
  3193  0714  0873               	movf	isupper@c,w
  3194  0715  3EBF               	addlw	191
  3195  0716  00F5               	movwf	??_isupper
  3196  0717  30FF               	movlw	255
  3197  0718  3D74               	addwfc	isupper@c+1,w
  3198  0719  00F6               	movwf	??_isupper+1
  3199  071A  3000               	movlw	0
  3200  071B  0276               	subwf	??_isupper+1,w
  3201  071C  301A               	movlw	26
  3202  071D  1903               	skipnz
  3203  071E  0275               	subwf	??_isupper,w
  3204  071F  1803               	btfsc	3,0
  3205  0720  2F23               	goto	u1010
  3206  0721  3001               	movlw	1
  3207  0722  2F24               	goto	u1020
  3208  0723                     u1010:
  3209  0723  3000               	movlw	0
  3210  0724                     u1020:
  3211  0724  00F7               	movwf	??_isupper+2
  3212  0725  01F8               	clrf	??_isupper+3
  3213  0726  0877               	movf	??_isupper+2,w
  3214  0727  00F3               	movwf	?_isupper
  3215  0728  0878               	movf	??_isupper+3,w
  3216  0729  00F4               	movwf	?_isupper+1
  3217  072A  0008               	return
  3218  072B                     __end_of_isupper:
  3219                           
  3220                           	psect	text14
  3221  0691                     __ptext14:	
  3222 ;; *************** function _isalpha *****************
  3223 ;; Defined at:
  3224 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/isalpha.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  c               2    3[COMMON] int 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;		None
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  2    3[COMMON] int 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 1F/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3238 ;;      Params:         2       0       0       0       0       0       0       0
  3239 ;;      Locals:         0       0       0       0       0       0       0       0
  3240 ;;      Temps:          0       6       0       0       0       0       0       0
  3241 ;;      Totals:         2       6       0       0       0       0       0       0
  3242 ;;Total ram usage:        8 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_xtoa
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _isalpha
  3254  0691                     _isalpha:
  3255                           
  3256                           ;incstack = 0
  3257                           ; Regs used in _isalpha: [wreg+status,2+status,0]
  3258  0691  3020               	movlw	32
  3259  0692  0473               	iorwf	isalpha@c,w
  3260  0693  0020               	movlb	0	; select bank0
  3261  0694  00A0               	movwf	??_isalpha
  3262  0695  3000               	movlw	0
  3263  0696  0474               	iorwf	isalpha@c+1,w
  3264  0697  00A1               	movwf	??_isalpha+1
  3265  0698  0820               	movf	??_isalpha,w
  3266  0699  3E9F               	addlw	159
  3267  069A  00A2               	movwf	??_isalpha+2
  3268  069B  30FF               	movlw	255
  3269  069C  3D21               	addwfc	??_isalpha+1,w
  3270  069D  00A3               	movwf	??_isalpha+3
  3271  069E  3000               	movlw	0
  3272  069F  0223               	subwf	??_isalpha+3,w
  3273  06A0  301A               	movlw	26
  3274  06A1  1903               	skipnz
  3275  06A2  0222               	subwf	??_isalpha+2,w
  3276  06A3  1803               	btfsc	3,0
  3277  06A4  2EA7               	goto	u1720
  3278  06A5  3001               	movlw	1
  3279  06A6  2EA8               	goto	u1730
  3280  06A7                     u1720:
  3281  06A7  3000               	movlw	0
  3282  06A8                     u1730:
  3283  06A8  00A4               	movwf	??_isalpha+4
  3284  06A9  01A5               	clrf	??_isalpha+5
  3285  06AA  0824               	movf	??_isalpha+4,w
  3286  06AB  00F3               	movwf	?_isalpha
  3287  06AC  0825               	movf	??_isalpha+5,w
  3288  06AD  00F4               	movwf	?_isalpha+1
  3289  06AE  0008               	return
  3290  06AF                     __end_of_isalpha:
  3291                           
  3292                           	psect	text15
  3293  054E                     __ptext15:	
  3294 ;; *************** function _strncmp *****************
  3295 ;; Defined at:
  3296 ;;		line 3 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/strncmp.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  _l              2    3[COMMON] PTR const unsigned char 
  3299 ;;		 -> STR_1(9), 
  3300 ;;  _r              2    5[COMMON] PTR const unsigned char 
  3301 ;;		 -> STR_8(3), STR_4(3), 
  3302 ;;  n               2    7[COMMON] unsigned int 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  r               2    3[BANK0 ] PTR const unsigned char 
  3305 ;;		 -> STR_8(3), STR_4(3), 
  3306 ;;  l               2    1[BANK0 ] PTR const unsigned char 
  3307 ;;		 -> STR_1(9), 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  2    3[COMMON] int 
  3310 ;; Registers used:
  3311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3312 ;; Tracked objects:
  3313 ;;		On entry : 1F/0
  3314 ;;		On exit  : 1F/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3317 ;;      Params:         6       0       0       0       0       0       0       0
  3318 ;;      Locals:         0       4       0       0       0       0       0       0
  3319 ;;      Temps:          0       1       0       0       0       0       0       0
  3320 ;;      Totals:         6       5       0       0       0       0       0       0
  3321 ;;Total ram usage:       11 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    1
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_vfpfcnvrt
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _strncmp
  3333  054E                     _strncmp:
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  3337  054E  0874               	movf	strncmp@_l+1,w
  3338  054F  00A2               	movwf	strncmp@l+1
  3339  0550  0873               	movf	strncmp@_l,w
  3340  0551  00A1               	movwf	strncmp@l
  3341  0552  0876               	movf	strncmp@_r+1,w
  3342  0553  00A4               	movwf	strncmp@r+1
  3343  0554  0875               	movf	strncmp@_r,w
  3344  0555  00A3               	movwf	strncmp@r
  3345  0556  3001               	movlw	1
  3346  0557  02F7               	subwf	strncmp@n,f
  3347  0558  3000               	movlw	0
  3348  0559  3BF8               	subwfb	strncmp@n+1,f
  3349  055A  0A77               	incf	strncmp@n,w
  3350  055B  1D03               	skipz
  3351  055C  2D88               	goto	l2258
  3352  055D  0A78               	incf	strncmp@n+1,w
  3353  055E  1D03               	btfss	3,2
  3354  055F  2D88               	goto	l2258
  3355  0560  01F3               	clrf	?_strncmp
  3356  0561  01F4               	clrf	?_strncmp+1
  3357  0562  0008               	return
  3358  0563                     l2260:
  3359  0563  0823               	movf	strncmp@r,w
  3360  0564  0084               	movwf	4
  3361  0565  0824               	movf	strncmp@r+1,w
  3362  0566  0085               	movwf	5
  3363  0567  0012               	moviw fsr0++
  3364  0568  1903               	btfsc	3,2
  3365  0569  2D8F               	goto	l2266
  3366  056A  0877               	movf	strncmp@n,w
  3367  056B  0478               	iorwf	strncmp@n+1,w
  3368  056C  1903               	btfsc	3,2
  3369  056D  2D8F               	goto	l2266
  3370  056E  0823               	movf	strncmp@r,w
  3371  056F  0084               	movwf	4
  3372  0570  0824               	movf	strncmp@r+1,w
  3373  0571  0085               	movwf	5
  3374  0572  0800               	movf	0,w	;code access
  3375  0573  00A0               	movwf	??_strncmp
  3376  0574  0821               	movf	strncmp@l,w
  3377  0575  0084               	movwf	4
  3378  0576  0822               	movf	strncmp@l+1,w
  3379  0577  0085               	movwf	5
  3380  0578  0800               	movf	0,w	;code access
  3381  0579  0620               	xorwf	??_strncmp,w
  3382  057A  1D03               	btfss	3,2
  3383  057B  2D8F               	goto	l2266
  3384  057C  3001               	movlw	1
  3385  057D  07A1               	addwf	strncmp@l,f
  3386  057E  3000               	movlw	0
  3387  057F  3DA2               	addwfc	strncmp@l+1,f
  3388  0580  3001               	movlw	1
  3389  0581  07A3               	addwf	strncmp@r,f
  3390  0582  3000               	movlw	0
  3391  0583  3DA4               	addwfc	strncmp@r+1,f
  3392  0584  3001               	movlw	1
  3393  0585  02F7               	subwf	strncmp@n,f
  3394  0586  3000               	movlw	0
  3395  0587  3BF8               	subwfb	strncmp@n+1,f
  3396  0588                     l2258:
  3397  0588  0821               	movf	strncmp@l,w
  3398  0589  0084               	movwf	4
  3399  058A  0822               	movf	strncmp@l+1,w
  3400  058B  0085               	movwf	5
  3401  058C  0012               	moviw fsr0++
  3402  058D  1D03               	btfss	3,2
  3403  058E  2D63               	goto	l2260
  3404  058F                     l2266:
  3405  058F  0821               	movf	strncmp@l,w
  3406  0590  0084               	movwf	4
  3407  0591  0822               	movf	strncmp@l+1,w
  3408  0592  0085               	movwf	5
  3409  0593  0800               	movf	0,w	;code access
  3410  0594  00A0               	movwf	??_strncmp
  3411  0595  0823               	movf	strncmp@r,w
  3412  0596  0084               	movwf	4
  3413  0597  0824               	movf	strncmp@r+1,w
  3414  0598  0085               	movwf	5
  3415  0599  0800               	movf	0,w	;code access
  3416  059A  0220               	subwf	??_strncmp,w
  3417  059B  00F3               	movwf	?_strncmp
  3418  059C  01F4               	clrf	?_strncmp+1
  3419  059D  1C03               	skipc
  3420  059E  03F4               	decf	?_strncmp+1,f
  3421  059F  0008               	return
  3422  05A0                     __end_of_strncmp:
  3423                           
  3424                           	psect	text16
  3425  0444                     __ptext16:	
  3426 ;; *************** function _atoi *****************
  3427 ;; Defined at:
  3428 ;;		line 4 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/atoi.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  3431 ;;		 -> STR_1(9), 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  n               2   13[BANK0 ] int 
  3434 ;;  neg             2    6[BANK0 ] int 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  2    0[BANK0 ] int 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 1F/0
  3441 ;;		On exit  : 1F/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3444 ;;      Params:         0       2       0       0       0       0       0       0
  3445 ;;      Locals:         0       9       0       0       0       0       0       0
  3446 ;;      Temps:          0       4       0       0       0       0       0       0
  3447 ;;      Totals:         0      15       0       0       0       0       0       0
  3448 ;;Total ram usage:       15 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    2
  3451 ;; This function calls:
  3452 ;;		___wmul
  3453 ;;		_isdigit
  3454 ;;		_isspace
  3455 ;; This function is called by:
  3456 ;;		_vfpfcnvrt
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _atoi
  3462  0444                     _atoi:
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3466  0444  01AD               	clrf	atoi@n
  3467  0445  01AE               	clrf	atoi@n+1
  3468  0446  01A6               	clrf	atoi@neg
  3469  0447  01A7               	clrf	atoi@neg+1
  3470  0448                     l2208:
  3471  0448  01AC               	clrf	_atoi$804
  3472  0449  0AAC               	incf	_atoi$804,f
  3473  044A  0820               	movf	atoi@s,w
  3474  044B  0084               	movwf	4
  3475  044C  0821               	movf	atoi@s+1,w
  3476  044D  0085               	movwf	5
  3477  044E  0012               	moviw fsr0++
  3478  044F  3A20               	xorlw	32
  3479  0450  1903               	btfsc	3,2
  3480  0451  2C64               	goto	l2216
  3481  0452  0820               	movf	atoi@s,w
  3482  0453  0084               	movwf	4
  3483  0454  0821               	movf	atoi@s+1,w
  3484  0455  0085               	movwf	5
  3485  0456  0800               	movf	0,w	;code access
  3486  0457  3EF7               	addlw	247
  3487  0458  00A2               	movwf	??_atoi
  3488  0459  30FF               	movlw	255
  3489  045A  1803               	skipnc
  3490  045B  3000               	movlw	0
  3491  045C  00A3               	movwf	??_atoi+1
  3492  045D  3000               	movlw	0
  3493  045E  0223               	subwf	??_atoi+1,w
  3494  045F  3005               	movlw	5
  3495  0460  1903               	skipnz
  3496  0461  0222               	subwf	??_atoi,w
  3497  0462  1803               	btfsc	3,0
  3498  0463  01AC               	clrf	_atoi$804
  3499  0464                     l2216:
  3500  0464  082C               	movf	_atoi$804,w
  3501  0465  00A2               	movwf	??_atoi
  3502  0466  01A3               	clrf	??_atoi+1
  3503  0467  0822               	movf	??_atoi,w
  3504  0468  00A8               	movwf	_atoi$803
  3505  0469  0823               	movf	??_atoi+1,w
  3506  046A  00A9               	movwf	_atoi$803+1
  3507  046B  0828               	movf	_atoi$803,w
  3508  046C  0429               	iorwf	_atoi$803+1,w
  3509  046D  1903               	btfsc	3,2
  3510  046E  2C79               	goto	l2224
  3511  046F  3001               	movlw	1
  3512  0470  07A0               	addwf	atoi@s,f
  3513  0471  3000               	movlw	0
  3514  0472  3DA1               	addwfc	atoi@s+1,f
  3515  0473  2C48               	goto	l2208
  3516  0474                     l2222:
  3517  0474  3001               	movlw	1
  3518  0475  00A6               	movwf	atoi@neg
  3519  0476  3000               	movlw	0
  3520  0477  00A7               	movwf	atoi@neg+1
  3521  0478  2CAB               	goto	l769
  3522  0479                     l2224:
  3523  0479  0820               	movf	atoi@s,w
  3524  047A  0084               	movwf	4
  3525  047B  0821               	movf	atoi@s+1,w
  3526  047C  0085               	movwf	5
  3527  047D  0800               	movf	0,w	;code access
  3528  047E  00A2               	movwf	??_atoi
  3529  047F  01A3               	clrf	??_atoi+1
  3530                           
  3531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3532                           ; Switch size 1, requested type "simple"
  3533                           ; Number of cases is 1, Range of values is 0 to 0
  3534                           ; switch strategies available:
  3535                           ; Name         Instructions Cycles
  3536                           ; simple_byte            4     3 (average)
  3537                           ; direct_byte            8     6 (fixed)
  3538                           ; jumptable            260     6 (fixed)
  3539                           ;	Chosen strategy is simple_byte
  3540  0480  0823               	movf	??_atoi+1,w
  3541  0481  3A00               	xorlw	0	; case 0
  3542  0482  1903               	skipnz
  3543  0483  2C85               	goto	l2574
  3544  0484  2CAF               	goto	l2230
  3545  0485                     l2574:
  3546                           
  3547                           ; Switch size 1, requested type "simple"
  3548                           ; Number of cases is 2, Range of values is 43 to 45
  3549                           ; switch strategies available:
  3550                           ; Name         Instructions Cycles
  3551                           ; simple_byte            7     4 (average)
  3552                           ; direct_byte           15     9 (fixed)
  3553                           ; jumptable            263     9 (fixed)
  3554                           ;	Chosen strategy is simple_byte
  3555  0485  0822               	movf	??_atoi,w
  3556  0486  3A2B               	xorlw	43	; case 43
  3557  0487  1903               	skipnz
  3558  0488  2CAB               	goto	l769
  3559  0489  3A06               	xorlw	6	; case 45
  3560  048A  1903               	skipnz
  3561  048B  2C74               	goto	l2222
  3562  048C  2CAF               	goto	l2230
  3563  048D                     l2226:
  3564  048D  0820               	movf	atoi@s,w
  3565  048E  0084               	movwf	4
  3566  048F  0821               	movf	atoi@s+1,w
  3567  0490  0085               	movwf	5
  3568  0491  0800               	movf	0,w	;code access
  3569  0492  00A2               	movwf	??_atoi
  3570  0493  082E               	movf	atoi@n+1,w
  3571  0494  00F4               	movwf	___wmul@multiplier+1
  3572  0495  082D               	movf	atoi@n,w
  3573  0496  00F3               	movwf	___wmul@multiplier
  3574  0497  300A               	movlw	10
  3575  0498  00F5               	movwf	___wmul@multiplicand
  3576  0499  3000               	movlw	0
  3577  049A  00F6               	movwf	___wmul@multiplicand+1
  3578  049B  3186  26CB  3184   	fcall	___wmul
  3579  049E  0874               	movf	?___wmul+1,w
  3580  049F  00A4               	movwf	??_atoi+2
  3581  04A0  0822               	movf	??_atoi,w
  3582  04A1  0273               	subwf	?___wmul,w
  3583  04A2  00A3               	movwf	??_atoi+1
  3584  04A3  1C03               	skipc
  3585  04A4  03A4               	decf	??_atoi+2,f
  3586  04A5  0823               	movf	??_atoi+1,w
  3587  04A6  3E30               	addlw	48
  3588  04A7  00AD               	movwf	atoi@n
  3589  04A8  3000               	movlw	0
  3590  04A9  3D24               	addwfc	??_atoi+2,w
  3591  04AA  00AE               	movwf	atoi@n+1
  3592  04AB                     l769:
  3593  04AB  3001               	movlw	1
  3594  04AC  07A0               	addwf	atoi@s,f
  3595  04AD  3000               	movlw	0
  3596  04AE  3DA1               	addwfc	atoi@s+1,f
  3597  04AF                     l2230:
  3598  04AF  0820               	movf	atoi@s,w
  3599  04B0  0084               	movwf	4
  3600  04B1  0821               	movf	atoi@s+1,w
  3601  04B2  0085               	movwf	5
  3602  04B3  0800               	movf	0,w	;code access
  3603  04B4  3ED0               	addlw	208
  3604  04B5  00A2               	movwf	??_atoi
  3605  04B6  30FF               	movlw	255
  3606  04B7  1803               	skipnc
  3607  04B8  3000               	movlw	0
  3608  04B9  00A3               	movwf	??_atoi+1
  3609  04BA  3000               	movlw	0
  3610  04BB  0223               	subwf	??_atoi+1,w
  3611  04BC  300A               	movlw	10
  3612  04BD  1903               	skipnz
  3613  04BE  0222               	subwf	??_atoi,w
  3614  04BF  1803               	btfsc	3,0
  3615  04C0  2CC3               	goto	u1970
  3616  04C1  3001               	movlw	1
  3617  04C2  2CC4               	goto	u1980
  3618  04C3                     u1970:
  3619  04C3  3000               	movlw	0
  3620  04C4                     u1980:
  3621  04C4  00A4               	movwf	??_atoi+2
  3622  04C5  01A5               	clrf	??_atoi+3
  3623  04C6  0824               	movf	??_atoi+2,w
  3624  04C7  00AA               	movwf	_atoi$805
  3625  04C8  0825               	movf	??_atoi+3,w
  3626  04C9  00AB               	movwf	_atoi$805+1
  3627  04CA  082A               	movf	_atoi$805,w
  3628  04CB  042B               	iorwf	_atoi$805+1,w
  3629  04CC  1D03               	btfss	3,2
  3630  04CD  2C8D               	goto	l2226
  3631  04CE  0826               	movf	atoi@neg,w
  3632  04CF  0427               	iorwf	atoi@neg+1,w
  3633  04D0  1D03               	btfss	3,2
  3634  04D1  2CDE               	goto	l2240
  3635  04D2  092D               	comf	atoi@n,w
  3636  04D3  00A2               	movwf	??_atoi
  3637  04D4  092E               	comf	atoi@n+1,w
  3638  04D5  00A3               	movwf	??_atoi+1
  3639  04D6  0AA2               	incf	??_atoi,f
  3640  04D7  1903               	skipnz
  3641  04D8  0AA3               	incf	??_atoi+1,f
  3642  04D9  0822               	movf	??_atoi,w
  3643  04DA  00A0               	movwf	?_atoi
  3644  04DB  0823               	movf	??_atoi+1,w
  3645  04DC  00A1               	movwf	?_atoi+1
  3646  04DD  0008               	return
  3647  04DE                     l2240:
  3648  04DE  082E               	movf	atoi@n+1,w
  3649  04DF  00A1               	movwf	?_atoi+1
  3650  04E0  082D               	movf	atoi@n,w
  3651  04E1  00A0               	movwf	?_atoi
  3652  04E2  0008               	return
  3653  04E3                     __end_of_atoi:
  3654                           
  3655                           	psect	text17
  3656  06AF                     __ptext17:	
  3657 ;; *************** function _isspace *****************
  3658 ;; Defined at:
  3659 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/isspace.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  c               2    3[COMMON] int 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  2    3[COMMON] int 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3673 ;;      Params:         2       0       0       0       0       0       0       0
  3674 ;;      Locals:         1       0       0       0       0       0       0       0
  3675 ;;      Temps:          2       0       0       0       0       0       0       0
  3676 ;;      Totals:         5       0       0       0       0       0       0       0
  3677 ;;Total ram usage:        5 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    1
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_atoi
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _isspace
  3689  06AF                     _isspace:
  3690                           
  3691                           ;incstack = 0
  3692                           ; Regs used in _isspace: [wreg+status,2+status,0]
  3693  06AF  01F7               	clrf	_isspace$830
  3694  06B0  0AF7               	incf	_isspace$830,f
  3695  06B1  3020               	movlw	32
  3696  06B2  0673               	xorwf	isspace@c,w
  3697  06B3  0474               	iorwf	isspace@c+1,w
  3698  06B4  1903               	btfsc	3,2
  3699  06B5  2EC3               	goto	l1592
  3700  06B6  0873               	movf	isspace@c,w
  3701  06B7  3EF7               	addlw	247
  3702  06B8  00F5               	movwf	??_isspace
  3703  06B9  30FF               	movlw	255
  3704  06BA  3D74               	addwfc	isspace@c+1,w
  3705  06BB  00F6               	movwf	??_isspace+1
  3706  06BC  3000               	movlw	0
  3707  06BD  0276               	subwf	??_isspace+1,w
  3708  06BE  3005               	movlw	5
  3709  06BF  1903               	skipnz
  3710  06C0  0275               	subwf	??_isspace,w
  3711  06C1  1803               	btfsc	3,0
  3712  06C2  01F7               	clrf	_isspace$830
  3713  06C3                     l1592:
  3714  06C3  0877               	movf	_isspace$830,w
  3715  06C4  00F5               	movwf	??_isspace
  3716  06C5  01F6               	clrf	??_isspace+1
  3717  06C6  0875               	movf	??_isspace,w
  3718  06C7  00F3               	movwf	?_isspace
  3719  06C8  0876               	movf	??_isspace+1,w
  3720  06C9  00F4               	movwf	?_isspace+1
  3721  06CA  0008               	return
  3722  06CB                     __end_of_isspace:
  3723                           
  3724                           	psect	text18
  3725  072B                     __ptext18:	
  3726 ;; *************** function _isdigit *****************
  3727 ;; Defined at:
  3728 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/isdigit.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  c               2    3[COMMON] int 
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  2    3[COMMON] int 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3742 ;;      Params:         2       0       0       0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0
  3744 ;;      Temps:          4       0       0       0       0       0       0       0
  3745 ;;      Totals:         6       0       0       0       0       0       0       0
  3746 ;;Total ram usage:        6 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    1
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_vfpfcnvrt
  3753 ;;		_atoi
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _isdigit
  3759  072B                     _isdigit:
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3763  072B  0873               	movf	isdigit@c,w
  3764  072C  3ED0               	addlw	208
  3765  072D  00F5               	movwf	??_isdigit
  3766  072E  30FF               	movlw	255
  3767  072F  3D74               	addwfc	isdigit@c+1,w
  3768  0730  00F6               	movwf	??_isdigit+1
  3769  0731  3000               	movlw	0
  3770  0732  0276               	subwf	??_isdigit+1,w
  3771  0733  300A               	movlw	10
  3772  0734  1903               	skipnz
  3773  0735  0275               	subwf	??_isdigit,w
  3774  0736  1803               	btfsc	3,0
  3775  0737  2F3A               	goto	u1080
  3776  0738  3001               	movlw	1
  3777  0739  2F3B               	goto	u1090
  3778  073A                     u1080:
  3779  073A  3000               	movlw	0
  3780  073B                     u1090:
  3781  073B  00F7               	movwf	??_isdigit+2
  3782  073C  01F8               	clrf	??_isdigit+3
  3783  073D  0877               	movf	??_isdigit+2,w
  3784  073E  00F3               	movwf	?_isdigit
  3785  073F  0878               	movf	??_isdigit+3,w
  3786  0740  00F4               	movwf	?_isdigit+1
  3787  0741  0008               	return
  3788  0742                     __end_of_isdigit:
  3789                           
  3790                           	psect	text19
  3791  06CB                     __ptext19:	
  3792 ;; *************** function ___wmul *****************
  3793 ;; Defined at:
  3794 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c99/common/Umul16.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  multiplier      2    3[COMMON] unsigned int 
  3797 ;;  multiplicand    2    5[COMMON] unsigned int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  product         2    7[COMMON] unsigned int 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  2    3[COMMON] unsigned int 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0
  3804 ;; Tracked objects:
  3805 ;;		On entry : 1F/0
  3806 ;;		On exit  : 1F/0
  3807 ;;		Unchanged: 1F/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3809 ;;      Params:         4       0       0       0       0       0       0       0
  3810 ;;      Locals:         2       0       0       0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0
  3812 ;;      Totals:         6       0       0       0       0       0       0       0
  3813 ;;Total ram usage:        6 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_atoi
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function ___wmul
  3825  06CB                     ___wmul:
  3826                           
  3827                           ;incstack = 0
  3828                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3829  06CB  01F7               	clrf	___wmul@product
  3830  06CC  01F8               	clrf	___wmul@product+1
  3831  06CD                     l1530:
  3832  06CD  1C73               	btfss	___wmul@multiplier,0
  3833  06CE  2ED3               	goto	l177
  3834  06CF  0875               	movf	___wmul@multiplicand,w
  3835  06D0  07F7               	addwf	___wmul@product,f
  3836  06D1  0876               	movf	___wmul@multiplicand+1,w
  3837  06D2  3DF8               	addwfc	___wmul@product+1,f
  3838  06D3                     l177:
  3839  06D3  3001               	movlw	1
  3840  06D4                     u945:
  3841  06D4  35F5               	lslf	___wmul@multiplicand,f
  3842  06D5  0DF6               	rlf	___wmul@multiplicand+1,f
  3843  06D6  0B89               	decfsz	9,f
  3844  06D7  2ED4               	goto	u945
  3845  06D8  3001               	movlw	1
  3846  06D9                     u955:
  3847  06D9  36F4               	lsrf	___wmul@multiplier+1,f
  3848  06DA  0CF3               	rrf	___wmul@multiplier,f
  3849  06DB  0B89               	decfsz	9,f
  3850  06DC  2ED9               	goto	u955
  3851  06DD  0873               	movf	___wmul@multiplier,w
  3852  06DE  0474               	iorwf	___wmul@multiplier+1,w
  3853  06DF  1D03               	btfss	3,2
  3854  06E0  2ECD               	goto	l1530
  3855  06E1  0878               	movf	___wmul@product+1,w
  3856  06E2  00F4               	movwf	?___wmul+1
  3857  06E3  0877               	movf	___wmul@product,w
  3858  06E4  00F3               	movwf	?___wmul
  3859  06E5  0008               	return
  3860  06E6                     __end_of___wmul:
  3861                           
  3862                           	psect	intentry
  3863  0004                     __pintentry:	
  3864 ;; *************** function _ISR *****************
  3865 ;; Defined at:
  3866 ;;		line 84 in file "main.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  time            1    2[COMMON] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 1C/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3880 ;;      Params:         0       0       0       0       0       0       0       0
  3881 ;;      Locals:         1       0       0       0       0       0       0       0
  3882 ;;      Temps:          2       0       0       0       0       0       0       0
  3883 ;;      Totals:         3       0       0       0       0       0       0       0
  3884 ;;Total ram usage:        3 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		Interrupt level 1
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893  0004                     _ISR:
  3894                           
  3895                           ;incstack = 0
  3896  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3897                           
  3898                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0]
  3899  0005  3180               	pagesel	$
  3900                           
  3901                           ;main.c: 86:   uint8_t time = TMR0;
  3902  0006  0020               	movlb	0	; select bank0
  3903  0007  0815               	movf	21,w	;volatile
  3904  0008  00F0               	movwf	??_ISR
  3905  0009  0870               	movf	??_ISR,w
  3906  000A  00F2               	movwf	ISR@time
  3907                           
  3908                           ;main.c: 87:   TMR0 = 0;
  3909  000B  0195               	clrf	21	;volatile
  3910                           
  3911                           ;main.c: 90:   if (INTCONbits.TMR0IF){
  3912  000C  190B               	btfsc	11,2	;volatile
  3913                           
  3914                           ;main.c: 91:     time = 0;
  3915  000D  01F2               	clrf	ISR@time
  3916                           
  3917                           ;main.c: 93:   INTCONbits.TMR0IF = 0;
  3918  000E  110B               	bcf	11,2	;volatile
  3919                           
  3920                           ;main.c: 95:   switch(ir_code.state){
  3921  000F  2864               	goto	i1l1918
  3922  0010                     i1l1874:
  3923                           
  3924                           ;main.c: 98:     if (time >= 195 && time <= 239){
  3925  0010  30C3               	movlw	195
  3926  0011  0272               	subwf	ISR@time,w
  3927  0012  1C03               	skipc
  3928  0013  2878               	goto	i1l75
  3929  0014  30F0               	movlw	240
  3930  0015  0272               	subwf	ISR@time,w
  3931  0016  1803               	skipnc
  3932  0017  2878               	goto	i1l75
  3933                           
  3934                           ;main.c: 99:       ir_code.n_bits = 0;
  3935  0018  01C6               	clrf	_ir_code^(0+128)
  3936                           
  3937                           ;main.c: 100:       ir_code.state = STATE_RECEIVING;
  3938  0019  01C7               	clrf	(_ir_code^(0+128)+1)
  3939  001A  0AC7               	incf	(_ir_code^(0+128)+1),f
  3940                           
  3941                           ;main.c: 101:       stats[0] = time;
  3942  001B  0872               	movf	ISR@time,w
  3943  001C  00F0               	movwf	??_ISR
  3944  001D  0870               	movf	??_ISR,w
  3945  001E  0022               	movlb	2	; select bank2
  3946  001F  00A0               	movwf	_stats^(0+256)
  3947  0020  2878               	goto	i1l75
  3948  0021                     i1l1884:
  3949                           
  3950                           ;main.c: 106:     ir_code.code <<= 1;
  3951  0021  3001               	movlw	1
  3952  0022                     u158_25:
  3953  0022  35C8               	lslf	(_ir_code^(0+128)+2),f
  3954  0023  0DC9               	rlf	((_ir_code+1)^(0+128)+2),f
  3955  0024  0DCA               	rlf	((_ir_code+2)^(0+128)+2),f
  3956  0025  0DCB               	rlf	((_ir_code+3)^(0+128)+2),f
  3957  0026  0B89               	decfsz	9,f
  3958  0027  2822               	goto	u158_25
  3959                           
  3960                           ;main.c: 107:     if (time >= 32 && time <= 39){
  3961  0028  3020               	movlw	32
  3962  0029  0272               	subwf	ISR@time,w
  3963  002A  1C03               	skipc
  3964  002B  283F               	goto	i1l1896
  3965  002C  3028               	movlw	40
  3966  002D  0272               	subwf	ISR@time,w
  3967  002E  1803               	skipnc
  3968  002F  283F               	goto	i1l1896
  3969                           
  3970                           ;main.c: 108:       stats[1+ir_code.n_bits] = time;
  3971  0030  0872               	movf	ISR@time,w
  3972  0031  00F0               	movwf	??_ISR
  3973  0032  0846               	movf	_ir_code^(0+128),w
  3974  0033  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  3975  0034  0086               	movwf	6
  3976  0035  3001               	movlw	1	; select bank2/3
  3977  0036  0087               	movwf	7
  3978  0037  0870               	movf	??_ISR,w
  3979  0038  0081               	movwf	1
  3980                           
  3981                           ;main.c: 109:       ir_code.code |= 1;
  3982  0039  1448               	bsf	(_ir_code^(0+128)+2),0
  3983  003A                     i1l1894:
  3984                           
  3985                           ;main.c: 110:       ir_code.n_bits++;
  3986  003A  3001               	movlw	1
  3987  003B  00F0               	movwf	??_ISR
  3988  003C  0870               	movf	??_ISR,w
  3989  003D  07C6               	addwf	_ir_code^(0+128),f
  3990                           
  3991                           ;main.c: 111:     } else if (time >= 16 && time <= 20){
  3992  003E  2853               	goto	i1l1906
  3993  003F                     i1l1896:
  3994  003F  3010               	movlw	16
  3995  0040  0272               	subwf	ISR@time,w
  3996  0041  1C03               	skipc
  3997  0042  2851               	goto	i1l1904
  3998  0043  3015               	movlw	21
  3999  0044  0272               	subwf	ISR@time,w
  4000  0045  1803               	skipnc
  4001  0046  2851               	goto	i1l1904
  4002                           
  4003                           ;main.c: 112:       stats[1+ir_code.n_bits] = time;
  4004  0047  0872               	movf	ISR@time,w
  4005  0048  00F0               	movwf	??_ISR
  4006  0049  0846               	movf	_ir_code^(0+128),w
  4007  004A  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  4008  004B  0086               	movwf	6
  4009  004C  3001               	movlw	1	; select bank2/3
  4010  004D  0087               	movwf	7
  4011  004E  0870               	movf	??_ISR,w
  4012  004F  0081               	movwf	1
  4013  0050  283A               	goto	i1l1894
  4014  0051                     i1l1904:
  4015                           
  4016                           ;main.c: 116:       ir_code.state = STATE_RESET;
  4017  0051  01C7               	clrf	(_ir_code^(0+128)+1)
  4018                           
  4019                           ;main.c: 117:       break;
  4020  0052  2878               	goto	i1l75
  4021  0053                     i1l1906:
  4022                           
  4023                           ;main.c: 119:     if (32 == ir_code.n_bits){
  4024  0053  3020               	movlw	32
  4025  0054  0646               	xorwf	_ir_code^(0+128),w
  4026  0055  1D03               	btfss	3,2
  4027  0056  2878               	goto	i1l75
  4028                           
  4029                           ;main.c: 121:       if ( (ir_code.address == ((~ir_code.address_b) & 0xff)) &&
  4030  0057  094A               	comf	(_ir_code^(0+128)+4),w
  4031  0058  064B               	xorwf	(_ir_code^(0+128)+5),w
  4032  0059  1D03               	skipz
  4033  005A  2851               	goto	i1l1904
  4034  005B  0948               	comf	(_ir_code^(0+128)+2),w
  4035  005C  0649               	xorwf	(_ir_code^(0+128)+3),w
  4036  005D  1D03               	skipz
  4037  005E  2851               	goto	i1l1904
  4038                           
  4039                           ;main.c: 122:            (ir_code.command == ((~ir_code.command_b) & 0xff)) ){;main.c: 1
      +                          23:         ir_code.state = STATE_DONE;
  4040  005F  3002               	movlw	2
  4041  0060  00F0               	movwf	??_ISR
  4042  0061  0870               	movf	??_ISR,w
  4043  0062  00C7               	movwf	(_ir_code^(0+128)+1)
  4044                           
  4045                           ;main.c: 124:       } else {
  4046  0063  2878               	goto	i1l75
  4047  0064                     i1l1918:
  4048  0064  0021               	movlb	1	; select bank1
  4049  0065  0847               	movf	(_ir_code^(0+128)+1),w
  4050  0066  00F0               	movwf	??_ISR
  4051  0067  01F1               	clrf	??_ISR+1
  4052                           
  4053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4054                           ; Switch size 1, requested type "simple"
  4055                           ; Number of cases is 1, Range of values is 0 to 0
  4056                           ; switch strategies available:
  4057                           ; Name         Instructions Cycles
  4058                           ; simple_byte            4     3 (average)
  4059                           ; direct_byte            8     6 (fixed)
  4060                           ; jumptable            260     6 (fixed)
  4061                           ;	Chosen strategy is simple_byte
  4062  0068  0871               	movf	??_ISR+1,w
  4063  0069  3A00               	xorlw	0	; case 0
  4064  006A  1903               	skipnz
  4065  006B  286D               	goto	i1l2576
  4066  006C  2851               	goto	i1l1904
  4067  006D                     i1l2576:
  4068                           
  4069                           ; Switch size 1, requested type "simple"
  4070                           ; Number of cases is 3, Range of values is 0 to 2
  4071                           ; switch strategies available:
  4072                           ; Name         Instructions Cycles
  4073                           ; simple_byte           10     6 (average)
  4074                           ; direct_byte           12     6 (fixed)
  4075                           ; jumptable            260     6 (fixed)
  4076                           ;	Chosen strategy is simple_byte
  4077  006D  0870               	movf	??_ISR,w
  4078  006E  3A00               	xorlw	0	; case 0
  4079  006F  1903               	skipnz
  4080  0070  2810               	goto	i1l1874
  4081  0071  3A01               	xorlw	1	; case 1
  4082  0072  1903               	skipnz
  4083  0073  2821               	goto	i1l1884
  4084  0074  3A03               	xorlw	3	; case 2
  4085  0075  1903               	skipnz
  4086  0076  2878               	goto	i1l75
  4087  0077  2851               	goto	i1l1904
  4088  0078                     i1l75:
  4089                           
  4090                           ;main.c: 138:   INTCONbits.INTF = 0;
  4091  0078  108B               	bcf	11,1	;volatile
  4092  0079  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4093  007A  0009               	retfie
  4094  007B                     __end_of_ISR:
  4095  007E                     btemp	set	126	;btemp
  4096  007E                     int$flags	set	126
  4097  007E                     wtemp0	set	126
  4098                           
  4099                           	psect	config
  4100                           
  4101                           ;Config register CONFIG1 @ 0x8007
  4102                           ;	Oscillator Selection Bits
  4103                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  4104                           ;	Watchdog Timer Enable
  4105                           ;	WDTE = OFF, WDT disabled
  4106                           ;	Power-up Timer Enable
  4107                           ;	PWRTE = OFF, PWRT disabled
  4108                           ;	MCLR Pin Function Select
  4109                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4110                           ;	Flash Program Memory Code Protection
  4111                           ;	CP = OFF, Program memory code protection is disabled
  4112                           ;	Brown-out Reset Enable
  4113                           ;	BOREN = OFF, Brown-out Reset disabled
  4114                           ;	Clock Out Enable
  4115                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  4116                           ;	Internal/External Switchover Mode
  4117                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  4118                           ;	Fail-Safe Clock Monitor Enable
  4119                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  4120  8007                     	org	32775
  4121  8007  21E4               	dw	8676
  4122                           
  4123                           ;Config register CONFIG2 @ 0x8008
  4124                           ;	Flash Memory Self-Write Protection
  4125                           ;	WRT = OFF, Write protection off
  4126                           ;	Peripheral Pin Select one-way control
  4127                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
  4128                           ;	Zero-cross detect disable
  4129                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
  4130                           ;	Phase Lock Loop enable
  4131                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
  4132                           ;	Stack Overflow/Underflow Reset Enable
  4133                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4134                           ;	Brown-out Reset Voltage Selection
  4135                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  4136                           ;	Low-Power Brown Out Reset
  4137                           ;	LPBOR = OFF, Low-Power BOR is disabled
  4138                           ;	Low-Voltage Programming Enable
  4139                           ;	LVP = ON, Low-voltage programming enabled
  4140  8008                     	org	32776
  4141  8008  3EFF               	dw	16127

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         79
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     80      80
    BANK1            80     24      68
    BANK2            80      0      33
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_4(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_4(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S668_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_isdigit
    _vfpfcnvrt->_strncmp
    _xtoa->_isupper
    _xtoa->_pad
    _toupper->_islower
    _pad->_fputs
    _pad->_strlen
    _fputs->_fputc
    _fputc->_putch
    _atoi->___wmul
    _atoi->_isdigit

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _vfprintf->_vfpfcnvrt

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11158
                             _printf
             _process_remote_command
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0      58
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     4      6   11100
                                             14 BANK1     10     4      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3   10903
                                             72 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           49    47      2   10348
                                             58 BANK0     14    12      2
                                              0 BANK1     14    14      0
                               _atoi
                              _fputc
                            _isdigit
                            _strncmp
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                38    29      9    5332
                                             20 BANK0     38    29      9
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (5) _toupper                                              8     6      2     536
                                              0 BANK0      8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (6) _islower                                              6     4      2     187
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2970
                                              8 COMMON     1     1      0
                                             12 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     126
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1320
                                              7 COMMON     1     0      1
                                              5 BANK0      7     7      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     894
                                              4 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     187
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              8     6      2     219
                                              3 COMMON     2     0      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _strncmp                                             11     5      6     949
                                              3 COMMON     6     0      6
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1356
                                              0 BANK0     15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     233
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     276
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     270
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  3     3      0     200
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
         _isdigit
         _strncmp
         _xtoa
           _isalpha
           _isupper
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
           _toupper
             _islower
   _process_remote_command

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     18      44       8       85.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      21      10       41.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Jun  1 10:56:48 2020

                             l89 0777              ___wmul@multiplicand 0075                              l100 0757  
                            l177 06D3                              l710 0417                              l721 00C2  
                            l722 00C4                              l723 00C6                              l724 00C8  
                            l726 00FA                              l719 00B8                              l680 05D4  
                            l681 05DF                              l677 05B4                              l685 02FF  
                            l769 04AB                              l689 031A                              _ISR 0004  
                            u910 06F5                              u920 06F6                              u945 06D4  
                            u955 06D9                              u885 0614                              _pad 05A0  
                            wreg 0009                             ?_ISR 0070                             l2110 05AB  
                           l2104 064F                             l2120 05B6                             l2200 0432  
                           l2114 05B2                             l2300 0100                             l2230 04AF  
                           l2222 0474                             l1502 0616                             l2240 04DE  
                           l2224 0479                             l2216 0464                             l2208 0448  
                           l1520 070D                             l2160 0359                             l2152 0328  
                           l2312 012E                             l1530 06CD                             l2226 048D  
                           l2146 0312                             l2314 0140                             l2322 0173  
                           l2260 0563                             l2156 033F                             l2340 0218  
                           l2316 0149                             l1518 0702                             l2350 029D  
                           l2326 0192                             l2176 03A6                             l2184 03E7  
                           l2360 02C6                             l2336 01EC                             l2280 00B9  
                           l2266 058F                             l2258 0588                             l2290 00CA  
                           l2356 02C0                             l2366 02D1                             l1592 06C3  
                           l2296 00CF                             l2464 052F                             l1498 05F3  
                           l2386 0627                             l2570 074F                             l2572 00E8  
                           l2388 0643                             l2574 0485                             ?_pad 002C  
                           STR_1 076D                             STR_2 0787                             STR_4 0787  
                           STR_6 0784                             STR_8 0784                             u1010 0723  
                           u1020 0724                             u2110 0165                             u1080 073A  
                           u2120 0166                             u1090 073B                             u1720 06A7  
                           u1705 05C0                             u1730 06A8                             u1810 0370  
                           u1740 067F                             u1820 0371                             u1805 0353  
                           u1750 0680                             u1840 0390                             u1905 0407  
                           u1850 0391                             u1915 0413                             u1785 030A  
                           u1970 04C3                             u1875 03CB                             u1980 04C4  
                           u1885 03F1                             i1l75 0078                             _TMR0 0015  
                           _WPUA 020C                             _WPUB 020D                             _WPUC 020E  
                           _dbuf 00A6                             _atoi 0444                             _main 04E3  
                           _prec 00A4                             _nout 00A0                             pad@i 002F  
                           pad@p 002D                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             pad@w 0031                             btemp 007E  
                           _xtoa 02F6                             start 007B                      _toupper$885 0026  
                          ??_ISR 0070                            ??_pad 0078                            ?_atoi 0020  
                          ?_main 0070                            ?_xtoa 0034                     vfpfcnvrt@fmt 005A  
                   vfpfcnvrt@llu 00D0                            _SPBRG 019B                            _TRISA 008C  
                          _TRISB 008D                            _TRISC 008E                            _TXREG 019A  
                          _flags 0079                            _fputc 05EA                  __end_of_isalpha 06AF  
                          _fputs 064C                  __end_of_isdigit 0742                            atoi@n 002D  
                          pad@fp 0033                            atoi@s 0020                            _width 00A2  
                          _putch 0776                            _stats 0120                  __end_of_islower 06FD  
                __end_of_isspace 06CB                  __end_of_isupper 072B                            status 0003  
        ?_process_remote_command 0070                            wtemp0 007E                            xtoa@c 0058  
                          xtoa@d 0034                            xtoa@i 0056                            xtoa@n 004E  
                          xtoa@p 0049                            xtoa@w 004C                            xtoa@x 003C  
                __end_of_strncmp 05A0                  __end_of_toupper 0691                  __initialization 007D  
                   __end_of_atoi 04E3                     __end_of_main 054E                     __end_of_xtoa 0444  
                         ??_atoi 0022                           ??_main 0079                           ??_xtoa 003D  
                         ?_fputc 0074                           ?_fputs 0077                           _ANSELA 018C  
                         ?_putch 0070                           _ANSELB 018D                           _ANSELC 018E  
                         _RB7PPS 0E9F                           _ODCONA 028C                           _ODCONB 028D  
                         _ODCONC 028E   __end_of_process_remote_command 0758                           i1l1904 0051  
                         i1l1906 0053                           i1l1918 0064                           i1l2576 006D  
                         i1l1874 0010                           i1l1884 0021                           i1l1894 003A  
                         i1l1896 003F                           _INLVLA 038C                           _INLVLB 038D  
                         _INLVLC 038E                           u158_25 0022                           _INTPPS 0E10  
                  vfpfcnvrt@done 00CC                     vfprintf@cfmt 006E                           ___wmul 06CB  
                         _printf 0758                           pad@buf 002C                           _strlen 06FD  
                         fputc@c 0074                           fputs@c 0028                           fputs@i 0029  
                         fputs@s 002B                        ??_isalpha 0020                        ??_isdigit 0075  
                      ??_islower 0075                        ??_isspace 0075                        ??_isupper 0075  
               __end_of_vfprintf 064C                           xtoa@fp 004B                        ??_strncmp 0020  
                      ??_toupper 0022          __end_of__initialization 008E                   __pcstackCOMMON 0070  
                  __end_of_fputc 061F                    __end_of_fputs 0670                    __end_of_putch 077E  
                 _OPTION_REGbits 0095                          ??_fputc 0020                          ??_fputs 0025  
                        ??_putch 0073                       __pbssBANK1 00A0                       __pbssBANK2 0120  
                        ISR@time 0072                       __pmaintext 04E3                          ?___wmul 0073  
                     __pintentry 0004                          ?_printf 00DA                          ?_strlen 0073  
             __size_of_vfpfcnvrt 0264                          _SLRCONA 030C                          _SLRCONB 030D  
                        _SLRCONC 030E                  __size_of___wmul 001B                        ?_vfprintf 0068  
                        __ptext1 0742                          __ptext2 0758                          __ptext3 061F  
                        __ptext4 0092                          __ptext5 02F6                          __ptext6 0670  
                        __ptext7 06E6                          __ptext8 05A0                          __ptext9 06FD  
                __size_of_printf 0015                  __size_of_strlen 0017                     __size_of_ISR 0077  
                        _ir_code 00C6                     __size_of_pad 004A                          _isalpha 0691  
                        _isdigit 072B                          _islower 06E6                          _isspace 06AF  
                        _isupper 0714                          atoi@neg 0026                          clrloop0 077F  
                        _strncmp 054E                          _toupper 0670             end_of_initialization 008E  
                        fputc@fp 0076                          fputs@fp 0077                __end_of_vfpfcnvrt 02F6  
                      _RCSTAbits 019D                       ??_vfprintf 006B                          strlen@a 0076  
                        strlen@s 0077                        _TXSTAbits 019E                      vfpfcnvrt@ap 005B  
                    vfpfcnvrt@fp 00D9                   __end_of___wmul 06E6                      _BAUDCONbits 019F  
                 __end_of_printf 076D                   __end_of_strlen 0714              start_initialization 007D  
                    __end_of_ISR 007B                      __end_of_pad 05EA                      vfprintf@fmt 0068  
                       ??___wmul 0077                         ??_printf 00E0                         ??_strlen 0075  
                    __pbssCOMMON 0079                        ___latbits 0001         ??_process_remote_command 0073  
                  __pcstackBANK0 0020                    __pcstackBANK1 00CC                __size_of_vfprintf 002D  
                       ?_isalpha 0073                         ?_isdigit 0073                         ?_islower 0073  
                       ?_isspace 0073                         ?_isupper 0073                   __size_of_fputc 0035  
                 __size_of_fputs 0024                         ?_strncmp 0073                         ?_toupper 0020  
                 __size_of_putch 0008                   ___wmul@product 0077                        clear_ram0 077E  
                       _PIR1bits 0011                        _vfpfcnvrt 0092                ___wmul@multiplier 0073  
__size_of_process_remote_command 0016                       vfpfcnvrt@c 00D8                       putch@value 0073  
                     vfprintf@ap 006A                       vfprintf@fp 006D                       ?_vfpfcnvrt 005A  
                       _atoi$803 0028                         _atoi$804 002C                         _atoi$805 002A  
               __size_of_isalpha 001E                 __size_of_isdigit 0017                 __size_of_islower 0017  
               __size_of_isspace 001C                         __ptext10 064C                         __ptext11 05EA  
                       __ptext12 0776                         __ptext13 0714                         __ptext14 0691  
                       __ptext15 054E                         __ptext16 0444                         __ptext17 06AF  
                       __ptext18 072B                         __ptext19 06CB                 __size_of_isupper 0017  
               __size_of_strncmp 0052                 __size_of_toupper 0021                    __size_of_atoi 009F  
                  __size_of_main 006B                    __size_of_xtoa 014E           _process_remote_command 0742  
                       int$flags 007E                         _xtoa$760 0045                         _xtoa$761 0047  
                       _vfprintf 061F                        printf@fmt 00DA                      _isspace$830 0077  
                     _INTCONbits 000B                         isalpha@c 0073                         isdigit@c 0073  
                       intlevel1 0000                         islower@c 0073                         isspace@c 0073  
     process_remote_command@code 0075                         isupper@c 0073                        strncmp@_l 0073  
                      strncmp@_r 0075                       _OSCCONbits 0099                         printf@ap 00E3  
                    ??_vfpfcnvrt 005C                    _vfpfcnvrt$776 00CE                    __pstringtext1 076D  
                  __pstringtext2 0784                    __pstringtext3 0787                    __pstringtext4 0000  
                       strncmp@l 0021                         strncmp@n 0077                         strncmp@r 0023  
                       toupper@c 0020  
