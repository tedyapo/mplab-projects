

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jun 18 00:20:13 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	12F1572
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12F1572 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  008C                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0097                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0197                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019C                     	;# 
   119  019D                     	;# 
   120  019E                     	;# 
   121  019F                     	;# 
   122  020C                     	;# 
   123  028C                     	;# 
   124  030C                     	;# 
   125  038C                     	;# 
   126  0391                     	;# 
   127  0392                     	;# 
   128  0393                     	;# 
   129  0691                     	;# 
   130  0692                     	;# 
   131  0693                     	;# 
   132  0694                     	;# 
   133  0695                     	;# 
   134  0D8E                     	;# 
   135  0D8F                     	;# 
   136  0D90                     	;# 
   137  0D91                     	;# 
   138  0D91                     	;# 
   139  0D92                     	;# 
   140  0D93                     	;# 
   141  0D93                     	;# 
   142  0D94                     	;# 
   143  0D95                     	;# 
   144  0D95                     	;# 
   145  0D96                     	;# 
   146  0D97                     	;# 
   147  0D97                     	;# 
   148  0D98                     	;# 
   149  0D99                     	;# 
   150  0D99                     	;# 
   151  0D9A                     	;# 
   152  0D9B                     	;# 
   153  0D9C                     	;# 
   154  0D9C                     	;# 
   155  0D9D                     	;# 
   156  0D9D                     	;# 
   157  0D9E                     	;# 
   158  0D9F                     	;# 
   159  0DA0                     	;# 
   160  0DA1                     	;# 
   161  0DA1                     	;# 
   162  0DA2                     	;# 
   163  0DA3                     	;# 
   164  0DA3                     	;# 
   165  0DA4                     	;# 
   166  0DA5                     	;# 
   167  0DA5                     	;# 
   168  0DA6                     	;# 
   169  0DA7                     	;# 
   170  0DA7                     	;# 
   171  0DA8                     	;# 
   172  0DA9                     	;# 
   173  0DA9                     	;# 
   174  0DAA                     	;# 
   175  0DAB                     	;# 
   176  0DAC                     	;# 
   177  0DAC                     	;# 
   178  0DAD                     	;# 
   179  0DAD                     	;# 
   180  0DAE                     	;# 
   181  0DAF                     	;# 
   182  0DB0                     	;# 
   183  0DB1                     	;# 
   184  0DB1                     	;# 
   185  0DB2                     	;# 
   186  0DB3                     	;# 
   187  0DB3                     	;# 
   188  0DB4                     	;# 
   189  0DB5                     	;# 
   190  0DB5                     	;# 
   191  0DB6                     	;# 
   192  0DB7                     	;# 
   193  0DB7                     	;# 
   194  0DB8                     	;# 
   195  0DB9                     	;# 
   196  0DB9                     	;# 
   197  0DBA                     	;# 
   198  0DBB                     	;# 
   199  0DBC                     	;# 
   200  0DBC                     	;# 
   201  0DBD                     	;# 
   202  0DBD                     	;# 
   203  0DBE                     	;# 
   204  0DBF                     	;# 
   205  0DC0                     	;# 
   206  0FE4                     	;# 
   207  0FE5                     	;# 
   208  0FE6                     	;# 
   209  0FE7                     	;# 
   210  0FE8                     	;# 
   211  0FE8                     	;# 
   212  0FE9                     	;# 
   213  0FEA                     	;# 
   214  0FEA                     	;# 
   215  0FEB                     	;# 
   216  0FED                     	;# 
   217  0FEE                     	;# 
   218  0FEE                     	;# 
   219  0FEF                     	;# 
   220  008D                     _RCIF	set	141
   221  008C                     _TXIF	set	140
   222  008C                     _TRISA	set	140
   223  04B8                     _SWDTEN	set	1208
   224  04AF                     _nWPUEN	set	1199
   225  011D                     _APFCON	set	285
   226  010C                     _LATA	set	268
   227  0199                     _RCREG	set	409
   228  019A                     _TXREG	set	410
   229  018C                     _ANSELA	set	396
   230  0CE9                     _OERR	set	3305
   231  0CEA                     _FERR	set	3306
   232  038C                     _INLVLA	set	908
   233                           
   234                           	psect	cinit
   235  07FE                     start_initialization:	
   236                           ; #config settings
   237                           
   238  07FE                     __initialization:
   239  07FE                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242  07FE                     __end_of__initialization:
   243  07FE  0020               	movlb	0
   244  07FF  2ED7               	ljmp	_main	;jump to C main() function
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:
   248  0070                     ?_setup:
   249  0070                     ??_setup:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_transmit:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ??_transmit:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_send_packet:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_receive:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_set_pwm8:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_set_pwm16:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_process_packet:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_mainloop:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_main:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     transmit@c:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     set_pwm8@red:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     set_pwm8@green:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     set_pwm16@red:	
   289                           ; 1 bytes @ 0x0
   290                           
   291                           
   292                           ; 2 bytes @ 0x0
   293  0070                     	ds	1
   294  0071                     ??_send_packet:
   295  0071                     set_pwm8@blue:	
   296                           ; 1 bytes @ 0x1
   297                           
   298                           
   299                           ; 1 bytes @ 0x1
   300  0071                     	ds	1
   301  0072                     ??_set_pwm8:
   302  0072                     send_packet@i:	
   303                           ; 1 bytes @ 0x2
   304                           
   305  0072                     set_pwm16@green:	
   306                           ; 1 bytes @ 0x2
   307                           
   308                           
   309                           ; 2 bytes @ 0x2
   310  0072                     	ds	1
   311  0073                     send_packet@packet:
   312                           
   313                           ; 1 bytes @ 0x3
   314  0073                     	ds	1
   315  0074                     ??_receive:
   316  0074                     set_pwm16@blue:	
   317                           ; 1 bytes @ 0x4
   318                           
   319                           
   320                           ; 2 bytes @ 0x4
   321  0074                     	ds	1
   322  0075                     receive@packet:
   323                           
   324                           ; 9 bytes @ 0x5
   325  0075                     	ds	1
   326  0076                     ??_set_pwm16:
   327  0076                     ??_process_packet:	
   328                           ; 1 bytes @ 0x6
   329                           
   330                           
   331                           ; 1 bytes @ 0x6
   332  0076                     	ds	3
   333  0079                     process_packet@packet:
   334                           
   335                           ; 1 bytes @ 0x9
   336  0079                     	ds	5
   337  007E                     ??_main:
   338                           
   339                           	psect	cstackBANK0
   340  0020                     __pcstackBANK0:	
   341                           ; 1 bytes @ 0xE
   342                           
   343  0020                     ??_mainloop:
   344                           
   345                           ; 1 bytes @ 0x0
   346  0020                     	ds	1
   347  0021                     mainloop@c:
   348                           
   349                           ; 1 bytes @ 0x1
   350  0021                     	ds	1
   351  0022                     mainloop@i_145:
   352                           
   353                           ; 1 bytes @ 0x2
   354  0022                     	ds	1
   355  0023                     mainloop@i:
   356                           
   357                           ; 1 bytes @ 0x3
   358  0023                     	ds	1
   359  0024                     mainloop@i_144:
   360                           
   361                           ; 1 bytes @ 0x4
   362  0024                     	ds	1
   363  0025                     mainloop@packet:
   364                           
   365                           ; 9 bytes @ 0x5
   366  0025                     	ds	9
   367                           
   368                           	psect	maintext
   369  06D7                     __pmaintext:	
   370 ;;
   371 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   372 ;;
   373 ;; *************** function _main *****************
   374 ;; Defined at:
   375 ;;		line 218 in file "main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;		None
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : B1F/0
   386 ;;		On exit  : 1F/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   389 ;;      Params:         0       0       0       0
   390 ;;      Locals:         0       0       0       0
   391 ;;      Temps:          0       0       0       0
   392 ;;      Totals:         0       0       0       0
   393 ;;Total ram usage:        0 bytes
   394 ;; Hardware stack levels required when called:    4
   395 ;; This function calls:
   396 ;;		_mainloop
   397 ;;		_setup
   398 ;; This function is called by:
   399 ;;		Startup code after reset
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _main
   405  06D7                     _main:
   406                           
   407                           ;main.c: 220:   setup();
   408                           
   409                           ;incstack = 0
   410                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   411  06D7  26E3               	fcall	_setup
   412                           
   413                           ;main.c: 221:   mainloop();
   414  06D8  2783               	fcall	_mainloop
   415  06D9  2801               	ljmp	start
   416  06DA                     __end_of_main:
   417                           
   418                           	psect	text1
   419  06E3                     __ptext1:	
   420 ;; *************** function _setup *****************
   421 ;; Defined at:
   422 ;;		line 33 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, status,2
   431 ;; Tracked objects:
   432 ;;		On entry : B1F/0
   433 ;;		On exit  : B1F/2
   434 ;;		Unchanged: B00/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   436 ;;      Params:         0       0       0       0
   437 ;;      Locals:         0       0       0       0
   438 ;;      Temps:          0       0       0       0
   439 ;;      Totals:         0       0       0       0
   440 ;;Total ram usage:        0 bytes
   441 ;; Hardware stack levels used:    1
   442 ;; This function calls:
   443 ;;		Nothing
   444 ;; This function is called by:
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           
   450                           ;psect for function _setup
   451  06E3                     _setup:
   452                           
   453                           ;main.c: 44:   ANSELA = 0b00000000;
   454                           
   455                           ;incstack = 0
   456                           ; Regs used in _setup: [wreg+status,2]
   457  06E3  0023               	movlb	3	; select bank3
   458  06E4  018C               	clrf	12	;volatile
   459                           
   460                           ;main.c: 45:   LATA = 0b00000000;
   461  06E5  0022               	movlb	2	; select bank2
   462  06E6  018C               	clrf	12	;volatile
   463                           
   464                           ;main.c: 46:   TRISA = 0b00000010;
   465  06E7  3002               	movlw	2
   466  06E8  0021               	movlb	1	; select bank1
   467  06E9  008C               	movwf	12	;volatile
   468                           
   469                           ;main.c: 47:   INLVLA = 0b00000010;
   470  06EA  3002               	movlw	2
   471  06EB  0027               	movlb	7	; select bank7
   472  06EC  008C               	movwf	12	;volatile
   473                           
   474                           ;main.c: 48:   nWPUEN = 1;
   475  06ED  0021               	movlb	1	; select bank1
   476  06EE  1795               	bsf	21,7	;volatile
   477                           
   478                           ;main.c: 51:   APFCON = 0b00000011;
   479  06EF  3003               	movlw	3
   480  06F0  0022               	movlb	2	; select bank2
   481  06F1  009D               	movwf	29	;volatile
   482  06F2  0008               	return
   483  06F3                     __end_of_setup:
   484                           
   485                           	psect	text2
   486  0783                     __ptext2:	
   487 ;; *************** function _mainloop *****************
   488 ;; Defined at:
   489 ;;		line 172 in file "main.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  c               1    1[BANK0 ] unsigned char 
   494 ;;  i               1    2[BANK0 ] unsigned char 
   495 ;;  i               1    4[BANK0 ] unsigned char 
   496 ;;  i               1    3[BANK0 ] unsigned char 
   497 ;;  packet          9    5[BANK0 ] struct .
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B1F/2
   504 ;;		On exit  : 1F/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   507 ;;      Params:         0       0       0       0
   508 ;;      Locals:         0      13       0       0
   509 ;;      Temps:          0       1       0       0
   510 ;;      Totals:         0      14       0       0
   511 ;;Total ram usage:       14 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    3
   514 ;; This function calls:
   515 ;;		_process_packet
   516 ;;		_receive
   517 ;;		_transmit
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           
   524                           ;psect for function _mainloop
   525  0783                     _mainloop:
   526  0783  2FA1               	goto	l72
   527  0784                     l800:
   528                           
   529                           ;main.c: 185:       packet.command = receive();
   530  0784  26F3               	fcall	_receive
   531  0785  0020               	movlb	0	; select bank0
   532  0786  00A0               	movwf	??_mainloop
   533  0787  0820               	movf	??_mainloop,w
   534  0788  00A6               	movwf	mainloop@packet+1
   535                           
   536                           ;main.c: 186:       for (uint8_t i=0; i < (packet.command & 7); i++){
   537  0789  01A3               	clrf	mainloop@i
   538  078A                     l808:
   539  078A  0826               	movf	mainloop@packet+1,w
   540  078B  3907               	andlw	7
   541  078C  0223               	subwf	mainloop@i,w
   542  078D  1803               	btfsc	3,0
   543  078E  2F9E               	goto	l810
   544                           
   545                           ;main.c: 187:         packet.payload[i] = receive();
   546  078F  26F3               	fcall	_receive
   547  0790  0020               	movlb	0	; select bank0
   548  0791  00A0               	movwf	??_mainloop
   549  0792  0823               	movf	mainloop@i,w
   550  0793  3E02               	addlw	2
   551  0794  3E25               	addlw	(low (mainloop@packet| 0))& (0+255)
   552  0795  0086               	movwf	6
   553  0796  0187               	clrf	7
   554  0797  0820               	movf	??_mainloop,w
   555  0798  0081               	movwf	1
   556                           
   557                           ;main.c: 188:       }
   558  0799  3001               	movlw	1
   559  079A  00A0               	movwf	??_mainloop
   560  079B  0820               	movf	??_mainloop,w
   561  079C  07A3               	addwf	mainloop@i,f
   562  079D  2F8A               	goto	l808
   563  079E                     l810:
   564                           
   565                           ;main.c: 189:       process_packet(&packet);
   566  079E  3025               	movlw	(low (mainloop@packet| 0))& (0+255)
   567  079F  272C               	fcall	_process_packet
   568  07A0                     L1:
   569                           
   570                           ;main.c: 190:     } else if (ADDRESS_BROADCAST == packet.address ||
   571  07A0  0022               	movlb	2	; select bank2
   572  07A1                     l72:	
   573                           ;incstack = 0
   574                           ; Regs used in _mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   575                           ;main.c: 174:   packet_t packet;;main.c: 177:   while(1){
   576                           
   577                           
   578                           ;main.c: 178:     SWDTEN = 0;
   579  07A1  0021               	movlb	1	; select bank1
   580  07A2  1017               	bcf	23,0	;volatile
   581                           
   582                           ;main.c: 179:     packet.address = receive();
   583  07A3  26F3               	fcall	_receive
   584  07A4  0020               	movlb	0	; select bank0
   585  07A5  00A0               	movwf	??_mainloop
   586  07A6  0820               	movf	??_mainloop,w
   587  07A7  00A5               	movwf	mainloop@packet
   588  07A8  0064               	clrwdt	;# 
   589                           
   590                           ;main.c: 181:     SWDTEN = 1;
   591  07A9  0021               	movlb	1	; select bank1
   592  07AA  1417               	bsf	23,0	;volatile
   593                           
   594                           ;main.c: 183:     if (ADDRESS_SELF == packet.address){
   595  07AB  0020               	movlb	0	; select bank0
   596  07AC  0325               	decf	mainloop@packet,w
   597  07AD  1903               	btfsc	3,2
   598  07AE  2F84               	goto	l800
   599  07AF  0A25               	incf	mainloop@packet,w
   600  07B0  1D03               	btfss	3,2
   601  07B1  0825               	movf	mainloop@packet,w
   602  07B2  1D03               	btfss	3,2
   603  07B3  2FDF               	goto	l834
   604                           
   605                           ;main.c: 191:                ADDRESS_HOST == packet.address){;main.c: 194:       transmi
      +                          t(packet.address);
   606  07B4  0825               	movf	mainloop@packet,w
   607  07B5  26DA               	fcall	_transmit
   608                           
   609                           ;main.c: 195:       packet.command = receive();
   610  07B6  26F3               	fcall	_receive
   611  07B7  0020               	movlb	0	; select bank0
   612  07B8  00A0               	movwf	??_mainloop
   613  07B9  0820               	movf	??_mainloop,w
   614  07BA  00A6               	movwf	mainloop@packet+1
   615                           
   616                           ;main.c: 196:       transmit(packet.command);
   617  07BB  0826               	movf	mainloop@packet+1,w
   618  07BC  26DA               	fcall	_transmit
   619                           
   620                           ;main.c: 197:       for (uint8_t i=0; i < (packet.command & 7); i++){
   621  07BD  0020               	movlb	0	; select bank0
   622  07BE  01A4               	clrf	mainloop@i_144
   623  07BF                     l828:
   624  07BF  0826               	movf	mainloop@packet+1,w
   625  07C0  3907               	andlw	7
   626  07C1  0224               	subwf	mainloop@i_144,w
   627  07C2  1803               	btfsc	3,0
   628  07C3  2FDB               	goto	l830
   629                           
   630                           ;main.c: 198:         packet.payload[i] = receive();
   631  07C4  26F3               	fcall	_receive
   632  07C5  0020               	movlb	0	; select bank0
   633  07C6  00A0               	movwf	??_mainloop
   634  07C7  0824               	movf	mainloop@i_144,w
   635  07C8  3E02               	addlw	2
   636  07C9  3E25               	addlw	(low (mainloop@packet| 0))& (0+255)
   637  07CA  0086               	movwf	6
   638  07CB  0187               	clrf	7
   639  07CC  0820               	movf	??_mainloop,w
   640  07CD  0081               	movwf	1
   641                           
   642                           ;main.c: 199:         transmit(packet.payload[i]);
   643  07CE  0824               	movf	mainloop@i_144,w
   644  07CF  3E02               	addlw	2
   645  07D0  3E25               	addlw	(low (mainloop@packet| 0))& (0+255)
   646  07D1  0086               	movwf	6
   647  07D2  0187               	clrf	7
   648  07D3  0801               	movf	1,w
   649  07D4  26DA               	fcall	_transmit
   650                           
   651                           ;main.c: 200:       }
   652  07D5  3001               	movlw	1
   653  07D6  0020               	movlb	0	; select bank0
   654  07D7  00A0               	movwf	??_mainloop
   655  07D8  0820               	movf	??_mainloop,w
   656  07D9  07A4               	addwf	mainloop@i_144,f
   657  07DA  2FBF               	goto	l828
   658  07DB                     l830:
   659                           
   660                           ;main.c: 201:       if (ADDRESS_BROADCAST == packet.address){
   661  07DB  0A25               	incf	mainloop@packet,w
   662  07DC  1D03               	btfss	3,2
   663  07DD  2FA0               	goto	L1
   664  07DE  2F9E               	goto	l810
   665  07DF                     l834:	
   666                           ;main.c: 202:         process_packet(&packet);
   667                           
   668                           
   669                           ;main.c: 206:       packet.address--;
   670  07DF  3001               	movlw	1
   671  07E0  02A5               	subwf	mainloop@packet,f
   672                           
   673                           ;main.c: 207:       transmit(packet.address);
   674  07E1  0825               	movf	mainloop@packet,w
   675  07E2  26DA               	fcall	_transmit
   676                           
   677                           ;main.c: 208:       packet.command = receive();
   678  07E3  26F3               	fcall	_receive
   679  07E4  0020               	movlb	0	; select bank0
   680  07E5  00A0               	movwf	??_mainloop
   681  07E6  0820               	movf	??_mainloop,w
   682  07E7  00A6               	movwf	mainloop@packet+1
   683                           
   684                           ;main.c: 209:       transmit(packet.command);
   685  07E8  0826               	movf	mainloop@packet+1,w
   686  07E9  26DA               	fcall	_transmit
   687                           
   688                           ;main.c: 210:       for (uint8_t i=0; i < (packet.command & 7); i++){
   689  07EA  0020               	movlb	0	; select bank0
   690  07EB  01A2               	clrf	mainloop@i_145
   691  07EC                     l850:
   692  07EC  0826               	movf	mainloop@packet+1,w
   693  07ED  3907               	andlw	7
   694  07EE  0222               	subwf	mainloop@i_145,w
   695  07EF  1803               	btfsc	3,0
   696  07F0  2FA0               	goto	L1
   697                           
   698                           ;main.c: 211:         char c = receive();
   699  07F1  26F3               	fcall	_receive
   700  07F2  0020               	movlb	0	; select bank0
   701  07F3  00A0               	movwf	??_mainloop
   702  07F4  0820               	movf	??_mainloop,w
   703  07F5  00A1               	movwf	mainloop@c
   704                           
   705                           ;main.c: 212:         transmit(c);
   706  07F6  0821               	movf	mainloop@c,w
   707  07F7  26DA               	fcall	_transmit
   708                           
   709                           ;main.c: 213:       }
   710  07F8  3001               	movlw	1
   711  07F9  0020               	movlb	0	; select bank0
   712  07FA  00A0               	movwf	??_mainloop
   713  07FB  0820               	movf	??_mainloop,w
   714  07FC  07A2               	addwf	mainloop@i_145,f
   715  07FD  2FEC               	goto	l850
   716  07FE                     __end_of_mainloop:
   717                           
   718                           	psect	text3
   719  06F3                     __ptext3:	
   720 ;; *************** function _receive *****************
   721 ;; Defined at:
   722 ;;		line 123 in file "main.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  packet          9    5[COMMON] struct .
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      unsigned char 
   729 ;; Registers used:
   730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/1
   733 ;;		On exit  : 1F/3
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   736 ;;      Params:         0       0       0       0
   737 ;;      Locals:         9       0       0       0
   738 ;;      Temps:          1       0       0       0
   739 ;;      Totals:        10       0       0       0
   740 ;;Total ram usage:       10 bytes
   741 ;; Hardware stack levels used:    1
   742 ;; Hardware stack levels required when called:    2
   743 ;; This function calls:
   744 ;;		_send_packet
   745 ;; This function is called by:
   746 ;;		_mainloop
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           
   751                           ;psect for function _receive
   752  06F3                     _receive:
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   756  06F3  0064               	clrwdt	;# 
   757  06F4                     l44:	
   758                           ;main.c: 126:   while(!RCIF) { }
   759                           
   760  06F4  0020               	movlb	0	; select bank0
   761  06F5  1E91               	btfss	17,5	;volatile
   762  06F6  2EF4               	goto	l44
   763                           
   764                           ;main.c: 127:   if (FERR || OERR){
   765  06F7  0023               	movlb	3	; select bank3
   766  06F8  191D               	btfsc	29,2	;volatile
   767  06F9  2EFC               	goto	l772
   768  06FA  1C9D               	btfss	29,1	;volatile
   769  06FB  2F07               	goto	l776
   770  06FC                     l772:
   771                           
   772                           ;main.c: 129:     packet_t packet;;main.c: 130:     packet.address = ADDRESS_BROADCAST;
   773  06FC  30FF               	movlw	255
   774  06FD  00F4               	movwf	??_receive
   775  06FE  0874               	movf	??_receive,w
   776  06FF  00F5               	movwf	receive@packet
   777                           
   778                           ;main.c: 131:     packet.command = ((COMMAND_RESET << 3) | 0);
   779  0700  3008               	movlw	8
   780  0701  00F4               	movwf	??_receive
   781  0702  0874               	movf	??_receive,w
   782  0703  00F6               	movwf	receive@packet+1
   783                           
   784                           ;main.c: 132:     send_packet(&packet);
   785  0704  3075               	movlw	(low (receive@packet| 0))& (0+255)
   786  0705  270A               	fcall	_send_packet
   787  0706  0001               	reset	;# 
   788  0707                     l776:
   789                           
   790                           ;main.c: 135:   return RCREG;
   791  0707  0023               	movlb	3	; select bank3
   792  0708  0819               	movf	25,w	;volatile
   793  0709  0008               	return
   794  070A                     __end_of_receive:
   795                           
   796                           	psect	text4
   797  070A                     __ptext4:	
   798 ;; *************** function _send_packet *****************
   799 ;; Defined at:
   800 ;;		line 112 in file "main.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  packet          1    wreg     PTR struct .
   803 ;;		 -> receive@packet(9), 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  packet          1    3[COMMON] PTR struct .
   806 ;;		 -> receive@packet(9), 
   807 ;;  i               1    2[COMMON] unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 1F/3
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   817 ;;      Params:         0       0       0       0
   818 ;;      Locals:         2       0       0       0
   819 ;;      Temps:          1       0       0       0
   820 ;;      Totals:         3       0       0       0
   821 ;;Total ram usage:        3 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    1
   824 ;; This function calls:
   825 ;;		_transmit
   826 ;; This function is called by:
   827 ;;		_receive
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           
   832                           ;psect for function _send_packet
   833  070A                     _send_packet:
   834                           
   835                           ;incstack = 0
   836                           ; Regs used in _send_packet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   837                           ;send_packet@packet stored from wreg
   838  070A  00F3               	movwf	send_packet@packet
   839                           
   840                           ;main.c: 112: void send_packet(packet_t* packet);main.c: 113: {;main.c: 114:   transmit(
      +                          packet->address);
   841  070B  0873               	movf	send_packet@packet,w
   842  070C  0086               	movwf	6
   843  070D  0187               	clrf	7
   844  070E  0801               	movf	1,w
   845  070F  26DA               	fcall	_transmit
   846                           
   847                           ;main.c: 115:   transmit(packet->command);
   848  0710  0A73               	incf	send_packet@packet,w
   849  0711  0086               	movwf	6
   850  0712  0187               	clrf	7
   851  0713  0801               	movf	1,w
   852  0714  26DA               	fcall	_transmit
   853                           
   854                           ;main.c: 116:   for (uint8_t i=0; i < (packet->command & 7); i++){
   855  0715  01F2               	clrf	send_packet@i
   856  0716                     l766:
   857  0716  0A73               	incf	send_packet@packet,w
   858  0717  0086               	movwf	6
   859  0718  0187               	clrf	7
   860  0719  0801               	movf	1,w
   861  071A  3907               	andlw	7
   862  071B  0272               	subwf	send_packet@i,w
   863  071C  1803               	btfsc	3,0
   864  071D  0008               	return
   865                           
   866                           ;main.c: 117:     transmit(packet->payload[i]);
   867  071E  0872               	movf	send_packet@i,w
   868  071F  0773               	addwf	send_packet@packet,w
   869  0720  00F1               	movwf	??_send_packet
   870  0721  0871               	movf	??_send_packet,w
   871  0722  3E02               	addlw	2
   872  0723  0086               	movwf	6
   873  0724  0187               	clrf	7
   874  0725  0801               	movf	1,w
   875  0726  26DA               	fcall	_transmit
   876                           
   877                           ;main.c: 118:   }
   878  0727  3001               	movlw	1
   879  0728  00F1               	movwf	??_send_packet
   880  0729  0871               	movf	??_send_packet,w
   881  072A  07F2               	addwf	send_packet@i,f
   882  072B  2F16               	goto	l766
   883  072C                     __end_of_send_packet:
   884                           
   885                           	psect	text5
   886  06DA                     __ptext5:	
   887 ;; *************** function _transmit *****************
   888 ;; Defined at:
   889 ;;		line 105 in file "main.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  c               1    wreg     unsigned char 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  c               1    0[COMMON] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   903 ;;      Params:         0       0       0       0
   904 ;;      Locals:         1       0       0       0
   905 ;;      Temps:          0       0       0       0
   906 ;;      Totals:         1       0       0       0
   907 ;;Total ram usage:        1 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_send_packet
   913 ;;		_mainloop
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           
   918                           ;psect for function _transmit
   919  06DA                     _transmit:
   920                           
   921                           ;incstack = 0
   922                           ; Regs used in _transmit: [wreg]
   923                           ;transmit@c stored from wreg
   924  06DA  00F0               	movwf	transmit@c
   925  06DB                     l32:	
   926                           ;main.c: 105: void transmit(char c);main.c: 106: {;main.c: 107:   while(!TXIF) { }
   927                           
   928  06DB  0020               	movlb	0	; select bank0
   929  06DC  1E11               	btfss	17,4	;volatile
   930  06DD  2EDB               	goto	l32
   931                           
   932                           ;main.c: 108:   TXREG = c;
   933  06DE  0870               	movf	transmit@c,w
   934  06DF  0023               	movlb	3	; select bank3
   935  06E0  009A               	movwf	26	;volatile
   936  06E1  0000               	nop	;# 
   937  06E2  0008               	return
   938  06E3                     __end_of_transmit:
   939                           
   940                           	psect	text6
   941  072C                     __ptext6:	
   942 ;; *************** function _process_packet *****************
   943 ;; Defined at:
   944 ;;		line 147 in file "main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  packet          1    wreg     PTR struct .
   947 ;;		 -> mainloop@packet(9), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  packet          1    9[COMMON] PTR struct .
   950 ;;		 -> mainloop@packet(9), 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 1F/0
   957 ;;		On exit  : 1F/0
   958 ;;		Unchanged: 1F/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   960 ;;      Params:         0       0       0       0
   961 ;;      Locals:         1       0       0       0
   962 ;;      Temps:          3       0       0       0
   963 ;;      Totals:         4       0       0       0
   964 ;;Total ram usage:        4 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    1
   967 ;; This function calls:
   968 ;;		_set_pwm16
   969 ;;		_set_pwm8
   970 ;; This function is called by:
   971 ;;		_mainloop
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _process_packet
   977  072C                     _process_packet:
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _process_packet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   981                           ;process_packet@packet stored from wreg
   982  072C  00F9               	movwf	process_packet@packet
   983                           
   984                           ;main.c: 147: void process_packet(packet_t* packet);main.c: 148: {;main.c: 149:   switch
      +                          (((packet->command & 0xf8)>>3)){
   985  072D  2F59               	goto	l788
   986  072E                     l782:
   987                           
   988                           ;main.c: 161:     set_pwm8(packet->red8, packet->green8, packet->blue8);
   989  072E  0879               	movf	process_packet@packet,w
   990  072F  0086               	movwf	6
   991  0730  0187               	clrf	7
   992  0731  3F43               	moviw [3]fsr1
   993  0732  00F0               	movwf	set_pwm8@green
   994  0733  0879               	movf	process_packet@packet,w
   995  0734  0086               	movwf	6
   996  0735  0187               	clrf	7
   997  0736  3F44               	moviw [4]fsr1
   998  0737  00F1               	movwf	set_pwm8@blue
   999  0738  0879               	movf	process_packet@packet,w
  1000  0739  3E02               	addlw	2
  1001  073A  0086               	movwf	6
  1002  073B  0187               	clrf	7
  1003  073C  0801               	movf	1,w
  1004  073D  26D6               	fcall	_set_pwm8
  1005                           
  1006                           ;main.c: 162:     break;
  1007  073E  0008               	return
  1008  073F                     l784:
  1009                           
  1010                           ;main.c: 164:     set_pwm16(packet->red16, packet->green16, packet->blue16);
  1011  073F  0879               	movf	process_packet@packet,w
  1012  0740  3E02               	addlw	2
  1013  0741  0086               	movwf	6
  1014  0742  0187               	clrf	7
  1015  0743  3F40               	moviw [0]fsr1
  1016  0744  00F0               	movwf	set_pwm16@red
  1017  0745  3F41               	moviw [1]fsr1
  1018  0746  00F1               	movwf	set_pwm16@red+1
  1019  0747  0879               	movf	process_packet@packet,w
  1020  0748  3E04               	addlw	4
  1021  0749  0086               	movwf	6
  1022  074A  0187               	clrf	7
  1023  074B  3F40               	moviw [0]fsr1
  1024  074C  00F2               	movwf	set_pwm16@green
  1025  074D  3F41               	moviw [1]fsr1
  1026  074E  00F3               	movwf	set_pwm16@green+1
  1027  074F  0879               	movf	process_packet@packet,w
  1028  0750  3E06               	addlw	6
  1029  0751  0086               	movwf	6
  1030  0752  0187               	clrf	7
  1031  0753  3F40               	moviw [0]fsr1
  1032  0754  00F4               	movwf	set_pwm16@blue
  1033  0755  3F41               	moviw [1]fsr1
  1034  0756  00F5               	movwf	set_pwm16@blue+1
  1035  0757  26D5               	fcall	_set_pwm16
  1036                           
  1037                           ;main.c: 165:     break;
  1038  0758  0008               	return
  1039  0759                     l788:
  1040  0759  0A79               	incf	process_packet@packet,w
  1041  075A  0086               	movwf	6
  1042  075B  0187               	clrf	7
  1043  075C  0801               	movf	1,w
  1044  075D  00F6               	movwf	??_process_packet
  1045  075E  3003               	movlw	3
  1046  075F                     u195:
  1047  075F  36F6               	lsrf	??_process_packet,f
  1048  0760  0B89               	decfsz	9,f
  1049  0761  2F5F               	goto	u195
  1050  0762  0876               	movf	??_process_packet,w
  1051  0763  391F               	andlw	31
  1052  0764  00F7               	movwf	??_process_packet+1
  1053  0765  01F8               	clrf	??_process_packet+2
  1054                           
  1055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1056                           ; Switch size 1, requested type "simple"
  1057                           ; Number of cases is 1, Range of values is 0 to 0
  1058                           ; switch strategies available:
  1059                           ; Name         Instructions Cycles
  1060                           ; simple_byte            4     3 (average)
  1061                           ; direct_byte            8     6 (fixed)
  1062                           ; jumptable            260     6 (fixed)
  1063                           ;	Chosen strategy is simple_byte
  1064  0766  0878               	movf	??_process_packet+2,w
  1065  0767  3A00               	xorlw	0	; case 0
  1066  0768  1903               	skipnz
  1067  0769  2F6B               	goto	l876
  1068  076A  2F82               	goto	l69
  1069  076B                     l876:
  1070                           
  1071                           ; Switch size 1, requested type "simple"
  1072                           ; Number of cases is 7, Range of values is 0 to 6
  1073                           ; switch strategies available:
  1074                           ; Name         Instructions Cycles
  1075                           ; direct_byte           20     6 (fixed)
  1076                           ; simple_byte           22    12 (average)
  1077                           ; jumptable            260     6 (fixed)
  1078                           ;	Chosen strategy is simple_byte
  1079  076B  0877               	movf	??_process_packet+1,w
  1080  076C  3A00               	xorlw	0	; case 0
  1081  076D  1903               	skipnz
  1082  076E  2F82               	goto	l69
  1083  076F  3A01               	xorlw	1	; case 1
  1084  0770  1903               	skipnz
  1085  0771  2F82               	goto	l69
  1086  0772  3A03               	xorlw	3	; case 2
  1087  0773  1903               	skipnz
  1088  0774  2F82               	goto	l69
  1089  0775  3A01               	xorlw	1	; case 3
  1090  0776  1903               	skipnz
  1091  0777  2F82               	goto	l69
  1092  0778  3A07               	xorlw	7	; case 4
  1093  0779  1903               	skipnz
  1094  077A  2F82               	goto	l69
  1095  077B  3A01               	xorlw	1	; case 5
  1096  077C  1903               	skipnz
  1097  077D  2F2E               	goto	l782
  1098  077E  3A03               	xorlw	3	; case 6
  1099  077F  1903               	skipnz
  1100  0780  2F3F               	goto	l784
  1101  0781  2F82               	goto	l69
  1102  0782                     l69:
  1103  0782  0008               	return
  1104  0783                     __end_of_process_packet:
  1105                           
  1106                           	psect	text7
  1107  06D6                     __ptext7:	
  1108 ;; *************** function _set_pwm8 *****************
  1109 ;; Defined at:
  1110 ;;		line 138 in file "main.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  red             1    wreg     unsigned char 
  1113 ;;  green           1    0[COMMON] unsigned char 
  1114 ;;  blue            1    1[COMMON] unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  red             1    0[COMMON] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg
  1121 ;; Tracked objects:
  1122 ;;		On entry : 1F/0
  1123 ;;		On exit  : 1F/0
  1124 ;;		Unchanged: 1F/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1126 ;;      Params:         2       0       0       0
  1127 ;;      Locals:         0       0       0       0
  1128 ;;      Temps:          0       0       0       0
  1129 ;;      Totals:         2       0       0       0
  1130 ;;Total ram usage:        2 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_process_packet
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           
  1140                           ;psect for function _set_pwm8
  1141  06D6                     _set_pwm8:
  1142                           
  1143                           ;incstack = 0
  1144                           ; Regs used in _set_pwm8: [wreg]
  1145  06D6  0008               	return
  1146  06D7                     __end_of_set_pwm8:
  1147                           
  1148                           	psect	text8
  1149  06D5                     __ptext8:	
  1150 ;; *************** function _set_pwm16 *****************
  1151 ;; Defined at:
  1152 ;;		line 142 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  red             2    0[COMMON] unsigned short 
  1155 ;;  green           2    2[COMMON] unsigned short 
  1156 ;;  blue            2    4[COMMON] unsigned short 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		None
  1163 ;; Tracked objects:
  1164 ;;		On entry : 1F/0
  1165 ;;		On exit  : 1F/0
  1166 ;;		Unchanged: 1F/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1168 ;;      Params:         6       0       0       0
  1169 ;;      Locals:         0       0       0       0
  1170 ;;      Temps:          0       0       0       0
  1171 ;;      Totals:         6       0       0       0
  1172 ;;Total ram usage:        6 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_process_packet
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _set_pwm16
  1183  06D5                     _set_pwm16:
  1184                           
  1185                           ;incstack = 0
  1186                           ; Regs used in _set_pwm16: []
  1187  06D5  0008               	return
  1188  06D6                     __end_of_set_pwm16:
  1189  007E                     btemp	set	126	;btemp
  1190  007E                     wtemp0	set	126
  1191                           
  1192                           	psect	config
  1193                           
  1194                           ;Config register CONFIG1 @ 0x8007
  1195                           ;	
  1196                           ;	FOSC = INTOSC, INTOSC oscillator; I/O function on CLKIN pin
  1197                           ;	Watchdog Timer Enable
  1198                           ;	WDTE = OFF, WDT disabled
  1199                           ;	Power-up Timer Enable
  1200                           ;	PWRTE = ON, PWRT enabled
  1201                           ;	MCLR Pin Function Select
  1202                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  1203                           ;	Flash Program Memory Code Protection
  1204                           ;	CP = ON, Program memory code protection is enabled
  1205                           ;	Brown-out Reset Enable
  1206                           ;	BOREN = OFF, Brown-out Reset disabled
  1207                           ;	Clock Out Enable
  1208                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  1209  8007                     	org	32775
  1210  8007  3104               	dw	12548
  1211                           
  1212                           ;Config register CONFIG2 @ 0x8008
  1213                           ;	Flash Memory Self-Write Protection
  1214                           ;	WRT = ALL, 000h to 7FFh write protected, no addresses may be modified by EECON control
  1215                           ;	PLL Enable
  1216                           ;	PLLEN = OFF, 4x PLL disabled
  1217                           ;	Stack Overflow/Underflow Reset Enable
  1218                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  1219                           ;	Brown-out Reset Voltage Selection
  1220                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  1221                           ;	Low Power Brown-out Reset enable bit
  1222                           ;	LPBOREN = ON, LPBOR is enabled
  1223                           ;	Low-Voltage Programming Enable
  1224                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1225  8008                     	org	32776
  1226  8008  10FC               	dw	4348

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     14      14
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    process_packet@packet	PTR struct . size(1) Largest target is 9
		 -> mainloop@packet(BANK0[9]), 

    send_packet@packet	PTR struct . size(1) Largest target is 9
		 -> receive@packet(COMMON[9]), 


Critical Paths under _main in COMMON

    _mainloop->_receive
    _receive->_send_packet
    _send_packet->_transmit
    _process_packet->_set_pwm16

Critical Paths under _main in BANK0

    _main->_mainloop

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1540
                           _mainloop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mainloop                                            14    14      0    1540
                                              0 BANK0     14    14      0
                     _process_packet
                            _receive
                           _transmit
 ---------------------------------------------------------------------------------
 (2) _receive                                             10    10      0     243
                                              4 COMMON    10    10      0
                        _send_packet
 ---------------------------------------------------------------------------------
 (3) _send_packet                                          3     3      0     192
                                              1 COMMON     3     3      0
                           _transmit
 ---------------------------------------------------------------------------------
 (2) _transmit                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _process_packet                                       4     4      0     671
                                              6 COMMON     4     4      0
                          _set_pwm16
                           _set_pwm8
 ---------------------------------------------------------------------------------
 (3) _set_pwm8                                             3     1      2     178
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _set_pwm16                                            6     0      6     267
                                              0 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _mainloop
     _process_packet
       _set_pwm16
       _set_pwm8
     _receive
       _send_packet
         _transmit
     _transmit
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E       E       6       17.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jun 18 00:20:13 2020

                     l32 06DB                       l44 06F4                       l72 07A1  
                     l69 0782                      l800 0784                      l810 079E  
                    l830 07DB                      l808 078A                      l850 07EC  
                    l834 07DF                      l772 06FC                      l828 07BF  
                    l782 072E                      l766 0716                      l784 073F  
                    l776 0707                      l876 076B                      l788 0759  
                    u195 075F                      wreg 0009                     _FERR 0CEA  
                   _LATA 010C                     _RCIF 008D                     _OERR 0CE9  
                   _TXIF 008C                     _main 06D7                     fsr1h 0007  
                   indf1 0001                     fsr1l 0006                     btemp 007E  
                   start 0001                    ?_main 0070                    _RCREG 0199  
                  _TRISA 008C                    _TXREG 019A          __end_of_receive 070A  
                  _setup 06E3                    status 0003            receive@packet 0075  
                  wtemp0 007E          __initialization 07FE             __end_of_main 06DA  
         mainloop@packet 0025                   ??_main 007E             ?_send_packet 0070  
                 _APFCON 011D                   ?_setup 0070                   _ANSELA 018C  
                 _INLVLA 038C                   _SWDTEN 04B8                   _nWPUEN 04AF  
       __end_of_mainloop 07FE         ??_process_packet 0076         __end_of_set_pwm8 06D7  
              ??_receive 0074         __end_of_transmit 06E3  __end_of__initialization 07FE  
         __pcstackCOMMON 0070            __end_of_setup 06F3                  ??_setup 0070  
             __pmaintext 06D7       __size_of_set_pwm16 0001                ?_mainloop 0070  
   __size_of_send_packet 0022                ?_set_pwm8 0070                ?_transmit 0070  
                __ptext1 06E3                  __ptext2 0783                  __ptext3 06F3  
                __ptext4 070A                  __ptext5 06DA                  __ptext6 072C  
                __ptext7 06D6                  __ptext8 06D5                  _receive 06F3  
      send_packet@packet 0073     end_of_initialization 07FE              set_pwm8@red 0070  
             ??_mainloop 0020        __end_of_set_pwm16 06D6               ??_set_pwm8 0072  
             ??_transmit 0070           set_pwm16@green 0072      start_initialization 07FE  
          mainloop@i_144 0024            mainloop@i_145 0022                ___latbits 0000  
          __pcstackBANK0 0020  __size_of_process_packet 0057        __size_of_mainloop 007B  
      __size_of_set_pwm8 0001        __size_of_transmit 0009                 ?_receive 0070  
          ??_send_packet 0071           __size_of_setup 0010                _set_pwm16 06D5  
          set_pwm16@blue 0074             send_packet@i 0072            set_pwm8@green 0070  
              mainloop@c 0021                mainloop@i 0023      __end_of_send_packet 072C  
             ?_set_pwm16 0070         __size_of_receive 0017           _process_packet 072C  
               _mainloop 0783            __size_of_main 0003                 _set_pwm8 06D6  
           set_pwm16@red 0070                 _transmit 06DA             set_pwm8@blue 0071  
              transmit@c 0070   __end_of_process_packet 0783              _send_packet 070A  
            ??_set_pwm16 0076     process_packet@packet 0079          ?_process_packet 0070  
