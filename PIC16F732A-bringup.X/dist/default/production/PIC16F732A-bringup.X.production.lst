

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon May 25 12:57:26 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F723A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 09/04/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F723A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0096                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009F                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0186                     	;# 
   122  018C                     	;# 
   123                           
   124                           	psect	idataBANK0
   125  0107                     __pidataBANK0:
   126                           
   127                           ;initializer for send_hex_byte@F1111
   128  0107  3430               	retlw	48
   129  0108  3431               	retlw	49
   130  0109  3432               	retlw	50
   131  010A  3433               	retlw	51
   132  010B  3434               	retlw	52
   133  010C  3435               	retlw	53
   134  010D  3436               	retlw	54
   135  010E  3437               	retlw	55
   136  010F  3438               	retlw	56
   137  0110  3439               	retlw	57
   138  0111  3441               	retlw	65
   139  0112  3442               	retlw	66
   140  0113  3443               	retlw	67
   141  0114  3444               	retlw	68
   142  0115  3445               	retlw	69
   143  0116  3446               	retlw	70
   144  0117  3400               	retlw	0
   145  0018                     _RCSTAbits	set	24
   146  000C                     _PIR1bits	set	12
   147  0019                     _TXREG	set	25
   148  000B                     _INTCONbits	set	11
   149  0007                     _PORTC	set	7
   150  0001                     _TMR0	set	1
   151  0099                     _SPBRG	set	153
   152  0098                     _TXSTAbits	set	152
   153  0081                     _OPTION_REGbits	set	129
   154  0086                     _TRISB	set	134
   155  0087                     _TRISC	set	135
   156  0090                     _OSCCONbits	set	144
   157  0186                     _ANSELB	set	390
   158                           
   159                           	psect	cinit
   160  0013                     start_initialization:	
   161                           ; #config settings
   162                           
   163  0013                     __initialization:
   164                           
   165                           ; Initialize objects allocated to BANK0
   166  0013  1383               	bcf	3,7	;select IRP bank0
   167  0014  3048               	movlw	low (__pdataBANK0+17)
   168  0015  00FD               	movwf	btemp+-1
   169  0016  3001               	movlw	high __pidataBANK0
   170  0017  00FE               	movwf	btemp
   171  0018  3007               	movlw	low __pidataBANK0
   172  0019  00FF               	movwf	btemp+1
   173  001A  3037               	movlw	low __pdataBANK0
   174  001B  0084               	movwf	4
   175  001C  118A  211C         	fcall	init_ram0
   176                           
   177                           ; Clear objects allocated to BANK0
   178  001E  01C8               	clrf	__pbssBANK0& (0+127)
   179                           
   180                           ; Clear objects allocated to COMMON
   181  001F  01F9               	clrf	__pbssCOMMON& (0+127)
   182  0020  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   183  0021  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   184  0022  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   185  0023  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   186  0024                     end_of_initialization:	
   187                           ;End of C runtime variable initialization code
   188                           
   189  0024                     __end_of__initialization:
   190  0024  0183               	clrf	3
   191  0025  118A  28A5         	ljmp	_main	;jump to C main() function
   192                           
   193                           	psect	bssCOMMON
   194  0079                     __pbssCOMMON:
   195  0079                     _received_code:
   196  0079                     	ds	4
   197  007D                     _rx_state:
   198  007D                     	ds	1
   199                           
   200                           	psect	bssBANK0
   201  0048                     __pbssBANK0:
   202  0048                     _n_bits:
   203  0048                     	ds	1
   204                           
   205                           	psect	dataBANK0
   206  0037                     __pdataBANK0:
   207  0037                     send_hex_byte@F1111:
   208  0037                     	ds	17
   209                           
   210                           	psect	inittext
   211  0118                     init_fetch0:	
   212                           ;	Called with low address in FSR and high address in W
   213                           
   214  0118  087E               	movf	126,w
   215  0119  008A               	movwf	10
   216  011A  087F               	movf	127,w
   217  011B  0082               	movwf	2
   218  011C                     init_ram0:	
   219                           ;Called with:
   220                           ;	high address of idata address in btemp 
   221                           ;	low address of idata address in btemp+1 
   222                           ;	low address of data in FSR
   223                           ;	high address + 1 of data in btemp-1
   224                           
   225  011C  2118  118A         	fcall	init_fetch0
   226  011E  0080               	movwf	0
   227  011F  0A84               	incf	4,f
   228  0120  0804               	movf	4,w
   229  0121  067D               	xorwf	125,w
   230  0122  1903               	btfsc	3,2
   231  0123  3400               	retlw	0
   232  0124  0AFF               	incf	127,f
   233  0125  1903               	btfsc	3,2
   234  0126  0AFE               	incf	126,f
   235  0127  291C               	goto	init_ram0
   236                           
   237                           	psect	cstackCOMMON
   238  0070                     __pcstackCOMMON:
   239  0070                     ?_ISR:
   240  0070                     ??_ISR:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_putchar:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_send_hex_byte:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0070                     	ds	8
   255  0078                     ISR@time:
   256                           
   257                           ; 1 bytes @ 0x8
   258  0078                     	ds	1
   259                           
   260                           	psect	cstackBANK0
   261  0020                     __pcstackBANK0:
   262  0020                     ??_putchar:
   263  0020                     putchar@value:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 1 bytes @ 0x0
   268  0020                     	ds	1
   269  0021                     ??_send_hex_byte:
   270                           
   271                           ; 1 bytes @ 0x1
   272  0021                     	ds	4
   273  0025                     send_hex_byte@hex_table:
   274                           
   275                           ; 17 bytes @ 0x5
   276  0025                     	ds	17
   277  0036                     send_hex_byte@value:
   278                           
   279                           ; 1 bytes @ 0x16
   280  0036                     	ds	1
   281  0037                     ??_main:
   282                           
   283                           	psect	maintext
   284  00A5                     __pmaintext:	
   285                           ; 1 bytes @ 0x17
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 113 in file "newmain.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;		None
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : B00/0
   302 ;;		On exit  : 300/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   305 ;;      Params:         0       0       0       0
   306 ;;      Locals:         0       0       0       0
   307 ;;      Temps:          0       0       0       0
   308 ;;      Totals:         0       0       0       0
   309 ;;Total ram usage:        0 bytes
   310 ;; Hardware stack levels required when called:    3
   311 ;; This function calls:
   312 ;;		_send_hex_byte
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _main
   320  00A5                     _main:
   321                           
   322                           ;newmain.c: 114:     OSCCONbits.IRCF = 0b01;
   323                           
   324                           ;incstack = 0
   325                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   326  00A5  1683               	bsf	3,5	;RP0=1, select bank1
   327  00A6  0810               	movf	16,w	;volatile
   328  00A7  39CF               	andlw	-49
   329  00A8  3810               	iorlw	16
   330  00A9  0090               	movwf	16	;volatile
   331                           
   332                           ;newmain.c: 116:     ANSELB = 0;
   333  00AA  1703               	bsf	3,6	;RP1=1, select bank3
   334  00AB  0186               	clrf	6	;volatile
   335                           
   336                           ;newmain.c: 117:     TRISC = 0;
   337  00AC  1303               	bcf	3,6	;RP1=0, select bank1
   338  00AD  0187               	clrf	7	;volatile
   339                           
   340                           ;newmain.c: 118:     TRISB = 0b00000001;
   341  00AE  3001               	movlw	1
   342  00AF  0086               	movwf	6	;volatile
   343                           
   344                           ;newmain.c: 120:     OPTION_REGbits.PSA = 0;
   345  00B0  1181               	bcf	1,3	;volatile
   346                           
   347                           ;newmain.c: 121:     OPTION_REGbits.PS = 0b101;
   348  00B1  0801               	movf	1,w	;volatile
   349  00B2  39F8               	andlw	-8
   350  00B3  3805               	iorlw	5
   351  00B4  0081               	movwf	1	;volatile
   352                           
   353                           ;newmain.c: 122:     OPTION_REGbits.T0CS = 0;
   354  00B5  1281               	bcf	1,5	;volatile
   355                           
   356                           ;newmain.c: 124:     INTCONbits.GIE = 1;
   357  00B6  178B               	bsf	11,7	;volatile
   358                           
   359                           ;newmain.c: 125:     OPTION_REGbits.INTEDG = 0;
   360  00B7  1301               	bcf	1,6	;volatile
   361                           
   362                           ;newmain.c: 126:     INTCONbits.INTE = 1;
   363  00B8  160B               	bsf	11,4	;volatile
   364                           
   365                           ;newmain.c: 129:     TXSTAbits.TXEN = 1;
   366  00B9  1698               	bsf	24,5	;volatile
   367                           
   368                           ;newmain.c: 130:     TXSTAbits.SYNC = 0;
   369  00BA  1218               	bcf	24,4	;volatile
   370                           
   371                           ;newmain.c: 131:     RCSTAbits.SPEN = 1;
   372  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   373  00BC  1798               	bsf	24,7	;volatile
   374                           
   375                           ;newmain.c: 134:     TXSTAbits.BRGH = 1;
   376  00BD  1683               	bsf	3,5	;RP0=1, select bank1
   377  00BE  1518               	bsf	24,2	;volatile
   378                           
   379                           ;newmain.c: 135:     SPBRG = 25;
   380  00BF  3019               	movlw	25
   381  00C0  0099               	movwf	25	;volatile
   382  00C1                     l792:
   383                           
   384                           ;newmain.c: 139:       if (STATE_DONE == rx_state){
   385  00C1  3002               	movlw	2
   386  00C2  067D               	xorwf	_rx_state,w
   387  00C3  1D03               	btfss	3,2
   388  00C4  28C1               	goto	l792
   389                           
   390                           ;newmain.c: 140:  send_hex_byte((received_code >> 24) & 0xff);
   391  00C5  087C               	movf	_received_code+3,w
   392  00C6  118A  20D7  118A   	fcall	_send_hex_byte
   393                           
   394                           ;newmain.c: 141:  send_hex_byte((received_code >> 16) & 0xff);
   395  00C9  087B               	movf	_received_code+2,w
   396  00CA  118A  20D7  118A   	fcall	_send_hex_byte
   397                           
   398                           ;newmain.c: 142:  send_hex_byte((received_code >> 8) & 0xff);
   399  00CD  087A               	movf	_received_code+1,w
   400  00CE  118A  20D7  118A   	fcall	_send_hex_byte
   401                           
   402                           ;newmain.c: 143:  send_hex_byte((received_code >> 0) & 0xff);
   403  00D1  0879               	movf	_received_code,w
   404  00D2  118A  20D7  118A   	fcall	_send_hex_byte
   405                           
   406                           ;newmain.c: 144:  rx_state = STATE_RESET;
   407  00D5  01FD               	clrf	_rx_state
   408  00D6  28C1               	goto	l792
   409  00D7                     __end_of_main:
   410                           
   411                           	psect	text1
   412  00D7                     __ptext1:	
   413 ;; *************** function _send_hex_byte *****************
   414 ;; Defined at:
   415 ;;		line 106 in file "newmain.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;  value           1    wreg     unsigned char 
   418 ;; Auto vars:     Size  Location     Type
   419 ;;  value           1   22[BANK0 ] unsigned char 
   420 ;;  hex_table      17    5[BANK0 ] unsigned char [17]
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   425 ;; Tracked objects:
   426 ;;		On entry : 200/100
   427 ;;		On exit  : 300/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   430 ;;      Params:         0       0       0       0
   431 ;;      Locals:         0      18       0       0
   432 ;;      Temps:          0       4       0       0
   433 ;;      Totals:         0      22       0       0
   434 ;;Total ram usage:       22 bytes
   435 ;; Hardware stack levels used:    1
   436 ;; Hardware stack levels required when called:    2
   437 ;; This function calls:
   438 ;;		_putchar
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           
   445                           ;psect for function _send_hex_byte
   446  00D7                     _send_hex_byte:
   447                           
   448                           ;incstack = 0
   449                           ; Regs used in _send_hex_byte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   450                           ;send_hex_byte@value stored from wreg
   451  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   452  00D8  00B6               	movwf	send_hex_byte@value
   453                           
   454                           ;newmain.c: 106: void send_hex_byte(uint8_t value);newmain.c: 107: {;newmain.c: 108:   c
      +                          har hex_table[] = "0123456789ABCDEF";
   455  00D9  3025               	movlw	send_hex_byte@hex_table& (0+255)
   456  00DA  0084               	movwf	4
   457  00DB  3037               	movlw	low send_hex_byte@F1111
   458  00DC  00A1               	movwf	??_send_hex_byte
   459  00DD  0804               	movf	4,w
   460  00DE  00A2               	movwf	??_send_hex_byte+1
   461  00DF  3011               	movlw	17
   462  00E0  00A3               	movwf	??_send_hex_byte+2
   463  00E1                     u170:
   464  00E1  0821               	movf	??_send_hex_byte,w
   465  00E2  0084               	movwf	4
   466  00E3  1383               	bcf	3,7	;select IRP bank0
   467  00E4  0800               	movf	0,w
   468  00E5  00A4               	movwf	??_send_hex_byte+3
   469  00E6  0AA1               	incf	??_send_hex_byte,f
   470  00E7  0822               	movf	??_send_hex_byte+1,w
   471  00E8  0084               	movwf	4
   472  00E9  0824               	movf	??_send_hex_byte+3,w
   473  00EA  0080               	movwf	0
   474  00EB  0AA2               	incf	??_send_hex_byte+1,f
   475  00EC  0BA3               	decfsz	??_send_hex_byte+2,f
   476  00ED  28E1               	goto	u170
   477                           
   478                           ;newmain.c: 109:   putchar( hex_table[((value >> 4) & 0xf)]);
   479  00EE  0836               	movf	send_hex_byte@value,w
   480  00EF  00A1               	movwf	??_send_hex_byte
   481  00F0  3004               	movlw	4
   482  00F1                     u185:
   483  00F1  1003               	clrc
   484  00F2  0CA1               	rrf	??_send_hex_byte,f
   485  00F3  3EFF               	addlw	-1
   486  00F4  1D03               	skipz
   487  00F5  28F1               	goto	u185
   488  00F6  0821               	movf	??_send_hex_byte,w
   489  00F7  390F               	andlw	15
   490  00F8  3E25               	addlw	(low (send_hex_byte@hex_table| 0))& (0+255)
   491  00F9  0084               	movwf	4
   492  00FA  0800               	movf	0,w
   493  00FB  118A  2128  118A   	fcall	_putchar
   494                           
   495                           ;newmain.c: 110:   putchar( hex_table[((value >> 0) & 0xf)]);
   496  00FE  0836               	movf	send_hex_byte@value,w
   497  00FF  390F               	andlw	15
   498  0100  3E25               	addlw	(low (send_hex_byte@hex_table| 0))& (0+255)
   499  0101  0084               	movwf	4
   500  0102  1383               	bcf	3,7	;select IRP bank0
   501  0103  0800               	movf	0,w
   502  0104  118A  2128         	fcall	_putchar
   503  0106  0008               	return
   504  0107                     __end_of_send_hex_byte:
   505                           
   506                           	psect	text2
   507  0128                     __ptext2:	
   508 ;; *************** function _putchar *****************
   509 ;; Defined at:
   510 ;;		line 92 in file "newmain.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;  value           1    wreg     unsigned char 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  value           1    0[BANK0 ] unsigned char 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg
   519 ;; Tracked objects:
   520 ;;		On entry : B00/0
   521 ;;		On exit  : 300/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   524 ;;      Params:         0       0       0       0
   525 ;;      Locals:         0       1       0       0
   526 ;;      Temps:          0       0       0       0
   527 ;;      Totals:         0       1       0       0
   528 ;;Total ram usage:        1 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    1
   531 ;; This function calls:
   532 ;;		Nothing
   533 ;; This function is called by:
   534 ;;		_send_hex_byte
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           
   539                           ;psect for function _putchar
   540  0128                     _putchar:
   541                           
   542                           ;incstack = 0
   543                           ; Regs used in _putchar: [wreg]
   544                           ;putchar@value stored from wreg
   545  0128  00A0               	movwf	putchar@value
   546                           
   547                           ;newmain.c: 92: void putchar(char value);newmain.c: 93: {;newmain.c: 94:   TXREG = value
      +                          ;
   548  0129  0820               	movf	putchar@value,w
   549  012A  0099               	movwf	25	;volatile
   550  012B  0000               	nop	;# 
   551  012C                     l54:	
   552                           ;newmain.c: 96:   while(!PIR1bits.TXIF){ }
   553                           
   554  012C  1283               	bcf	3,5	;RP0=0, select bank0
   555  012D  1303               	bcf	3,6	;RP1=0, select bank0
   556  012E  1A0C               	btfsc	12,4	;volatile
   557  012F  0008               	return
   558  0130  292C               	goto	l54
   559  0131                     __end_of_putchar:
   560                           
   561                           	psect	text3
   562  0027                     __ptext3:	
   563 ;; *************** function _ISR *****************
   564 ;; Defined at:
   565 ;;		line 45 in file "newmain.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  time            1    8[COMMON] unsigned char 
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 300/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   579 ;;      Params:         0       0       0       0
   580 ;;      Locals:         1       0       0       0
   581 ;;      Temps:          8       0       0       0
   582 ;;      Totals:         9       0       0       0
   583 ;;Total ram usage:        9 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; This function calls:
   586 ;;		Nothing
   587 ;; This function is called by:
   588 ;;		Interrupt level 1
   589 ;; This function uses a non-reentrant model
   590 ;;
   591                           
   592                           
   593                           ;psect for function _ISR
   594  0027                     _ISR:
   595                           
   596                           ;newmain.c: 47:   uint8_t time = TMR0;
   597  0027  0801               	movf	1,w	;volatile
   598  0028  00FF               	movwf	127
   599  0029  087F               	movf	127,w
   600  002A  00F8               	movwf	ISR@time
   601                           
   602                           ;newmain.c: 48:   TMR0 = 0;
   603  002B  0181               	clrf	1	;volatile
   604                           
   605                           ;newmain.c: 50:   PORTC = received_code;
   606  002C  0879               	movf	_received_code,w
   607  002D  0087               	movwf	7	;volatile
   608                           
   609                           ;newmain.c: 52:   switch(rx_state){
   610  002E  2886               	goto	i1l758
   611  002F                     i1l718:
   612                           
   613                           ;newmain.c: 54:     if (time >= 190 && time <= 232){
   614  002F  30BE               	movlw	190
   615  0030  0278               	subwf	ISR@time,w
   616  0031  1C03               	skipc
   617  0032  2899               	goto	i1l40
   618  0033  30E9               	movlw	233
   619  0034  0278               	subwf	ISR@time,w
   620  0035  1803               	skipnc
   621  0036  2899               	goto	i1l40
   622                           
   623                           ;newmain.c: 55:       received_code = 0;
   624  0037  3000               	movlw	0
   625  0038  00FC               	movwf	_received_code+3
   626  0039  3000               	movlw	0
   627  003A  00FB               	movwf	_received_code+2
   628  003B  3000               	movlw	0
   629  003C  00FA               	movwf	_received_code+1
   630  003D  3000               	movlw	0
   631  003E  00F9               	movwf	_received_code
   632                           
   633                           ;newmain.c: 56:       n_bits = 0;
   634  003F  01C8               	clrf	_n_bits
   635                           
   636                           ;newmain.c: 57:       rx_state = STATE_RECEIVING;
   637  0040  01FD               	clrf	_rx_state
   638  0041  0AFD               	incf	_rx_state,f
   639  0042  2899               	goto	i1l40
   640  0043                     i1l728:
   641                           
   642                           ;newmain.c: 61:     received_code <<= 1;
   643  0043  3001               	movlw	1
   644  0044  00F0               	movwf	??_ISR
   645  0045                     u21_25:
   646  0045  1003               	clrc
   647  0046  0DF9               	rlf	_received_code,f
   648  0047  0DFA               	rlf	_received_code+1,f
   649  0048  0DFB               	rlf	_received_code+2,f
   650  0049  0DFC               	rlf	_received_code+3,f
   651  004A  0BF0               	decfsz	??_ISR,f
   652  004B  2845               	goto	u21_25
   653                           
   654                           ;newmain.c: 62:     if (time >= 30 && time <= 42){
   655  004C  301E               	movlw	30
   656  004D  0278               	subwf	ISR@time,w
   657  004E  1C03               	skipc
   658  004F  285A               	goto	i1l738
   659  0050  302B               	movlw	43
   660  0051  0278               	subwf	ISR@time,w
   661  0052  1803               	skipnc
   662  0053  285A               	goto	i1l738
   663                           
   664                           ;newmain.c: 63:       received_code |= 1;
   665  0054  1479               	bsf	_received_code,0
   666  0055                     i1l736:
   667                           
   668                           ;newmain.c: 64:       n_bits++;
   669  0055  3001               	movlw	1
   670  0056  00FF               	movwf	127
   671  0057  087F               	movf	127,w
   672  0058  07C8               	addwf	_n_bits,f
   673                           
   674                           ;newmain.c: 65:     } else if (time >= 14 && time <= 20){
   675  0059  2864               	goto	i1l746
   676  005A                     i1l738:
   677  005A  300E               	movlw	14
   678  005B  0278               	subwf	ISR@time,w
   679  005C  1C03               	skipc
   680  005D  2862               	goto	i1l744
   681  005E  3015               	movlw	21
   682  005F  0278               	subwf	ISR@time,w
   683  0060  1C03               	btfss	3,0
   684  0061  2855               	goto	i1l736
   685  0062                     i1l744:
   686                           
   687                           ;newmain.c: 69:       rx_state = STATE_RESET;
   688  0062  01FD               	clrf	_rx_state
   689                           
   690                           ;newmain.c: 70:       break;
   691  0063  2899               	goto	i1l40
   692  0064                     i1l746:
   693                           
   694                           ;newmain.c: 72:     if (32 == n_bits){
   695  0064  3020               	movlw	32
   696  0065  0648               	xorwf	_n_bits,w
   697  0066  1D03               	btfss	3,2
   698  0067  2899               	goto	i1l40
   699                           
   700                           ;newmain.c: 74:       if ( ((received_code >> 24) & 0xff) == ((~received_code >> 16) & 0
      +                          xff) &&
   701  0068  0979               	comf	_received_code,w
   702  0069  00F0               	movwf	??_ISR
   703  006A  097A               	comf	_received_code+1,w
   704  006B  00F1               	movwf	??_ISR+1
   705  006C  097B               	comf	_received_code+2,w
   706  006D  00F2               	movwf	??_ISR+2
   707  006E  097C               	comf	_received_code+3,w
   708  006F  00F3               	movwf	??_ISR+3
   709  0070  3010               	movlw	16
   710  0071                     u27_25:
   711  0071  1003               	clrc
   712  0072  0CF3               	rrf	??_ISR+3,f
   713  0073  0CF2               	rrf	??_ISR+2,f
   714  0074  0CF1               	rrf	??_ISR+1,f
   715  0075  0CF0               	rrf	??_ISR,f
   716  0076  3EFF               	addlw	-1
   717  0077  1D03               	skipz
   718  0078  2871               	goto	u27_25
   719  0079  0870               	movf	??_ISR,w
   720  007A  067C               	xorwf	_received_code+3,w
   721  007B  1D03               	skipz
   722  007C  2862               	goto	i1l744
   723  007D  0979               	comf	_received_code,w
   724  007E  067A               	xorwf	_received_code+1,w
   725  007F  1D03               	skipz
   726  0080  2862               	goto	i1l744
   727                           
   728                           ;newmain.c: 75:     ((received_code >> 8) & 0xff) == ((~received_code >> 0) & 0xff)){;ne
      +                          wmain.c: 76:  rx_state = STATE_DONE;
   729  0081  3002               	movlw	2
   730  0082  00FF               	movwf	127
   731  0083  087F               	movf	127,w
   732  0084  00FD               	movwf	_rx_state
   733                           
   734                           ;newmain.c: 77:       } else {
   735  0085  2899               	goto	i1l40
   736  0086                     i1l758:
   737  0086  087D               	movf	_rx_state,w
   738  0087  00F0               	movwf	??_ISR
   739  0088  01F1               	clrf	??_ISR+1
   740                           
   741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   742                           ; Switch size 1, requested type "simple"
   743                           ; Number of cases is 1, Range of values is 0 to 0
   744                           ; switch strategies available:
   745                           ; Name         Instructions Cycles
   746                           ; simple_byte            4     3 (average)
   747                           ; direct_byte            9     7 (fixed)
   748                           ; jumptable            260     6 (fixed)
   749                           ;	Chosen strategy is simple_byte
   750  0089  0871               	movf	??_ISR+1,w
   751  008A  3A00               	xorlw	0	; case 0
   752  008B  1903               	skipnz
   753  008C  288E               	goto	i1l818
   754  008D  2862               	goto	i1l744
   755  008E                     i1l818:
   756                           
   757                           ; Switch size 1, requested type "simple"
   758                           ; Number of cases is 3, Range of values is 0 to 2
   759                           ; switch strategies available:
   760                           ; Name         Instructions Cycles
   761                           ; simple_byte           10     6 (average)
   762                           ; direct_byte           13     7 (fixed)
   763                           ; jumptable            260     6 (fixed)
   764                           ;	Chosen strategy is simple_byte
   765  008E  0870               	movf	??_ISR,w
   766  008F  3A00               	xorlw	0	; case 0
   767  0090  1903               	skipnz
   768  0091  282F               	goto	i1l718
   769  0092  3A01               	xorlw	1	; case 1
   770  0093  1903               	skipnz
   771  0094  2843               	goto	i1l728
   772  0095  3A03               	xorlw	3	; case 2
   773  0096  1903               	skipnz
   774  0097  2899               	goto	i1l40
   775  0098  2862               	goto	i1l744
   776  0099                     i1l40:
   777                           
   778                           ;newmain.c: 89:   INTCONbits.INTF = 0;
   779  0099  108B               	bcf	11,1	;volatile
   780  009A  0877               	movf	??_ISR+7,w
   781  009B  00FF               	movwf	127
   782  009C  0876               	movf	??_ISR+6,w
   783  009D  008A               	movwf	10
   784  009E  0875               	movf	??_ISR+5,w
   785  009F  0084               	movwf	4
   786  00A0  0E74               	swapf	(??_ISR+4)^(0+4294967168),w
   787  00A1  0083               	movwf	3
   788  00A2  0EFE               	swapf	126,f
   789  00A3  0E7E               	swapf	126,w
   790  00A4  0009               	retfie
   791  00A5                     __end_of_ISR:
   792  007E                     btemp	set	126	;btemp
   793  007E                     wtemp0	set	126
   794                           
   795                           	psect	intentry
   796  0004                     __pintentry:	
   797                           ;incstack = 0
   798                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
   799                           
   800  0004                     interrupt_function:
   801  007E                     saved_w	set	btemp
   802  0004  00FE               	movwf	btemp
   803  0005  0E03               	swapf	3,w
   804  0006  00F4               	movwf	??_ISR+4
   805  0007  0804               	movf	4,w
   806  0008  00F5               	movwf	??_ISR+5
   807  0009  080A               	movf	10,w
   808  000A  00F6               	movwf	??_ISR+6
   809  000B  1283               	bcf	3,5	;RP0=0, select bank0
   810  000C  1303               	bcf	3,6	;RP1=0, select bank0
   811  000D  087F               	movf	btemp+1,w
   812  000E  00F7               	movwf	??_ISR+7
   813  000F  118A  2827         	ljmp	_ISR
   814                           
   815                           	psect	config
   816                           
   817                           ;Config register CONFIG1 @ 0x2007
   818                           ;	Oscillator Selection bits
   819                           ;	FOSC = INTOSCCLK, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O funct
      +                          ion on RA7/OSC1/CLKIN
   820                           ;	Watchdog Timer Enable bit
   821                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   822                           ;	Power-up Timer Enable bit
   823                           ;	PWRTE = OFF, PWRT disabled
   824                           ;	RE3/MCLR Pin Function Select bit
   825                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   826                           ;	Code Protection bit
   827                           ;	CP = OFF, Program memory code protection is disabled
   828                           ;	Brown-out Reset Selection bits
   829                           ;	BOREN = OFF, BOR disabled
   830                           ;	Brown-out Reset Voltage selection bit
   831                           ;	BORV = 19, Brown-out Reset Voltage (VBOR) set to 1.9 V nominal
   832                           ;	INTOSC PLL Enable bit
   833                           ;	PLLEN = ON, INTOSC Frequency is 16MHz (32x)
   834                           ;	In-Circuit Debugger Mode bit
   835                           ;	DEBUG = 0x1, unprogrammed default
   836  2007                     	org	8199
   837  2007  3CF5               	dw	15605
   838                           
   839                           ;Config register CONFIG2 @ 0x2008
   840                           ;	Voltage Regulator Capacitor Enable bits
   841                           ;	VCAPEN = DIS, All VCAP pin functions are disabled
   842  2008                     	org	8200
   843  2008  FFFF               	dw	65535

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     23      41
    BANK1            80      0       0
    BANK2            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_send_hex_byte
    _send_hex_byte->_putchar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     113
                      _send_hex_byte
 ---------------------------------------------------------------------------------
 (1) _send_hex_byte                                       22    22      0     113
                                              1 BANK0     22    22      0
                            _putchar
 ---------------------------------------------------------------------------------
 (2) _putchar                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  9     9      0     133
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _send_hex_byte
     _putchar

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               10      0       0       9        0.0%
BITBANK2            10      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     17      29       5       51.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37      10        0.0%
ABS                  0      0      37       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon May 25 12:57:26 2020

                      pc 0002                       l54 012C                       fsr 0004  
                    l792 00C1                      u170 00E1                      u185 00F1  
                    _ISR 0027                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     i1l40 0099                     _TMR0 0001  
                   _main 00A5                     btemp 007E                     start 0011  
                  ??_ISR 0070                    ?_main 0070                    i1l718 002F  
                  i1l744 0062                    i1l736 0055                    i1l728 0043  
                  i1l818 008E                    i1l746 0064                    i1l738 005A  
                  i1l758 0086                    u21_25 0045                    _SPBRG 0099  
                  _PORTC 0007                    u27_25 0071                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    pclath 000A  
 send_hex_byte@hex_table 0025          __end_of_putchar 0131                    status 0003  
                  wtemp0 007E          __initialization 0013             __end_of_main 00D7  
                 ??_main 0037    __end_of_send_hex_byte 0107                   _ANSELB 0186  
           putchar@value 0020                   _n_bits 0048                   saved_w 007E  
              ??_putchar 0020  __end_of__initialization 0024           __pcstackCOMMON 0070  
           __pidataBANK0 0107           _OPTION_REGbits 0081               __pbssBANK0 0048  
                ISR@time 0078               __pmaintext 00A5               __pintentry 0004  
                __ptext1 00D7                  __ptext2 0128                  __ptext3 0027  
           __size_of_ISR 007E                  _putchar 0128            _received_code 0079  
   end_of_initialization 0024                _RCSTAbits 0018                _TXSTAbits 0098  
 __size_of_send_hex_byte 0030      start_initialization 0013              __end_of_ISR 00A5  
             init_fetch0 0118       send_hex_byte@F1111 0037              __pdataBANK0 0037  
          _send_hex_byte 00D7              __pbssCOMMON 0079                ___latbits 0001  
          __pcstackBANK0 0020       send_hex_byte@value 0036           ?_send_hex_byte 0070  
               ?_putchar 0070        interrupt_function 0004                 _PIR1bits 000C  
        ??_send_hex_byte 0021         __size_of_putchar 0009            __size_of_main 0032  
               _rx_state 007D               _INTCONbits 000B                 init_ram0 011C  
               intlevel1 0000               _OSCCONbits 0090  
